"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb-connection-string-url";
exports.ids = ["vendor-chunks/mongodb-connection-string-url"];
exports.modules = {

/***/ "(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb-connection-string-url/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommaAndColonSeparatedRecord = exports.ConnectionString = exports.redactConnectionString = void 0;\nconst whatwg_url_1 = __webpack_require__(/*! whatwg-url */ \"(ssr)/./node_modules/whatwg-url/index.js\");\nconst redact_1 = __webpack_require__(/*! ./redact */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/redact.js\");\nObject.defineProperty(exports, \"redactConnectionString\", ({ enumerable: true, get: function () { return redact_1.redactConnectionString; } }));\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\nfunction connectionStringHasValidScheme(connectionString) {\n    return (connectionString.startsWith('mongodb://') ||\n        connectionString.startsWith('mongodb+srv://'));\n}\nconst HOSTS_REGEX = /^(?<protocol>[^/]+):\\/\\/(?:(?<username>[^:@]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^/?@]*)(?<rest>.*)/;\nclass CaseInsensitiveMap extends Map {\n    delete(name) {\n        return super.delete(this._normalizeKey(name));\n    }\n    get(name) {\n        return super.get(this._normalizeKey(name));\n    }\n    has(name) {\n        return super.has(this._normalizeKey(name));\n    }\n    set(name, value) {\n        return super.set(this._normalizeKey(name), value);\n    }\n    _normalizeKey(name) {\n        name = `${name}`;\n        for (const key of this.keys()) {\n            if (key.toLowerCase() === name.toLowerCase()) {\n                name = key;\n                break;\n            }\n        }\n        return name;\n    }\n}\nfunction caseInsenstiveURLSearchParams(Ctor) {\n    return class CaseInsenstiveURLSearchParams extends Ctor {\n        append(name, value) {\n            return super.append(this._normalizeKey(name), value);\n        }\n        delete(name) {\n            return super.delete(this._normalizeKey(name));\n        }\n        get(name) {\n            return super.get(this._normalizeKey(name));\n        }\n        getAll(name) {\n            return super.getAll(this._normalizeKey(name));\n        }\n        has(name) {\n            return super.has(this._normalizeKey(name));\n        }\n        set(name, value) {\n            return super.set(this._normalizeKey(name), value);\n        }\n        keys() {\n            return super.keys();\n        }\n        values() {\n            return super.values();\n        }\n        entries() {\n            return super.entries();\n        }\n        [Symbol.iterator]() {\n            return super[Symbol.iterator]();\n        }\n        _normalizeKey(name) {\n            return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n        }\n    };\n}\nclass URLWithoutHost extends whatwg_url_1.URL {\n}\nclass MongoParseError extends Error {\n    get name() {\n        return 'MongoParseError';\n    }\n}\nclass ConnectionString extends URLWithoutHost {\n    constructor(uri, options = {}) {\n        var _a;\n        const { looseValidation } = options;\n        if (!looseValidation && !connectionStringHasValidScheme(uri)) {\n            throw new MongoParseError('Invalid scheme, expected connection string to start with \"mongodb://\" or \"mongodb+srv://\"');\n        }\n        const match = uri.match(HOSTS_REGEX);\n        if (!match) {\n            throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n        }\n        const { protocol, username, password, hosts, rest } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n        if (!looseValidation) {\n            if (!protocol || !hosts) {\n                throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n            }\n            try {\n                decodeURIComponent(username !== null && username !== void 0 ? username : '');\n                decodeURIComponent(password !== null && password !== void 0 ? password : '');\n            }\n            catch (err) {\n                throw new MongoParseError(err.message);\n            }\n            const illegalCharacters = /[:/?#[\\]@]/gi;\n            if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n                throw new MongoParseError(`Username contains unescaped characters ${username}`);\n            }\n            if (!username || !password) {\n                const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n                if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n                    throw new MongoParseError('URI contained empty userinfo section');\n                }\n            }\n            if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n                throw new MongoParseError('Password contains unescaped characters');\n            }\n        }\n        let authString = '';\n        if (typeof username === 'string')\n            authString += username;\n        if (typeof password === 'string')\n            authString += `:${password}`;\n        if (authString)\n            authString += '@';\n        try {\n            super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n        }\n        catch (err) {\n            if (looseValidation) {\n                new ConnectionString(uri, {\n                    ...options,\n                    looseValidation: false\n                });\n            }\n            if (typeof err.message === 'string') {\n                err.message = err.message.replace(DUMMY_HOSTNAME, hosts);\n            }\n            throw err;\n        }\n        this._hosts = hosts.split(',');\n        if (!looseValidation) {\n            if (this.isSRV && this.hosts.length !== 1) {\n                throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n            }\n            if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n                throw new MongoParseError('mongodb+srv URI cannot have port number');\n            }\n        }\n        if (!this.pathname) {\n            this.pathname = '/';\n        }\n        Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n    }\n    get host() { return DUMMY_HOSTNAME; }\n    set host(_ignored) { throw new Error('No single host for connection string'); }\n    get hostname() { return DUMMY_HOSTNAME; }\n    set hostname(_ignored) { throw new Error('No single host for connection string'); }\n    get port() { return ''; }\n    set port(_ignored) { throw new Error('No single host for connection string'); }\n    get href() { return this.toString(); }\n    set href(_ignored) { throw new Error('Cannot set href for connection strings'); }\n    get isSRV() {\n        return this.protocol.includes('srv');\n    }\n    get hosts() {\n        return this._hosts;\n    }\n    set hosts(list) {\n        this._hosts = list;\n    }\n    toString() {\n        return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n    }\n    clone() {\n        return new ConnectionString(this.toString(), {\n            looseValidation: true\n        });\n    }\n    redact(options) {\n        return (0, redact_1.redactValidConnectionString)(this, options);\n    }\n    typedSearchParams() {\n        const sametype =  false && 0;\n        return this.searchParams;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        const { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash } = this;\n        return { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash };\n    }\n}\nexports.ConnectionString = ConnectionString;\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n    constructor(from) {\n        super();\n        for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n            if (!entry)\n                continue;\n            const colonIndex = entry.indexOf(':');\n            if (colonIndex === -1) {\n                this.set(entry, '');\n            }\n            else {\n                this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n            }\n        }\n    }\n    toString() {\n        return [...this].map(entry => entry.join(':')).join(',');\n    }\n}\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;\nexports[\"default\"] = ConnectionString;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb-connection-string-url/lib/redact.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb-connection-string-url/lib/redact.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\nconst index_1 = __importStar(__webpack_require__(/*! ./index */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\"));\nfunction redactValidConnectionString(inputUrl, options) {\n    var _a, _b;\n    const url = inputUrl.clone();\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '_credentials_';\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    if ((url.username || url.password) && redactUsernames) {\n        url.username = replacementString;\n        url.password = '';\n    }\n    else if (url.password) {\n        url.password = replacementString;\n    }\n    if (url.searchParams.has('authMechanismProperties')) {\n        const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get('authMechanismProperties'));\n        if (props.get('AWS_SESSION_TOKEN')) {\n            props.set('AWS_SESSION_TOKEN', replacementString);\n            url.searchParams.set('authMechanismProperties', props.toString());\n        }\n    }\n    if (url.searchParams.has('tlsCertificateKeyFilePassword')) {\n        url.searchParams.set('tlsCertificateKeyFilePassword', replacementString);\n    }\n    if (url.searchParams.has('proxyUsername') && redactUsernames) {\n        url.searchParams.set('proxyUsername', replacementString);\n    }\n    if (url.searchParams.has('proxyPassword')) {\n        url.searchParams.set('proxyPassword', replacementString);\n    }\n    return url;\n}\nexports.redactValidConnectionString = redactValidConnectionString;\nfunction redactConnectionString(uri, options) {\n    var _a, _b;\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : '<credentials>';\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    let parsed;\n    try {\n        parsed = new index_1.default(uri);\n    }\n    catch (_c) { }\n    if (parsed) {\n        options = { ...options, replacementString: '___credentials___' };\n        return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n    }\n    const R = replacementString;\n    const replacements = [\n        uri => uri.replace(redactUsernames ? /(\\/\\/)(.*)(@)/g : /(\\/\\/[^@]*:)(.*)(@)/g, `$1${R}$3`),\n        uri => uri.replace(/(AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, `$1${R}`),\n        uri => uri.replace(/(tlsCertificateKeyFilePassword=)([^&]+)/gi, `$1${R}`),\n        uri => redactUsernames ? uri.replace(/(proxyUsername=)([^&]+)/gi, `$1${R}`) : uri,\n        uri => uri.replace(/(proxyPassword=)([^&]+)/gi, `$1${R}`)\n    ];\n    for (const replacer of replacements) {\n        uri = replacer(uri);\n    }\n    return uri;\n}\nexports.redactConnectionString = redactConnectionString;\n//# sourceMappingURL=redact.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi1jb25uZWN0aW9uLXN0cmluZy11cmwvbGliL3JlZGFjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsbUNBQW1DO0FBQ3BFLDZCQUE2QixtQkFBTyxDQUFDLGdGQUFTO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RixFQUFFO0FBQy9GLHdFQUF3RSxFQUFFO0FBQzFFLDZFQUE2RSxFQUFFO0FBQy9FLCtFQUErRSxFQUFFO0FBQ2pGLDZEQUE2RCxFQUFFO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGItY29ubmVjdGlvbi1zdHJpbmctdXJsL2xpYi9yZWRhY3QuanM/YWNmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWRhY3RDb25uZWN0aW9uU3RyaW5nID0gZXhwb3J0cy5yZWRhY3RWYWxpZENvbm5lY3Rpb25TdHJpbmcgPSB2b2lkIDA7XG5jb25zdCBpbmRleF8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2luZGV4XCIpKTtcbmZ1bmN0aW9uIHJlZGFjdFZhbGlkQ29ubmVjdGlvblN0cmluZyhpbnB1dFVybCwgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdXJsID0gaW5wdXRVcmwuY2xvbmUoKTtcbiAgICBjb25zdCByZXBsYWNlbWVudFN0cmluZyA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZXBsYWNlbWVudFN0cmluZykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ19jcmVkZW50aWFsc18nO1xuICAgIGNvbnN0IHJlZGFjdFVzZXJuYW1lcyA9IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWRhY3RVc2VybmFtZXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWU7XG4gICAgaWYgKCh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSAmJiByZWRhY3RVc2VybmFtZXMpIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lID0gcmVwbGFjZW1lbnRTdHJpbmc7XG4gICAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgIH1cbiAgICBlbHNlIGlmICh1cmwucGFzc3dvcmQpIHtcbiAgICAgICAgdXJsLnBhc3N3b3JkID0gcmVwbGFjZW1lbnRTdHJpbmc7XG4gICAgfVxuICAgIGlmICh1cmwuc2VhcmNoUGFyYW1zLmhhcygnYXV0aE1lY2hhbmlzbVByb3BlcnRpZXMnKSkge1xuICAgICAgICBjb25zdCBwcm9wcyA9IG5ldyBpbmRleF8xLkNvbW1hQW5kQ29sb25TZXBhcmF0ZWRSZWNvcmQodXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2F1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzJykpO1xuICAgICAgICBpZiAocHJvcHMuZ2V0KCdBV1NfU0VTU0lPTl9UT0tFTicpKSB7XG4gICAgICAgICAgICBwcm9wcy5zZXQoJ0FXU19TRVNTSU9OX1RPS0VOJywgcmVwbGFjZW1lbnRTdHJpbmcpO1xuICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2F1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzJywgcHJvcHMudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHVybC5zZWFyY2hQYXJhbXMuaGFzKCd0bHNDZXJ0aWZpY2F0ZUtleUZpbGVQYXNzd29yZCcpKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd0bHNDZXJ0aWZpY2F0ZUtleUZpbGVQYXNzd29yZCcsIHJlcGxhY2VtZW50U3RyaW5nKTtcbiAgICB9XG4gICAgaWYgKHVybC5zZWFyY2hQYXJhbXMuaGFzKCdwcm94eVVzZXJuYW1lJykgJiYgcmVkYWN0VXNlcm5hbWVzKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdwcm94eVVzZXJuYW1lJywgcmVwbGFjZW1lbnRTdHJpbmcpO1xuICAgIH1cbiAgICBpZiAodXJsLnNlYXJjaFBhcmFtcy5oYXMoJ3Byb3h5UGFzc3dvcmQnKSkge1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgncHJveHlQYXNzd29yZCcsIHJlcGxhY2VtZW50U3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn1cbmV4cG9ydHMucmVkYWN0VmFsaWRDb25uZWN0aW9uU3RyaW5nID0gcmVkYWN0VmFsaWRDb25uZWN0aW9uU3RyaW5nO1xuZnVuY3Rpb24gcmVkYWN0Q29ubmVjdGlvblN0cmluZyh1cmksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHJlcGxhY2VtZW50U3RyaW5nID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlcGxhY2VtZW50U3RyaW5nKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnPGNyZWRlbnRpYWxzPic7XG4gICAgY29uc3QgcmVkYWN0VXNlcm5hbWVzID0gKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZGFjdFVzZXJuYW1lcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdHJ1ZTtcbiAgICBsZXQgcGFyc2VkO1xuICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZCA9IG5ldyBpbmRleF8xLmRlZmF1bHQodXJpKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9jKSB7IH1cbiAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIHJlcGxhY2VtZW50U3RyaW5nOiAnX19fY3JlZGVudGlhbHNfX18nIH07XG4gICAgICAgIHJldHVybiBwYXJzZWQucmVkYWN0KG9wdGlvbnMpLnRvU3RyaW5nKCkucmVwbGFjZSgvX19fY3JlZGVudGlhbHNfX18vZywgcmVwbGFjZW1lbnRTdHJpbmcpO1xuICAgIH1cbiAgICBjb25zdCBSID0gcmVwbGFjZW1lbnRTdHJpbmc7XG4gICAgY29uc3QgcmVwbGFjZW1lbnRzID0gW1xuICAgICAgICB1cmkgPT4gdXJpLnJlcGxhY2UocmVkYWN0VXNlcm5hbWVzID8gLyhcXC9cXC8pKC4qKShAKS9nIDogLyhcXC9cXC9bXkBdKjopKC4qKShAKS9nLCBgJDEke1J9JDNgKSxcbiAgICAgICAgdXJpID0+IHVyaS5yZXBsYWNlKC8oQVdTX1NFU1NJT05fVE9LRU4oOnwlM0EpKShbXiwmXSspL2dpLCBgJDEke1J9YCksXG4gICAgICAgIHVyaSA9PiB1cmkucmVwbGFjZSgvKHRsc0NlcnRpZmljYXRlS2V5RmlsZVBhc3N3b3JkPSkoW14mXSspL2dpLCBgJDEke1J9YCksXG4gICAgICAgIHVyaSA9PiByZWRhY3RVc2VybmFtZXMgPyB1cmkucmVwbGFjZSgvKHByb3h5VXNlcm5hbWU9KShbXiZdKykvZ2ksIGAkMSR7Un1gKSA6IHVyaSxcbiAgICAgICAgdXJpID0+IHVyaS5yZXBsYWNlKC8ocHJveHlQYXNzd29yZD0pKFteJl0rKS9naSwgYCQxJHtSfWApXG4gICAgXTtcbiAgICBmb3IgKGNvbnN0IHJlcGxhY2VyIG9mIHJlcGxhY2VtZW50cykge1xuICAgICAgICB1cmkgPSByZXBsYWNlcih1cmkpO1xuICAgIH1cbiAgICByZXR1cm4gdXJpO1xufVxuZXhwb3J0cy5yZWRhY3RDb25uZWN0aW9uU3RyaW5nID0gcmVkYWN0Q29ubmVjdGlvblN0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGFjdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb-connection-string-url/lib/redact.js\n");

/***/ })

};
;