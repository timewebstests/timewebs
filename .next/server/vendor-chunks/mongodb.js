"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb";
exports.ids = ["vendor-chunks/mongodb"];
exports.modules = {

/***/ "(ssr)/./node_modules/mongodb/lib/admin.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/admin.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Admin = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_databases_1 = __webpack_require__(/*! ./operations/list_databases */ \"(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst validate_collection_1 = __webpack_require__(/*! ./operations/validate_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return this.command({ ping: 1 }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGVBQWUsbUJBQU8sQ0FBQyx3REFBUTtBQUMvQiw0QkFBNEIsbUJBQU8sQ0FBQyx3R0FBZ0M7QUFDcEUseUJBQXlCLG1CQUFPLENBQUMsa0dBQTZCO0FBQzlELHNCQUFzQixtQkFBTyxDQUFDLDRGQUEwQjtBQUN4RCxzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDeEQsOEJBQThCLG1CQUFPLENBQUMsNEdBQWtDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixjQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlCQUFpQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFTO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3SUFBd0ksNkJBQTZCO0FBQ3JLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFCQUFxQjtBQUNuRDtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYWRtaW4uanM/NGNkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWRtaW4gPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi9ic29uXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBsaXN0X2RhdGFiYXNlc18xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlc1wiKTtcbmNvbnN0IHJlbW92ZV91c2VyXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL3JlbW92ZV91c2VyXCIpO1xuY29uc3QgcnVuX2NvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvcnVuX2NvbW1hbmRcIik7XG5jb25zdCB2YWxpZGF0ZV9jb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL3ZhbGlkYXRlX2NvbGxlY3Rpb25cIik7XG4vKipcbiAqIFRoZSAqKkFkbWluKiogY2xhc3MgaXMgYW4gaW50ZXJuYWwgY2xhc3MgdGhhdCBhbGxvd3MgY29udmVuaWVudCBhY2Nlc3MgdG9cbiAqIHRoZSBhZG1pbiBmdW5jdGlvbmFsaXR5IGFuZCBjb21tYW5kcyBmb3IgTW9uZ29EQi5cbiAqXG4gKiAqKkFETUlOIENhbm5vdCBkaXJlY3RseSBiZSBpbnN0YW50aWF0ZWQqKlxuICogQHB1YmxpY1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcbiAqXG4gKiBjb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQoJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcnKTtcbiAqIGNvbnN0IGFkbWluID0gY2xpZW50LmRiKCkuYWRtaW4oKTtcbiAqIGNvbnN0IGRiSW5mbyA9IGF3YWl0IGFkbWluLmxpc3REYXRhYmFzZXMoKTtcbiAqIGZvciAoY29uc3QgZGIgb2YgZGJJbmZvLmRhdGFiYXNlcykge1xuICogICBjb25zb2xlLmxvZyhkYi5uYW1lKTtcbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBBZG1pbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEFkbWluIGluc3RhbmNlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGIpIHtcbiAgICAgICAgdGhpcy5zID0geyBkYiB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgY29tbWFuZFxuICAgICAqXG4gICAgICogVGhlIGRyaXZlciB3aWxsIGVuc3VyZSB0aGUgZm9sbG93aW5nIGZpZWxkcyBhcmUgYXR0YWNoZWQgdG8gdGhlIGNvbW1hbmQgc2VudCB0byB0aGUgc2VydmVyOlxuICAgICAqIC0gYGxzaWRgIC0gc291cmNlZCBmcm9tIGFuIGltcGxpY2l0IHNlc3Npb24gb3Igb3B0aW9ucy5zZXNzaW9uXG4gICAgICogLSBgJHJlYWRQcmVmZXJlbmNlYCAtIGRlZmF1bHRzIHRvIHByaW1hcnkgb3IgY2FuIGJlIGNvbmZpZ3VyZWQgYnkgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZVxuICAgICAqIC0gYCRkYmAgLSBzb3VyY2VkIGZyb20gdGhlIG5hbWUgb2YgdGhpcyBkYXRhYmFzZVxuICAgICAqXG4gICAgICogSWYgdGhlIGNsaWVudCBoYXMgYSBzZXJ2ZXJBcGkgc2V0dGluZzpcbiAgICAgKiAtIGBhcGlWZXJzaW9uYFxuICAgICAqIC0gYGFwaVN0cmljdGBcbiAgICAgKiAtIGBhcGlEZXByZWNhdGlvbkVycm9yc2BcbiAgICAgKlxuICAgICAqIFdoZW4gaW4gYSB0cmFuc2FjdGlvbjpcbiAgICAgKiAtIGByZWFkQ29uY2VybmAgLSBzb3VyY2VkIGZyb20gcmVhZENvbmNlcm4gc2V0IG9uIHRoZSBUcmFuc2FjdGlvbk9wdGlvbnNcbiAgICAgKiAtIGB3cml0ZUNvbmNlcm5gIC0gc291cmNlZCBmcm9tIHdyaXRlQ29uY2VybiBzZXQgb24gdGhlIFRyYW5zYWN0aW9uT3B0aW9uc1xuICAgICAqXG4gICAgICogQXR0YWNoaW5nIGFueSBvZiB0aGUgYWJvdmUgZmllbGRzIHRvIHRoZSBjb21tYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgYXMgdGhlIGRyaXZlciB3aWxsIG92ZXJ3cml0ZSB0aGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tbWFuZCAtIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIGNvbW1hbmQoY29tbWFuZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5zLmRiLmNsaWVudCwgbmV3IHJ1bl9jb21tYW5kXzEuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uKGNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLigwLCBic29uXzEucmVzb2x2ZUJTT05PcHRpb25zKShvcHRpb25zKSxcbiAgICAgICAgICAgIHNlc3Npb246IG9wdGlvbnM/LnNlc3Npb24sXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogb3B0aW9ucz8ucmVhZFByZWZlcmVuY2VcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgc2VydmVyIGJ1aWxkIGluZm9ybWF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIGJ1aWxkSW5mbyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoeyBidWlsZGluZm86IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBzZXJ2ZXIgYnVpbGQgaW5mb3JtYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgc2VydmVySW5mbyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoeyBidWlsZGluZm86IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoaXMgZGIncyBzZXJ2ZXIgc3RhdHVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBzZXJ2ZXJTdGF0dXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKHsgc2VydmVyU3RhdHVzOiAxIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQaW5nIHRoZSBNb25nb0RCIHNlcnZlciBhbmQgcmV0cmlldmUgcmVzdWx0c1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBwaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCh7IHBpbmc6IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHVzZXIgZnJvbSBhIGRhdGFiYXNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcm5hbWUgLSBUaGUgdXNlcm5hbWUgdG8gcmVtb3ZlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVVc2VyKHVzZXJuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnMuZGIuY2xpZW50LCBuZXcgcmVtb3ZlX3VzZXJfMS5SZW1vdmVVc2VyT3BlcmF0aW9uKHRoaXMucy5kYiwgdXNlcm5hbWUsIHsgZGJOYW1lOiAnYWRtaW4nLCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgYW4gZXhpc3RpbmcgY29sbGVjdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25OYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbGxlY3Rpb24gdG8gdmFsaWRhdGUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyB2YWxpZGF0ZUNvbGxlY3Rpb24oY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5zLmRiLmNsaWVudCwgbmV3IHZhbGlkYXRlX2NvbGxlY3Rpb25fMS5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24odGhpcywgY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgYXZhaWxhYmxlIGRhdGFiYXNlc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBsaXN0RGF0YWJhc2VzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucy5kYi5jbGllbnQsIG5ldyBsaXN0X2RhdGFiYXNlc18xLkxpc3REYXRhYmFzZXNPcGVyYXRpb24odGhpcy5zLmRiLCBvcHRpb25zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBSZXBsaWNhU2V0IHN0YXR1c1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyByZXBsU2V0R2V0U3RhdHVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCh7IHJlcGxTZXRHZXRTdGF0dXM6IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5BZG1pbiA9IEFkbWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRtaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/admin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bson.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/bson.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.EJSON = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\nvar bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_1.Binary; } }));\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_1.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_1.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_1.BSONType; } }));\nObject.defineProperty(exports, \"calculateObjectSize\", ({ enumerable: true, get: function () { return bson_1.calculateObjectSize; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_1.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_1.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_1.Decimal128; } }));\nObject.defineProperty(exports, \"deserialize\", ({ enumerable: true, get: function () { return bson_1.deserialize; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_1.Double; } }));\nObject.defineProperty(exports, \"EJSON\", ({ enumerable: true, get: function () { return bson_1.EJSON; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_1.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_1.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_1.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_1.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_1.ObjectId; } }));\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return bson_1.serialize; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_1.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_1.UUID; } }));\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\nexports.resolveBSONOptions = resolveBSONOptions;\n//# sourceMappingURL=bson.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bson.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkOperationBase = exports.BulkWriteShimOperation = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst delete_1 = __webpack_require__(/*! ../operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst insert_1 = __webpack_require__(/*! ../operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst operation_1 = __webpack_require__(/*! ../operations/operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst update_1 = __webpack_require__(/*! ../operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult, isOrdered) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */\n    getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0)\n            return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index }) => !bulkResult.writeErrors.some(writeError => index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${this.result})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, bulkOperation.isOrdered, err, callback);\n        }\n        // Merge the results together\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        if (bulkOperation.handleWriteError(callback, writeResult))\n            return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites =\n                finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n        }\n    }\n    try {\n        const operation = isInsertBatch(batch)\n            ? new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n            : isUpdateBatch(batch)\n                ? new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                : isDeleteBatch(batch)\n                    ? new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n                    : null;\n        if (operation != null) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, operation).then(result => resultHandler(undefined, result), error => resultHandler(error));\n        }\n    }\n    catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, isOrdered, err, callback) {\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n    }, new BulkWriteResult(bulkResult, isOrdered)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\nconst executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    execute(_server, session) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n}\nexports.BulkWriteShimOperation = BulkWriteShimOperation;\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        if (document._id == null && !shouldForceServerObjectId(this)) {\n            document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = shouldForceServerObjectId(this);\n            if (op.insertOne && op.insertOne.document == null) {\n                // NOTE: provided for legacy support, but this is a malformed operation\n                if (forceServerObjectId !== true && op.insertOne._id == null) {\n                    op.insertOne._id = new bson_1.ObjectId();\n                }\n                return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n            }\n            if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n                op.insertOne.document._id = new bson_1.ObjectId();\n            }\n            return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n    enumerable: true,\n    get() {\n        return this.s.currentIndex;\n    }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n    if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.options.forceServerObjectId;\n    }\n    if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n    }\n    return false;\n}\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/ordered.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/ordered.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OrderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n//# sourceMappingURL=ordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnVsay9vcmRlcmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixhQUFhLG1CQUFPLENBQUMseURBQVM7QUFDOUIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsaUJBQWlCLG1CQUFPLENBQUMsaUVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0dBQW9HLHlCQUF5QjtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9idWxrL29yZGVyZWQuanM/MWU5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3JkZXJlZEJ1bGtPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBCU09OID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgT3JkZXJlZEJ1bGtPcGVyYXRpb24gZXh0ZW5kcyBjb21tb25fMS5CdWxrT3BlcmF0aW9uQmFzZSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucywgdHJ1ZSk7XG4gICAgfVxuICAgIGFkZFRvT3BlcmF0aW9uc0xpc3QoYmF0Y2hUeXBlLCBkb2N1bWVudCkge1xuICAgICAgICAvLyBHZXQgdGhlIGJzb25TaXplXG4gICAgICAgIGNvbnN0IGJzb25TaXplID0gQlNPTi5jYWxjdWxhdGVPYmplY3RTaXplKGRvY3VtZW50LCB7XG4gICAgICAgICAgICBjaGVja0tleXM6IGZhbHNlLFxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSB1c2VyIHNlbGVjdGVkIGZvciBCU09OIG9wdGlvbnMgaGVyZSxcbiAgICAgICAgICAgIC8vIGVyciBvbiB0aGUgc2FmZSBzaWRlLCBhbmQgY2hlY2sgdGhlIHNpemUgd2l0aCBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlLlxuICAgICAgICAgICAgaWdub3JlVW5kZWZpbmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgaWYgdGhlIGRvYyBpcyBiaWdnZXIgdGhhbiB0aGUgbWF4IEJTT04gc2l6ZVxuICAgICAgICBpZiAoYnNvblNpemUgPj0gdGhpcy5zLm1heEJzb25PYmplY3RTaXplKVxuICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBDaGFuZ2UgdGhpcyB0byBNb25nb0JTT05FcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgRG9jdW1lbnQgaXMgbGFyZ2VyIHRoYW4gdGhlIG1heGltdW0gc2l6ZSAke3RoaXMucy5tYXhCc29uT2JqZWN0U2l6ZX1gKTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoIG9iamVjdCBpZiB3ZSBkb24ndCBoYXZlIGEgY3VycmVudCBvbmVcbiAgICAgICAgaWYgKHRoaXMucy5jdXJyZW50QmF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IG5ldyBjb21tb25fMS5CYXRjaChiYXRjaFR5cGUsIHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1heEtleVNpemUgPSB0aGlzLnMubWF4S2V5U2l6ZTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgd2UgZXhjZWVkIHRoZSBtYXggYmF0Y2ggb3Agc2l6ZVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZSArIDEgPj0gdGhpcy5zLm1heFdyaXRlQmF0Y2hTaXplIHx8XG4gICAgICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgd2UgZXhjZWVkIHRoZSBtYXhCYXRjaFNpemVCeXRlcy4gT25seSBtYXR0ZXJzIGlmIGJhdGNoIGFscmVhZHkgaGFzIGEgZG9jLFxuICAgICAgICAgICAgLy8gc2luY2Ugd2UgY2FuJ3Qgc2VudCBhbiBlbXB0eSBiYXRjaFxuICAgICAgICAgICAgKHRoaXMucy5jdXJyZW50QmF0Y2hTaXplID4gMCAmJlxuICAgICAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplQnl0ZXMgKyBtYXhLZXlTaXplICsgYnNvblNpemUgPj0gdGhpcy5zLm1heEJhdGNoU2l6ZUJ5dGVzKSB8fFxuICAgICAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHRoZSBuZXcgb3AgZG9lcyBub3QgaGF2ZSB0aGUgc2FtZSBvcCB0eXBlIGFzIHRoZSBjdXJyZW50IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLmJhdGNoVHlwZSAhPT0gYmF0Y2hUeXBlKSB7XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBiYXRjaCB0byB0aGUgZXhlY3V0aW9uIHN0YWNrXG4gICAgICAgICAgICB0aGlzLnMuYmF0Y2hlcy5wdXNoKHRoaXMucy5jdXJyZW50QmF0Y2gpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgY3VycmVudCBzaXplIHRyYWNrZXJzXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZSA9IDA7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZUJ5dGVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuSU5TRVJUKSB7XG4gICAgICAgICAgICB0aGlzLnMuYnVsa1Jlc3VsdC5pbnNlcnRlZElkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5zLmN1cnJlbnRJbmRleCxcbiAgICAgICAgICAgICAgICBfaWQ6IGRvY3VtZW50Ll9pZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBhbiBhcnJheSBvZiBkb2N1bWVudHNcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdPcGVyYXRpb24gcGFzc2VkIGluIGNhbm5vdCBiZSBhbiBBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3JpZ2luYWxJbmRleGVzLnB1c2godGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3BlcmF0aW9ucy5wdXNoKGRvY3VtZW50KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemUgKz0gMTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemVCeXRlcyArPSBtYXhLZXlTaXplICsgYnNvblNpemU7XG4gICAgICAgIHRoaXMucy5jdXJyZW50SW5kZXggKz0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5PcmRlcmVkQnVsa09wZXJhdGlvbiA9IE9yZGVyZWRCdWxrT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3JkZXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/unordered.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/unordered.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnorderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(callback, writeResult) {\n        if (this.s.batches.length) {\n            return false;\n        }\n        return super.handleWriteError(callback, writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n//# sourceMappingURL=unordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnVsay91bm9yZGVyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyx5REFBUztBQUM5QixnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxpRUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxvR0FBb0cseUJBQXlCO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnVsay91bm9yZGVyZWQuanM/NGRhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVW5vcmRlcmVkQnVsa09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IEJTT04gPSByZXF1aXJlKFwiLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uIGV4dGVuZHMgY29tbW9uXzEuQnVsa09wZXJhdGlvbkJhc2Uge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMsIGZhbHNlKTtcbiAgICB9XG4gICAgaGFuZGxlV3JpdGVFcnJvcihjYWxsYmFjaywgd3JpdGVSZXN1bHQpIHtcbiAgICAgICAgaWYgKHRoaXMucy5iYXRjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5oYW5kbGVXcml0ZUVycm9yKGNhbGxiYWNrLCB3cml0ZVJlc3VsdCk7XG4gICAgfVxuICAgIGFkZFRvT3BlcmF0aW9uc0xpc3QoYmF0Y2hUeXBlLCBkb2N1bWVudCkge1xuICAgICAgICAvLyBHZXQgdGhlIGJzb25TaXplXG4gICAgICAgIGNvbnN0IGJzb25TaXplID0gQlNPTi5jYWxjdWxhdGVPYmplY3RTaXplKGRvY3VtZW50LCB7XG4gICAgICAgICAgICBjaGVja0tleXM6IGZhbHNlLFxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSB1c2VyIHNlbGVjdGVkIGZvciBCU09OIG9wdGlvbnMgaGVyZSxcbiAgICAgICAgICAgIC8vIGVyciBvbiB0aGUgc2FmZSBzaWRlLCBhbmQgY2hlY2sgdGhlIHNpemUgd2l0aCBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlLlxuICAgICAgICAgICAgaWdub3JlVW5kZWZpbmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgaWYgdGhlIGRvYyBpcyBiaWdnZXIgdGhhbiB0aGUgbWF4IEJTT04gc2l6ZVxuICAgICAgICBpZiAoYnNvblNpemUgPj0gdGhpcy5zLm1heEJzb25PYmplY3RTaXplKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IENoYW5nZSB0aGlzIHRvIE1vbmdvQlNPTkVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBEb2N1bWVudCBpcyBsYXJnZXIgdGhhbiB0aGUgbWF4aW11bSBzaXplICR7dGhpcy5zLm1heEJzb25PYmplY3RTaXplfWApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhvbGRzIHRoZSBjdXJyZW50IGJhdGNoXG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIEdldCB0aGUgcmlnaHQgdHlwZSBvZiBiYXRjaFxuICAgICAgICBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuSU5TRVJUKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gdGhpcy5zLmN1cnJlbnRJbnNlcnRCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5VUERBVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSB0aGlzLnMuY3VycmVudFVwZGF0ZUJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLkRFTEVURSkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IHRoaXMucy5jdXJyZW50UmVtb3ZlQmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF4S2V5U2l6ZSA9IHRoaXMucy5tYXhLZXlTaXplO1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2ggb2JqZWN0IGlmIHdlIGRvbid0IGhhdmUgYSBjdXJyZW50IG9uZVxuICAgICAgICBpZiAodGhpcy5zLmN1cnJlbnRCYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgd2UgZXhjZWVkIHRoZSBtYXggYmF0Y2ggb3Agc2l6ZVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLnNpemUgKyAxID49IHRoaXMucy5tYXhXcml0ZUJhdGNoU2l6ZSB8fFxuICAgICAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHdlIGV4Y2VlZCB0aGUgbWF4QmF0Y2hTaXplQnl0ZXMuIE9ubHkgbWF0dGVycyBpZiBiYXRjaCBhbHJlYWR5IGhhcyBhIGRvYyxcbiAgICAgICAgICAgIC8vIHNpbmNlIHdlIGNhbid0IHNlbnQgYW4gZW1wdHkgYmF0Y2hcbiAgICAgICAgICAgICh0aGlzLnMuY3VycmVudEJhdGNoLnNpemUgPiAwICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplQnl0ZXMgKyBtYXhLZXlTaXplICsgYnNvblNpemUgPj0gdGhpcy5zLm1heEJhdGNoU2l6ZUJ5dGVzKSB8fFxuICAgICAgICAgICAgLy8gTmV3IGJhdGNoIGlmIHRoZSBuZXcgb3AgZG9lcyBub3QgaGF2ZSB0aGUgc2FtZSBvcCB0eXBlIGFzIHRoZSBjdXJyZW50IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLmJhdGNoVHlwZSAhPT0gYmF0Y2hUeXBlKSB7XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBiYXRjaCB0byB0aGUgZXhlY3V0aW9uIHN0YWNrXG4gICAgICAgICAgICB0aGlzLnMuYmF0Y2hlcy5wdXNoKHRoaXMucy5jdXJyZW50QmF0Y2gpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJhdGNoXG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgaGF2ZSBhbiBhcnJheSBvZiBkb2N1bWVudHNcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdPcGVyYXRpb24gcGFzc2VkIGluIGNhbm5vdCBiZSBhbiBBcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2gub3BlcmF0aW9ucy5wdXNoKGRvY3VtZW50KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5vcmlnaW5hbEluZGV4ZXMucHVzaCh0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRJbmRleCA9IHRoaXMucy5jdXJyZW50SW5kZXggKyAxO1xuICAgICAgICAvLyBTYXZlIGJhY2sgdGhlIGN1cnJlbnQgQmF0Y2ggdG8gdGhlIHJpZ2h0IHR5cGVcbiAgICAgICAgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLklOU0VSVCkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRJbnNlcnRCYXRjaCA9IHRoaXMucy5jdXJyZW50QmF0Y2g7XG4gICAgICAgICAgICB0aGlzLnMuYnVsa1Jlc3VsdC5pbnNlcnRlZElkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5zLmJ1bGtSZXN1bHQuaW5zZXJ0ZWRJZHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIF9pZDogZG9jdW1lbnQuX2lkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5VUERBVEUpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50VXBkYXRlQmF0Y2ggPSB0aGlzLnMuY3VycmVudEJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLkRFTEVURSkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRSZW1vdmVCYXRjaCA9IHRoaXMucy5jdXJyZW50QmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIGN1cnJlbnQgYmF0Y2ggc2l6ZVxuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLnNpemUgKz0gMTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5zaXplQnl0ZXMgKz0gbWF4S2V5U2l6ZSArIGJzb25TaXplO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlVub3JkZXJlZEJ1bGtPcGVyYXRpb24gPSBVbm9yZGVyZWRCdWxrT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5vcmRlcmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/change_stream.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/change_stream.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStream = void 0;\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch {\n                // we're not concerned with errors from close()\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */\n    async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this[kMode] === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this[kMode] = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this[kMode] === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().catch(() => null);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on('error', error => this._processErrorStreamMode(error));\n    }\n    /** @internal */\n    _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed])\n            return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(() => null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, { operationName: 'reconnect topology in change stream' }, serverSelectionError => {\n                if (serverSelectionError)\n                    return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            }\n            catch {\n                // ignore errors from close\n            }\n            throw changeStreamError;\n        }\n        await this.cursor.close().catch(() => null);\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServerAsync(this.cursor.readPreference, {\n                operationName: 'reconnect topology in change stream'\n            });\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream;\n//# sourceMappingURL=change_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/change_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ../mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst mongocryptd_manager_1 = __webpack_require__(/*! ./mongocryptd_manager */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nconst kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nconst kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */\nclass AutoEncrypter {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */\n    constructor(client, options) {\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */\n        this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        const mongoCryptOptions = {\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap)\n                ? options.schemaMap\n                : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap)\n                ? options.encryptedFieldsMap\n                : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders)\n            ? (0, bson_1.serialize)(this._kmsProviders)\n            : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        }\n        else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = ['$SYSTEM'];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions &&\n            options.extraOptions.cryptSharedLibRequired &&\n            !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError('`cryptSharedLibRequired` set but no crypt_shared library loaded');\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') {\n                clientOptions.family = 4;\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */\n    async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        }\n        catch (error) {\n            const { message } = error;\n            if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n                throw new error_1.MongoRuntimeError('Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn', { cause: error });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */\n    async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */\n    async encrypt(ns, cmd, options = {}) {\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        return stateMachine.execute(this, context);\n    }\n    /**\n     * Decrypt a command response\n     */\n    async decrypt(response, options = {}) {\n        const buffer = Buffer.isBuffer(response) ? response : (0, bson_1.serialize)(response, options);\n        const context = this._mongocrypt.makeDecryptionContext(buffer);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const decorateResult = this[kDecorateResult];\n        const result = await stateMachine.execute(this, context);\n        if (decorateResult) {\n            decorateDecryptionResult(result, response);\n        }\n        return result;\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */\n    get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = kDecorateResult;\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n        }\n    }\n    if (!decrypted || typeof decrypted !== 'object')\n        return;\n    for (const k of Object.keys(decrypted)) {\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n            if (!decrypted[kDecoratedKeys]) {\n                Object.defineProperty(decrypted, kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[kDecoratedKeys].push(k);\n            // Do not recurse into this decrypted value. It could be a sub-document/array,\n            // in which case there is no original value associated with its subfields.\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n}\n//# sourceMappingURL=auto_encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/client_encryption.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientEncryption = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst index_1 = __webpack_require__(/*! ./providers/index */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client, options) {\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n                ? (0, bson_1.serialize)(this._kmsProviders)\n                : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n                if (typeof keyAltName !== 'string') {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({ keyAltName });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({ keyMaterial: options.keyMaterial });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const dataKey = await stateMachine.execute(this, context);\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .insertOne(dataKey, { writeConcern: { w: 'majority' } });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v: dataKeys } = await stateMachine.execute(this, context);\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key) => ({\n            updateOne: {\n                filter: { _id: key._id },\n                update: {\n                    $set: {\n                        masterKey: key.masterKey,\n                        keyMaterial: key.keyMaterial\n                    },\n                    $currentDate: {\n                        updateDate: true\n                    }\n                }\n            }\n        }));\n        const result = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .bulkWrite(replacements, {\n            writeConcern: { w: 'majority' }\n        });\n        return { bulkWriteResult: result };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .deleteOne({ _id }, { writeConcern: { w: 'majority' } });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .find({}, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ _id }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before' });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: ['$keyAltNames', [keyAltName]]\n                            },\n                            '$$REMOVE',\n                            {\n                                $filter: {\n                                    input: '$keyAltNames',\n                                    cond: {\n                                        $ne: ['$$this', keyAltName]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, pipeline, {\n            writeConcern: { w: 'majority' },\n            returnDocument: 'before'\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field) => field == null || typeof field !== 'object' || field.keyId != null\n                ? field\n                : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, { masterKey })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result) => result.status === 'rejected');\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields\n            });\n            return { collection, encryptedFields };\n        }\n        catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    async encrypt(value, options) {\n        return this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n     *\n     * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    async encryptExpression(expression, options) {\n        return this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v } = await stateMachine.execute(this, context);\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== 'string') {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({ keyAltName });\n        }\n        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === 'string') {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === 'object') {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const result = await stateMachine.execute(this, context);\n        return result.v;\n    }\n}\nexports.ClientEncryption = ClientEncryption;\n//# sourceMappingURL=client_encryption.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = exports.signRsaSha256Hook = exports.makeHmacHook = exports.sha256Hook = exports.randomHook = exports.makeAES256Hook = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function (key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([result, final]);\n            }\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeAES256Hook = makeAES256Hook;\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    }\n    catch (e) {\n        return e;\n    }\n    return count;\n}\nexports.randomHook = randomHook;\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash('sha256').update(input).digest();\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.sha256Hook = sha256Hook;\nfunction makeHmacHook(algorithm) {\n    return (key, input, output) => {\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeHmacHook = makeHmacHook;\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign('sha256WithRSAEncryption');\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.signRsaSha256Hook = signRsaSha256Hook;\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');\n//# sourceMappingURL=crypto_callbacks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9jcnlwdG9fY2FsbGJhY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLHNCQUFzQixHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLDRCQUE0QixHQUFHLHlCQUF5QixHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLHNCQUFzQjtBQUNqUyxlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsdUJBQXVCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2NyeXB0b19jYWxsYmFja3MuanM/NjdiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaG1hY1NoYTI1Nkhvb2sgPSBleHBvcnRzLmhtYWNTaGE1MTJIb29rID0gZXhwb3J0cy5hZXMyNTZDdHJEZWNyeXB0SG9vayA9IGV4cG9ydHMuYWVzMjU2Q3RyRW5jcnlwdEhvb2sgPSBleHBvcnRzLmFlczI1NkNiY0RlY3J5cHRIb29rID0gZXhwb3J0cy5hZXMyNTZDYmNFbmNyeXB0SG9vayA9IGV4cG9ydHMuc2lnblJzYVNoYTI1Nkhvb2sgPSBleHBvcnRzLm1ha2VIbWFjSG9vayA9IGV4cG9ydHMuc2hhMjU2SG9vayA9IGV4cG9ydHMucmFuZG9tSG9vayA9IGV4cG9ydHMubWFrZUFFUzI1Nkhvb2sgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuZnVuY3Rpb24gbWFrZUFFUzI1Nkhvb2sobWV0aG9kLCBtb2RlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIGl2LCBpbnB1dCwgb3V0cHV0KSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG9bbWV0aG9kXShtb2RlLCBrZXksIGl2KTtcbiAgICAgICAgICAgIGNpcGhlci5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG4gICAgICAgICAgICByZXN1bHQgPSBjaXBoZXIudXBkYXRlKGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsID0gY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgICAgICBpZiAoZmluYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoW3Jlc3VsdCwgZmluYWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZUFFUzI1Nkhvb2sgPSBtYWtlQUVTMjU2SG9vaztcbmZ1bmN0aW9uIHJhbmRvbUhvb2soYnVmZmVyLCBjb3VudCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhidWZmZXIsIDAsIGNvdW50KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn1cbmV4cG9ydHMucmFuZG9tSG9vayA9IHJhbmRvbUhvb2s7XG5mdW5jdGlvbiBzaGEyNTZIb29rKGlucHV0LCBvdXRwdXQpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbn1cbmV4cG9ydHMuc2hhMjU2SG9vayA9IHNoYTI1Nkhvb2s7XG5mdW5jdGlvbiBtYWtlSG1hY0hvb2soYWxnb3JpdGhtKSB7XG4gICAgcmV0dXJuIChrZXksIGlucHV0LCBvdXRwdXQpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIbWFjKGFsZ29yaXRobSwga2V5KS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlSG1hY0hvb2sgPSBtYWtlSG1hY0hvb2s7XG5mdW5jdGlvbiBzaWduUnNhU2hhMjU2SG9vayhrZXksIGlucHV0LCBvdXRwdXQpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKCdzaGEyNTZXaXRoUlNBRW5jcnlwdGlvbicpO1xuICAgICAgICBjb25zdCBwcml2YXRlS2V5ID0gQnVmZmVyLmZyb20oYC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbiR7a2V5LnRvU3RyaW5nKCdiYXNlNjQnKX1cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXFxuYCk7XG4gICAgICAgIHJlc3VsdCA9IHNpZ25lci51cGRhdGUoaW5wdXQpLmVuZCgpLnNpZ24ocHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xufVxuZXhwb3J0cy5zaWduUnNhU2hhMjU2SG9vayA9IHNpZ25Sc2FTaGEyNTZIb29rO1xuZXhwb3J0cy5hZXMyNTZDYmNFbmNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVDaXBoZXJpdicsICdhZXMtMjU2LWNiYycpO1xuZXhwb3J0cy5hZXMyNTZDYmNEZWNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVEZWNpcGhlcml2JywgJ2Flcy0yNTYtY2JjJyk7XG5leHBvcnRzLmFlczI1NkN0ckVuY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZUNpcGhlcml2JywgJ2Flcy0yNTYtY3RyJyk7XG5leHBvcnRzLmFlczI1NkN0ckRlY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZURlY2lwaGVyaXYnLCAnYWVzLTI1Ni1jdHInKTtcbmV4cG9ydHMuaG1hY1NoYTUxMkhvb2sgPSBtYWtlSG1hY0hvb2soJ3NoYTUxMicpO1xuZXhwb3J0cy5obWFjU2hhMjU2SG9vayA9IG1ha2VIbWFjSG9vaygnc2hhMjU2Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG9fY2FsbGJhY2tzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/errors.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoCryptError';\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nclass MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCryptInvalidArgumentError';\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nclass MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to complete creating data keys: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateDataKeyError';\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nclass MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to create collection: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateEncryptedCollectionError';\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nclass MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, body) {\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return 'MongoCryptAzureKMSRequestError';\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */\nclass MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return 'MongoCryptKMSRequestNetworkTimeoutError';\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0NBQStDLEdBQUcsc0NBQXNDLEdBQUcsZ0RBQWdELEdBQUcsb0NBQW9DLEdBQUcsc0NBQXNDLEdBQUcsdUJBQXVCO0FBQ3JQLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQyx3REFBd0QsY0FBYyxLQUFLLE9BQU87QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUMsOENBQThDLGNBQWMsS0FBSyxPQUFPO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9lcnJvcnMuanM/MjY3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yID0gZXhwb3J0cy5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdEVycm9yID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IHNvbWV0aGluZyB3ZW50IHdyb25nIHNwZWNpZmljYWxseSB3aXRoIE1vbmdvREIgQ2xpZW50IEVuY3J5cHRpb25cbiAqL1xuY2xhc3MgTW9uZ29DcnlwdEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb0Vycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEVycm9yID0gTW9uZ29DcnlwdEVycm9yO1xuLyoqXG4gKiBAcHVibGljXG4gKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyBhbiBpbnZhbGlkIGFyZ3VtZW50IHdhcyBwcm92aWRlZCB0byBhbiBlbmNyeXB0aW9uIEFQSS5cbiAqL1xuY2xhc3MgTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvciA9IE1vbmdvQ3J5cHRJbnZhbGlkQXJndW1lbnRFcnJvcjtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGBDbGllbnRFbmNyeXB0aW9uLmNyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb24oKWAgZmFpbGVkIHRvIGNyZWF0ZSBkYXRhIGtleXNcbiAqL1xuY2xhc3MgTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKGVuY3J5cHRlZEZpZWxkcywgeyBjYXVzZSB9KSB7XG4gICAgICAgIHN1cGVyKGBVbmFibGUgdG8gY29tcGxldGUgY3JlYXRpbmcgZGF0YSBrZXlzOiAke2NhdXNlLm1lc3NhZ2V9YCwgeyBjYXVzZSB9KTtcbiAgICAgICAgdGhpcy5lbmNyeXB0ZWRGaWVsZHMgPSBlbmNyeXB0ZWRGaWVsZHM7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvciA9IE1vbmdvQ3J5cHRDcmVhdGVEYXRhS2V5RXJyb3I7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgdGhhdCBgQ2xpZW50RW5jcnlwdGlvbi5jcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uKClgIGZhaWxlZCB0byBjcmVhdGUgYSBjb2xsZWN0aW9uXG4gKi9cbmNsYXNzIE1vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihlbmNyeXB0ZWRGaWVsZHMsIHsgY2F1c2UgfSkge1xuICAgICAgICBzdXBlcihgVW5hYmxlIHRvIGNyZWF0ZSBjb2xsZWN0aW9uOiAke2NhdXNlLm1lc3NhZ2V9YCwgeyBjYXVzZSB9KTtcbiAgICAgICAgdGhpcy5lbmNyeXB0ZWRGaWVsZHMgPSBlbmNyeXB0ZWRGaWVsZHM7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvciA9IE1vbmdvQ3J5cHRDcmVhdGVFbmNyeXB0ZWRDb2xsZWN0aW9uRXJyb3I7XG4vKipcbiAqIEBwdWJsaWNcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgdGhhdCBtb25nb2RiLWNsaWVudC1lbmNyeXB0aW9uIGZhaWxlZCB0byBhdXRvLXJlZnJlc2ggQXp1cmUgS01TIGNyZWRlbnRpYWxzLlxuICovXG5jbGFzcyBNb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBib2R5KSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yID0gTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIE1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvciA9IE1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongocryptdManager = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n    constructor(extraOptions = {}) {\n        this.uri =\n            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\n                ? extraOptions.mongocryptdURI\n                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\n        this.spawnArgs = [];\n        if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs\n            .filter(arg => typeof arg === 'string')\n            .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */\n    async spawn() {\n        const cmdName = this.spawnPath || 'mongocryptd';\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: 'ignore',\n            detached: true\n        });\n        this._child.on('error', () => {\n            // From the FLE spec:\n            // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n            // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n            // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n            // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n            // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n            // connect after spawning, the server selection error is propagated to the user.\"\n            // The AutoEncrypter and MongoCryptdManager should work together to spawn\n            // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n            // shuts down after 60s and gets respawned when necessary.  We rely on server\n            // selection timeouts when connecting to the `mongocryptd` to inform users that something\n            // has been configured incorrectly.  For those reasons, we suppress stderr from\n            // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */\n    async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        }\n        catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\nexports.MongocryptdManager = MongocryptdManager;\n//# sourceMappingURL=mongocryptd_manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9tb25nb2NyeXB0ZF9tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUSxFQUFFLG1CQUFPLENBQUMsb0NBQWU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vbW9uZ29jcnlwdGRfbWFuYWdlci5qcz8yZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb2NyeXB0ZE1hbmFnZXIgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEFuIGludGVybmFsIGNsYXNzIHRoYXQgaGFuZGxlcyBzcGF3bmluZyBhIG1vbmdvY3J5cHRkLlxuICovXG5jbGFzcyBNb25nb2NyeXB0ZE1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKGV4dHJhT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMudXJpID1cbiAgICAgICAgICAgIHR5cGVvZiBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRVUkkgPT09ICdzdHJpbmcnICYmIGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFVSSS5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRVUklcbiAgICAgICAgICAgICAgICA6IE1vbmdvY3J5cHRkTWFuYWdlci5ERUZBVUxUX01PTkdPQ1JZUFREX1VSSTtcbiAgICAgICAgdGhpcy5ieXBhc3NTcGF3biA9ICEhZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkQnlwYXNzU3Bhd247XG4gICAgICAgIHRoaXMuc3Bhd25QYXRoID0gZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkU3Bhd25QYXRoIHx8ICcnO1xuICAgICAgICB0aGlzLnNwYXduQXJncyA9IFtdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3bkFyZ3MpKSB7XG4gICAgICAgICAgICB0aGlzLnNwYXduQXJncyA9IHRoaXMuc3Bhd25BcmdzLmNvbmNhdChleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3bkFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNwYXduQXJnc1xuICAgICAgICAgICAgLmZpbHRlcihhcmcgPT4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAuZXZlcnkoYXJnID0+IGFyZy5pbmRleE9mKCctLWlkbGVTaHV0ZG93blRpbWVvdXRTZWNzJykgPCAwKSkge1xuICAgICAgICAgICAgdGhpcy5zcGF3bkFyZ3MucHVzaCgnLS1pZGxlU2h1dGRvd25UaW1lb3V0U2VjcycsICc2MCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdpbGwgY2hlY2sgdG8gc2VlIGlmIGEgbW9uZ29jcnlwdGQgaXMgdXAuIElmIGl0IGlzIG5vdCB1cCwgaXQgd2lsbCBhdHRlbXB0XG4gICAgICogdG8gc3Bhd24gYSBtb25nb2NyeXB0ZCBpbiBhIGRldGFjaGVkIHByb2Nlc3MsIGFuZCB0aGVuIHdhaXQgZm9yIGl0IHRvIGJlIHVwLlxuICAgICAqL1xuICAgIGFzeW5jIHNwYXduKCkge1xuICAgICAgICBjb25zdCBjbWROYW1lID0gdGhpcy5zcGF3blBhdGggfHwgJ21vbmdvY3J5cHRkJztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICAgICAgY29uc3QgeyBzcGF3biB9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuICAgICAgICAvLyBTcGF3bmVkIHdpdGggc3RkaW86IGlnbm9yZSBhbmQgZGV0YWNoZWQ6IHRydWVcbiAgICAgICAgLy8gdG8gZW5zdXJlIGNoaWxkIGNhbiBvdXRsaXZlIHBhcmVudC5cbiAgICAgICAgdGhpcy5fY2hpbGQgPSBzcGF3bihjbWROYW1lLCB0aGlzLnNwYXduQXJncywge1xuICAgICAgICAgICAgc3RkaW86ICdpZ25vcmUnLFxuICAgICAgICAgICAgZGV0YWNoZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2NoaWxkLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEZyb20gdGhlIEZMRSBzcGVjOlxuICAgICAgICAgICAgLy8gXCJUaGUgc3Rkb3V0IGFuZCBzdGRlcnIgb2YgdGhlIHNwYXduZWQgcHJvY2VzcyBNVVNUIG5vdCBiZSBleHBvc2VkIGluIHRoZSBkcml2ZXJcbiAgICAgICAgICAgIC8vIChlLmcuIHJlZGlyZWN0IHRvIC9kZXYvbnVsbCkuIFVzZXJzIGNhbiBwYXNzIHRoZSBhcmd1bWVudCAtLWxvZ3BhdGggdG9cbiAgICAgICAgICAgIC8vIGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFNwYXduQXJncyBpZiB0aGV5IG5lZWQgdG8gaW5zcGVjdCBtb25nb2NyeXB0ZCBsb2dzLlxuICAgICAgICAgICAgLy8gSWYgc3Bhd25pbmcgaXMgbmVjZXNzYXJ5LCB0aGUgZHJpdmVyIE1VU1Qgc3Bhd24gbW9uZ29jcnlwdGQgd2hlbmV2ZXIgc2VydmVyXG4gICAgICAgICAgICAvLyBzZWxlY3Rpb24gb24gdGhlIE1vbmdvQ2xpZW50IHRvIG1vbmdvY3J5cHRkIGZhaWxzLiBJZiB0aGUgTW9uZ29DbGllbnQgZmFpbHMgdG9cbiAgICAgICAgICAgIC8vIGNvbm5lY3QgYWZ0ZXIgc3Bhd25pbmcsIHRoZSBzZXJ2ZXIgc2VsZWN0aW9uIGVycm9yIGlzIHByb3BhZ2F0ZWQgdG8gdGhlIHVzZXIuXCJcbiAgICAgICAgICAgIC8vIFRoZSBBdXRvRW5jcnlwdGVyIGFuZCBNb25nb0NyeXB0ZE1hbmFnZXIgc2hvdWxkIHdvcmsgdG9nZXRoZXIgdG8gc3Bhd25cbiAgICAgICAgICAgIC8vIG1vbmdvY3J5cHRkIHdoZW5ldmVyIG5lY2Vzc2FyeS4gIEFkZGl0aW9uYWxseSwgdGhlIGBtb25nb2NyeXB0ZGAgaW50ZW50aW9uYWxseVxuICAgICAgICAgICAgLy8gc2h1dHMgZG93biBhZnRlciA2MHMgYW5kIGdldHMgcmVzcGF3bmVkIHdoZW4gbmVjZXNzYXJ5LiAgV2UgcmVseSBvbiBzZXJ2ZXJcbiAgICAgICAgICAgIC8vIHNlbGVjdGlvbiB0aW1lb3V0cyB3aGVuIGNvbm5lY3RpbmcgdG8gdGhlIGBtb25nb2NyeXB0ZGAgdG8gaW5mb3JtIHVzZXJzIHRoYXQgc29tZXRoaW5nXG4gICAgICAgICAgICAvLyBoYXMgYmVlbiBjb25maWd1cmVkIGluY29ycmVjdGx5LiAgRm9yIHRob3NlIHJlYXNvbnMsIHdlIHN1cHByZXNzIHN0ZGVyciBmcm9tXG4gICAgICAgICAgICAvLyB0aGUgYG1vbmdvY3J5cHRkYCBwcm9jZXNzIGFuZCBpbW1lZGlhdGVseSB1bnJlZiB0aGUgcHJvY2Vzcy5cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHVucmVmIGNoaWxkIHRvIHJlbW92ZSBoYW5kbGUgZnJvbSBldmVudCBsb29wXG4gICAgICAgIHRoaXMuX2NoaWxkLnVucmVmKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZuYCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAgICovXG4gICAgYXN5bmMgd2l0aFJlc3Bhd24oZm4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZuKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBub3QgYnlwYXNzaW5nIHNwYXduaW5nLCB0aGVuIHdlIHNob3VsZCByZXRyeSBvbmNlIG9uIGEgTW9uZ29UaW1lb3V0RXJyb3IgKHNlcnZlciBzZWxlY3Rpb24gZXJyb3IpXG4gICAgICAgICAgICBjb25zdCBzaG91bGRTcGF3biA9IGVyciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29OZXR3b3JrVGltZW91dEVycm9yICYmICF0aGlzLmJ5cGFzc1NwYXduO1xuICAgICAgICAgICAgaWYgKCFzaG91bGRTcGF3bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnNwYXduKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZuKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuTW9uZ29jcnlwdGRNYW5hZ2VyLkRFRkFVTFRfTU9OR09DUllQVERfVVJJID0gJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMjAnO1xuZXhwb3J0cy5Nb25nb2NyeXB0ZE1hbmFnZXIgPSBNb25nb2NyeXB0ZE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb2NyeXB0ZF9tYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/aws.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAWSCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/**\n * @internal\n */\nasync function loadAWSCredentials(kmsProviders) {\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n    if ('kModuleError' in credentialProvider) {\n        return kmsProviders;\n    }\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    // The state machine is the only place calling this so it will\n    // catch if there is a rejection here.\n    const aws = await provider();\n    return { ...kmsProviders, aws };\n}\nexports.loadAWSCredentials = loadAWSCredentials;\n//# sourceMappingURL=aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXdzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixlQUFlLG1CQUFPLENBQUMsNERBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXdzLmpzPzhmZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRBV1NDcmVkZW50aWFscyA9IHZvaWQgMDtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kZXBzXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZEFXU0NyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IGNyZWRlbnRpYWxQcm92aWRlciA9ICgwLCBkZXBzXzEuZ2V0QXdzQ3JlZGVudGlhbFByb3ZpZGVyKSgpO1xuICAgIGlmICgna01vZHVsZUVycm9yJyBpbiBjcmVkZW50aWFsUHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIGttc1Byb3ZpZGVycztcbiAgICB9XG4gICAgY29uc3QgeyBmcm9tTm9kZVByb3ZpZGVyQ2hhaW4gfSA9IGNyZWRlbnRpYWxQcm92aWRlcjtcbiAgICBjb25zdCBwcm92aWRlciA9IGZyb21Ob2RlUHJvdmlkZXJDaGFpbigpO1xuICAgIC8vIFRoZSBzdGF0ZSBtYWNoaW5lIGlzIHRoZSBvbmx5IHBsYWNlIGNhbGxpbmcgdGhpcyBzbyBpdCB3aWxsXG4gICAgLy8gY2F0Y2ggaWYgdGhlcmUgaXMgYSByZWplY3Rpb24gaGVyZS5cbiAgICBjb25zdCBhd3MgPSBhd2FpdCBwcm92aWRlcigpO1xuICAgIHJldHVybiB7IC4uLmttc1Byb3ZpZGVycywgYXdzIH07XG59XG5leHBvcnRzLmxvYWRBV1NDcmVkZW50aWFscyA9IGxvYWRBV1NDcmVkZW50aWFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF3cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/azure.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAzureCredentials = exports.fetchAzureKMSToken = exports.prepareRequest = exports.tokenCache = exports.AzureCredentialCache = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/**\n * @internal\n */\nclass AzureCredentialCache {\n    constructor() {\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return { accessToken: this.cachedToken.accessToken };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */\n    resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */\n    _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */\nexports.tokenCache = new AzureCredentialCache();\n/** @internal */\nasync function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (() => {\n        try {\n            return JSON.parse(rawBody);\n        }\n        catch {\n            throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */\nfunction prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? 'http://169.254.169.254/metadata/identity/oauth2/token');\n    url.searchParams.append('api-version', '2018-02-01');\n    url.searchParams.append('resource', 'https://vault.azure.net');\n    const headers = { ...options.headers, 'Content-Type': 'application/json', Metadata: true };\n    return { headers, url };\n}\nexports.prepareRequest = prepareRequest;\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */\nasync function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    const response = await (0, utils_1.get)(url, { headers }).catch(error => {\n        if (error instanceof errors_1.MongoCryptKMSRequestNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    });\n    return parseResponse(response);\n}\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */\nasync function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return { ...kmsProviders, azure };\n}\nexports.loadAzureCredentials = loadAzureCredentials;\n//# sourceMappingURL=azure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXp1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsMEJBQTBCLEdBQUcsc0JBQXNCLEdBQUcsa0JBQWtCLEdBQUcsNEJBQTRCO0FBQ3RJLGlCQUFpQixtQkFBTyxDQUFDLG9GQUFXO0FBQ3BDLGdCQUFnQixtQkFBTyxDQUFDLDJGQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLGFBQWE7QUFDYjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QyxZQUFZLGVBQWU7QUFDM0IsbURBQW1ELFNBQVM7QUFDNUQ7QUFDQSw2RUFBNkUsY0FBYztBQUMzRjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9henVyZS5qcz82NGRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkQXp1cmVDcmVkZW50aWFscyA9IGV4cG9ydHMuZmV0Y2hBenVyZUtNU1Rva2VuID0gZXhwb3J0cy5wcmVwYXJlUmVxdWVzdCA9IGV4cG9ydHMudG9rZW5DYWNoZSA9IGV4cG9ydHMuQXp1cmVDcmVkZW50aWFsQ2FjaGUgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBNSU5JTVVNX1RPS0VOX1JFRlJFU0hfSU5fTUlMTElTRUNPTkRTID0gNjAwMDtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF6dXJlQ3JlZGVudGlhbENhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jYWNoZWRUb2tlbiA9IG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGdldFRva2VuKCkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZWRUb2tlbiA9PSBudWxsIHx8IHRoaXMubmVlZHNSZWZyZXNoKHRoaXMuY2FjaGVkVG9rZW4pKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlZFRva2VuID0gYXdhaXQgdGhpcy5fZ2V0VG9rZW4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBhY2Nlc3NUb2tlbjogdGhpcy5jYWNoZWRUb2tlbi5hY2Nlc3NUb2tlbiB9O1xuICAgIH1cbiAgICBuZWVkc1JlZnJlc2godG9rZW4pIHtcbiAgICAgICAgY29uc3QgdGltZVVudGlsRXhwaXJhdGlvbk1TID0gdG9rZW4uZXhwaXJlc09uVGltZXN0YW1wIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIHRpbWVVbnRpbEV4cGlyYXRpb25NUyA8PSBNSU5JTVVNX1RPS0VOX1JFRlJFU0hfSU5fTUlMTElTRUNPTkRTO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBleHBvc2VkIGZvciB0ZXN0aW5nXG4gICAgICovXG4gICAgcmVzZXRDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5jYWNoZWRUb2tlbiA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGV4cG9zZWQgZm9yIHRlc3RpbmdcbiAgICAgKi9cbiAgICBfZ2V0VG9rZW4oKSB7XG4gICAgICAgIHJldHVybiBmZXRjaEF6dXJlS01TVG9rZW4oKTtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlQ3JlZGVudGlhbENhY2hlID0gQXp1cmVDcmVkZW50aWFsQ2FjaGU7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLnRva2VuQ2FjaGUgPSBuZXcgQXp1cmVDcmVkZW50aWFsQ2FjaGUoKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmFzeW5jIGZ1bmN0aW9uIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICBjb25zdCB7IHN0YXR1cywgYm9keTogcmF3Qm9keSB9ID0gcmVzcG9uc2U7XG4gICAgY29uc3QgYm9keSA9ICgoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyYXdCb2R5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yKCdNYWxmb3JtZWQgSlNPTiBib2R5IGluIEdFVCByZXF1ZXN0LicpO1xuICAgICAgICB9XG4gICAgfSkoKTtcbiAgICBpZiAoc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcignVW5hYmxlIHRvIGNvbXBsZXRlIHJlcXVlc3QuJywgYm9keSk7XG4gICAgfVxuICAgIGlmICghYm9keS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcignTWFsZm9ybWVkIHJlc3BvbnNlIGJvZHkgLSBtaXNzaW5nIGZpZWxkIGBhY2Nlc3NfdG9rZW5gLicpO1xuICAgIH1cbiAgICBpZiAoIWJvZHkuZXhwaXJlc19pbikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yKCdNYWxmb3JtZWQgcmVzcG9uc2UgYm9keSAtIG1pc3NpbmcgZmllbGQgYGV4cGlyZXNfaW5gLicpO1xuICAgIH1cbiAgICBjb25zdCBleHBpcmVzSW5NUyA9IE51bWJlcihib2R5LmV4cGlyZXNfaW4pICogMTAwMDtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGV4cGlyZXNJbk1TKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yKCdNYWxmb3JtZWQgcmVzcG9uc2UgYm9keSAtIHVuYWJsZSB0byBwYXJzZSBpbnQgZnJvbSBgZXhwaXJlc19pbmAgZmllbGQuJyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFjY2Vzc1Rva2VuOiBib2R5LmFjY2Vzc190b2tlbixcbiAgICAgICAgZXhwaXJlc09uVGltZXN0YW1wOiBEYXRlLm5vdygpICsgZXhwaXJlc0luTVNcbiAgICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBwYXJzZXMgYW55IG9wdGlvbnMgcHJvdmlkZWQgYnkgcHJvc2UgdGVzdHMgdG8gYGZldGNoQXp1cmVLTVNUb2tlbmAgYW5kIG1lcmdlcyB0aGVtIHdpdGhcbiAqIHRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgaGVhZGVycyBhbmQgdGhlIHJlcXVlc3QgdXJsLlxuICovXG5mdW5jdGlvbiBwcmVwYXJlUmVxdWVzdChvcHRpb25zKSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChvcHRpb25zLnVybD8udG9TdHJpbmcoKSA/PyAnaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9tZXRhZGF0YS9pZGVudGl0eS9vYXV0aDIvdG9rZW4nKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnYXBpLXZlcnNpb24nLCAnMjAxOC0wMi0wMScpO1xuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdyZXNvdXJjZScsICdodHRwczovL3ZhdWx0LmF6dXJlLm5ldCcpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7IC4uLm9wdGlvbnMuaGVhZGVycywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywgTWV0YWRhdGE6IHRydWUgfTtcbiAgICByZXR1cm4geyBoZWFkZXJzLCB1cmwgfTtcbn1cbmV4cG9ydHMucHJlcGFyZVJlcXVlc3QgPSBwcmVwYXJlUmVxdWVzdDtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogYEF6dXJlS01TUmVxdWVzdE9wdGlvbnNgIGFsbG93cyBwcm9zZSB0ZXN0cyB0byBtb2RpZnkgdGhlIGh0dHAgcmVxdWVzdCBzZW50IHRvIHRoZSBpZG1zXG4gKiBzZXJ2ZXJzLiAgVGhpcyBpcyByZXF1aXJlZCB0byBzaW11bGF0ZSBkaWZmZXJlbnQgc2VydmVyIGNvbmRpdGlvbnMuICBObyBvcHRpb25zIGFyZSBleHBlY3RlZCB0b1xuICogYmUgc2V0IG91dHNpZGUgb2YgdGVzdHMuXG4gKlxuICogZXhwb3NlZCBmb3IgQ1NGTEVcbiAqIFtwcm9zZSB0ZXN0IDE4XShodHRwczovL2dpdGh1Yi5jb20vbW9uZ29kYi9zcGVjaWZpY2F0aW9ucy90cmVlL21hc3Rlci9zb3VyY2UvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi90ZXN0cyNhenVyZS1pbWRzLWNyZWRlbnRpYWxzKVxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaEF6dXJlS01TVG9rZW4ob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBoZWFkZXJzLCB1cmwgfSA9IHByZXBhcmVSZXF1ZXN0KG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHV0aWxzXzEuZ2V0KSh1cmwsIHsgaGVhZGVycyB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGVycm9yc18xLk1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcihgW0F6dXJlIEtNU10gJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlKTtcbn1cbmV4cG9ydHMuZmV0Y2hBenVyZUtNU1Rva2VuID0gZmV0Y2hBenVyZUtNU1Rva2VuO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBAdGhyb3dzIFdpbGwgcmVqZWN0IHdpdGggYSBgTW9uZ29DcnlwdEVycm9yYCBpZiB0aGUgaHR0cCByZXF1ZXN0IGZhaWxzIG9yIHRoZSBodHRwIHJlc3BvbnNlIGlzIG1hbGZvcm1lZC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZEF6dXJlQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgYXp1cmUgPSBhd2FpdCBleHBvcnRzLnRva2VuQ2FjaGUuZ2V0VG9rZW4oKTtcbiAgICByZXR1cm4geyAuLi5rbXNQcm92aWRlcnMsIGF6dXJlIH07XG59XG5leHBvcnRzLmxvYWRBenVyZUNyZWRlbnRpYWxzID0gbG9hZEF6dXJlQ3JlZGVudGlhbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadGCPCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/** @internal */\nasync function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if ('kModuleError' in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: 'service-accounts/default/token'\n    });\n    return { ...kmsProviders, gcp: { accessToken } };\n}\nexports.loadGCPCredentials = loadGCPCredentials;\n//# sourceMappingURL=gcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvZ2NwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixlQUFlLG1CQUFPLENBQUMsNERBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0QkFBNEI7QUFDeEM7QUFDQSxLQUFLO0FBQ0wsYUFBYSx3QkFBd0I7QUFDckM7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9nY3AuanM/YmQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEdDUENyZWRlbnRpYWxzID0gdm9pZCAwO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4uLy4uL2RlcHNcIik7XG4vKiogQGludGVybmFsICovXG5hc3luYyBmdW5jdGlvbiBsb2FkR0NQQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgZ2NwTWV0YWRhdGEgPSAoMCwgZGVwc18xLmdldEdjcE1ldGFkYXRhKSgpO1xuICAgIGlmICgna01vZHVsZUVycm9yJyBpbiBnY3BNZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4ga21zUHJvdmlkZXJzO1xuICAgIH1cbiAgICBjb25zdCB7IGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4gfSA9IGF3YWl0IGdjcE1ldGFkYXRhLmluc3RhbmNlKHtcbiAgICAgICAgcHJvcGVydHk6ICdzZXJ2aWNlLWFjY291bnRzL2RlZmF1bHQvdG9rZW4nXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgLi4ua21zUHJvdmlkZXJzLCBnY3A6IHsgYWNjZXNzVG9rZW4gfSB9O1xufVxuZXhwb3J0cy5sb2FkR0NQQ3JlZGVudGlhbHMgPSBsb2FkR0NQQ3JlZGVudGlhbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nY3AuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = __webpack_require__(/*! ./aws */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\");\nconst azure_1 = __webpack_require__(/*! ./azure */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst gcp_1 = __webpack_require__(/*! ./gcp */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials('aws', kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('gcp', kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('azure', kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsMEJBQTBCO0FBQzFELGNBQWMsbUJBQU8sQ0FBQyx1RkFBTztBQUM3QixnQkFBZ0IsbUJBQU8sQ0FBQywyRkFBUztBQUNqQyxjQUFjLG1CQUFPLENBQUMsdUZBQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9pbmRleC5qcz83YTY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWZyZXNoS01TQ3JlZGVudGlhbHMgPSBleHBvcnRzLmlzRW1wdHlDcmVkZW50aWFscyA9IHZvaWQgMDtcbmNvbnN0IGF3c18xID0gcmVxdWlyZShcIi4vYXdzXCIpO1xuY29uc3QgYXp1cmVfMSA9IHJlcXVpcmUoXCIuL2F6dXJlXCIpO1xuY29uc3QgZ2NwXzEgPSByZXF1aXJlKFwiLi9nY3BcIik7XG4vKipcbiAqIEF1dG8gY3JlZGVudGlhbCBmZXRjaGluZyBzaG91bGQgb25seSBvY2N1ciB3aGVuIHRoZSBwcm92aWRlciBpcyBkZWZpbmVkIG9uIHRoZSBrbXNQcm92aWRlcnMgbWFwXG4gKiBhbmQgdGhlIHNldHRpbmdzIGFyZSBhbiBlbXB0eSBvYmplY3QuXG4gKlxuICogVGhpcyBpcyBkaXN0aW5jdCBmcm9tIGEgbnVsbGlzaCBwcm92aWRlciBrZXkuXG4gKlxuICogQGludGVybmFsIC0gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5XG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHlDcmVkZW50aWFscyhwcm92aWRlck5hbWUsIGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IHByb3ZpZGVyID0ga21zUHJvdmlkZXJzW3Byb3ZpZGVyTmFtZV07XG4gICAgaWYgKHByb3ZpZGVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHByb3ZpZGVyID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhwcm92aWRlcikubGVuZ3RoID09PSAwO1xufVxuZXhwb3J0cy5pc0VtcHR5Q3JlZGVudGlhbHMgPSBpc0VtcHR5Q3JlZGVudGlhbHM7XG4vKipcbiAqIExvYWQgY2xvdWQgcHJvdmlkZXIgY3JlZGVudGlhbHMgZm9yIHRoZSB1c2VyIHByb3ZpZGVkIEtNUyBwcm92aWRlcnMuXG4gKiBDcmVkZW50aWFscyB3aWxsIG9ubHkgYXR0ZW1wdCB0byBnZXQgbG9hZGVkIGlmIHRoZXkgZG8gbm90IGV4aXN0XG4gKiBhbmQgbm8gZXhpc3RpbmcgY3JlZGVudGlhbHMgd2lsbCBnZXQgb3ZlcndyaXR0ZW4uXG4gKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hLTVNDcmVkZW50aWFscyhrbXNQcm92aWRlcnMpIHtcbiAgICBsZXQgZmluYWxLTVNQcm92aWRlcnMgPSBrbXNQcm92aWRlcnM7XG4gICAgaWYgKGlzRW1wdHlDcmVkZW50aWFscygnYXdzJywga21zUHJvdmlkZXJzKSkge1xuICAgICAgICBmaW5hbEtNU1Byb3ZpZGVycyA9IGF3YWl0ICgwLCBhd3NfMS5sb2FkQVdTQ3JlZGVudGlhbHMpKGZpbmFsS01TUHJvdmlkZXJzKTtcbiAgICB9XG4gICAgaWYgKGlzRW1wdHlDcmVkZW50aWFscygnZ2NwJywga21zUHJvdmlkZXJzKSkge1xuICAgICAgICBmaW5hbEtNU1Byb3ZpZGVycyA9IGF3YWl0ICgwLCBnY3BfMS5sb2FkR0NQQ3JlZGVudGlhbHMpKGZpbmFsS01TUHJvdmlkZXJzKTtcbiAgICB9XG4gICAgaWYgKGlzRW1wdHlDcmVkZW50aWFscygnYXp1cmUnLCBrbXNQcm92aWRlcnMpKSB7XG4gICAgICAgIGZpbmFsS01TUHJvdmlkZXJzID0gYXdhaXQgKDAsIGF6dXJlXzEubG9hZEF6dXJlQ3JlZGVudGlhbHMpKGZpbmFsS01TUHJvdmlkZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbmFsS01TUHJvdmlkZXJzO1xufVxuZXhwb3J0cy5yZWZyZXNoS01TQ3JlZGVudGlhbHMgPSByZWZyZXNoS01TQ3JlZGVudGlhbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.get = void 0;\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\n/**\n * @internal\n */\nfunction get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable prefer-const */\n        let timeoutId;\n        const request = http\n            .get(url, options, response => {\n            response.setEncoding('utf8');\n            let body = '';\n            response.on('data', chunk => (body += chunk));\n            response.on('end', () => {\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({ status: response.statusCode, body });\n            });\n        })\n            .on('error', error => {\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        })\n            .end();\n        timeoutId = (0, timers_1.setTimeout)(() => {\n            request.destroy(new errors_1.MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nexports.get = get;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUNBQW1DO0FBQzdELGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxXQUFXO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy91dGlscy5qcz82MDQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXQgPSB2b2lkIDA7XG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG5jb25zdCB0aW1lcnNfMSA9IHJlcXVpcmUoXCJ0aW1lcnNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXQodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItY29uc3QgKi9cbiAgICAgICAgbGV0IHRpbWVvdXRJZDtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGh0dHBcbiAgICAgICAgICAgIC5nZXQodXJsLCBvcHRpb25zLCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgICAgICAgIHJlc3BvbnNlLm9uKCdkYXRhJywgY2h1bmsgPT4gKGJvZHkgKz0gY2h1bmspKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNDb2RlLCBib2R5IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGltZW91dElkKTtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZW5kKCk7XG4gICAgICAgIHRpbWVvdXRJZCA9ICgwLCB0aW1lcnNfMS5zZXRUaW1lb3V0KSgoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LmRlc3Ryb3kobmV3IGVycm9yc18xLk1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvcihgcmVxdWVzdCB0aW1lZCBvdXQgYWZ0ZXIgMTAgc2Vjb25kc2ApKTtcbiAgICAgICAgfSwgMTAwMDApO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXQgPSBnZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/state_machine.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StateMachine = void 0;\nconst fs = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],\n    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],\n    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],\n    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],\n    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],\n    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],\n    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],\n    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']\n]);\nconst INSECURE_TLS_OPTIONS = [\n    'tlsInsecure',\n    'tlsAllowInvalidCertificates',\n    'tlsAllowInvalidHostnames',\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    'tlsDisableOCSPEndpointCheck',\n    'tlsDisableCertificateRevocationCheck'\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */\nfunction debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */\nclass StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)) {\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */\n    async execute(executor, context) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        while (context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR) {\n            debug(`[context#${context.id}] ${stateToString.get(context.state) || context.state}`);\n            switch (context.state) {\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: {\n                    const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                    if (!metaDataClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');\n                    }\n                    const collInfo = await this.fetchCollectionInfo(metaDataClient, context.ns, filter);\n                    if (collInfo) {\n                        context.addMongoOperationResponse(collInfo);\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: {\n                    const command = context.nextMongoOperation();\n                    if (!mongocryptdClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');\n                    }\n                    // When we are using the shared library, we don't have a mongocryptd manager.\n                    const markedCommand = mongocryptdManager\n                        ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command))\n                        : await this.markCommand(mongocryptdClient, context.ns, command);\n                    context.addMongoOperationResponse(markedCommand);\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS: {\n                    const filter = context.nextMongoOperation();\n                    const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter);\n                    if (keys.length === 0) {\n                        // This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n                        // guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n                        // nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n                        // we return an error when there are no matching keys.  This error is generated in\n                        // subsequent iterations of the state machine.\n                        // Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n                        // do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n                        // will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n                        // otherwise we'll return `{ v: [] }`.\n                        result = { v: [] };\n                    }\n                    for await (const key of keys) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: {\n                    const kmsProviders = await executor.askForKMSCredentials();\n                    context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS: {\n                    const requests = Array.from(this.requests(context));\n                    await Promise.all(requests);\n                    context.finishKMSRequests();\n                    break;\n                }\n                case MONGOCRYPT_CTX_READY: {\n                    const finalizedContext = context.finalize();\n                    // @ts-expect-error finalize can change the state, check for error\n                    if (context.state === MONGOCRYPT_CTX_ERROR) {\n                        const message = context.status.message || 'Finalization error';\n                        throw new errors_1.MongoCryptError(message);\n                    }\n                    result = (0, bson_1.deserialize)(finalizedContext, this.options);\n                    break;\n                }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${context.state}`);\n            }\n        }\n        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = context.status.message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ??\n                'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */\n    async kmsRequest(request) {\n        const parsedUrl = request.endpoint.split(':');\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const options = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port\n        };\n        const message = request.message;\n        const buffer = new utils_1.BufferPool();\n        const netSocket = new net.Socket();\n        let socket;\n        function destroySockets() {\n            for (const sock of [socket, netSocket]) {\n                if (sock) {\n                    sock.removeAllListeners();\n                    sock.destroy();\n                }\n            }\n        }\n        function ontimeout() {\n            return new errors_1.MongoCryptError('KMS request timed out');\n        }\n        function onerror(cause) {\n            return new errors_1.MongoCryptError('KMS request failed', { cause });\n        }\n        function onclose() {\n            return new errors_1.MongoCryptError('KMS request closed');\n        }\n        const tlsOptions = this.options.tlsOptions;\n        if (tlsOptions) {\n            const kmsProvider = request.kmsProvider;\n            const providerTlsOptions = tlsOptions[kmsProvider];\n            if (providerTlsOptions) {\n                const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                if (error) {\n                    throw error;\n                }\n                try {\n                    await this.setTlsOptions(providerTlsOptions, options);\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n        }\n        const { promise: willConnect, reject: rejectOnNetSocketError, resolve: resolveOnNetSocketConnect } = (0, utils_1.promiseWithResolvers)();\n        netSocket\n            .once('timeout', () => rejectOnNetSocketError(ontimeout()))\n            .once('error', err => rejectOnNetSocketError(onerror(err)))\n            .once('close', () => rejectOnNetSocketError(onclose()))\n            .once('connect', () => resolveOnNetSocketConnect());\n        try {\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                netSocket.connect({\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                });\n                await willConnect;\n                try {\n                    socks ??= loadSocks();\n                    options.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: netSocket,\n                        command: 'connect',\n                        destination: { host: options.host, port: options.port },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: 'iLoveJavaScript',\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                }\n                catch (err) {\n                    throw onerror(err);\n                }\n            }\n            socket = tls.connect(options, () => {\n                socket.write(message);\n            });\n            const { promise: willResolveKmsRequest, reject: rejectOnTlsSocketError, resolve } = (0, utils_1.promiseWithResolvers)();\n            socket\n                .once('timeout', () => rejectOnTlsSocketError(ontimeout()))\n                .once('error', err => rejectOnTlsSocketError(onerror(err)))\n                .once('close', () => rejectOnTlsSocketError(onclose()))\n                .on('data', data => {\n                buffer.append(data);\n                while (request.bytesNeeded > 0 && buffer.length) {\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    resolve();\n                }\n            });\n            await willResolveKmsRequest;\n        }\n        finally {\n            // There's no need for any more activity on this socket at this point.\n            destroySockets();\n        }\n    }\n    *requests(context) {\n        for (let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()) {\n            yield this.kmsRequest(request);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */\n    validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS) {\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */\n    async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */\n    async fetchCollectionInfo(client, ns, filter) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const collections = await client\n            .db(db)\n            .listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false\n        })\n            .toArray();\n        const info = collections.length > 0 ? (0, bson_1.serialize)(collections[0]) : null;\n        return info;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */\n    async markCommand(client, ns, command) {\n        const options = { promoteLongs: false, promoteValues: false };\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const rawCommand = (0, bson_1.deserialize)(command, options);\n        const response = await client.db(db).command(rawCommand, options);\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */\n    fetchKeys(client, keyVaultNamespace, filter) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        return client\n            .db(dbName)\n            .collection(collectionName, { readConcern: { level: 'majority' } })\n            .find((0, bson_1.deserialize)(filter))\n            .toArray();\n    }\n}\nexports.StateMachine = StateMachine;\n//# sourceMappingURL=state_machine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/auth_provider.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\n/**\n * Provider used during authentication.\n * @internal\n */\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsbUJBQW1CO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanM/NDM0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gZXhwb3J0cy5BdXRoQ29udGV4dCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG4vKipcbiAqIENvbnRleHQgdXNlZCBkdXJpbmcgYXV0aGVudGljYXRpb25cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBdXRoQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIElmIHRoZSBjb250ZXh0IGlzIGZvciByZWF1dGhlbnRpY2F0aW9uLiAqL1xuICAgICAgICB0aGlzLnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQXV0aENvbnRleHQgPSBBdXRoQ29udGV4dDtcbi8qKlxuICogUHJvdmlkZXIgdXNlZCBkdXJpbmcgYXV0aGVudGljYXRpb24uXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXV0aFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHRoZSBoYW5kc2hha2UgZG9jdW1lbnQgYmVmb3JlIHRoZSBpbml0aWFsIGhhbmRzaGFrZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBoYW5kc2hha2VEb2MgLSBUaGUgZG9jdW1lbnQgdXNlZCBmb3IgdGhlIGluaXRpYWwgaGFuZHNoYWtlIG9uIGEgY29ubmVjdGlvblxuICAgICAqIEBwYXJhbSBhdXRoQ29udGV4dCAtIENvbnRleHQgZm9yIGF1dGhlbnRpY2F0aW9uIGZsb3dcbiAgICAgKi9cbiAgICBhc3luYyBwcmVwYXJlKGhhbmRzaGFrZURvYywgX2F1dGhDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBoYW5kc2hha2VEb2M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYXV0aGVudGljYXRlLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IC0gVGhlIHNoYXJlZCBhdXRoIGNvbnRleHQuXG4gICAgICovXG4gICAgYXN5bmMgcmVhdXRoKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQucmVhdXRoZW50aWNhdGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ1JlYXV0aGVudGljYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcy4nKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29udGV4dC5yZWF1dGhlbnRpY2F0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXV0aChjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNvbnRleHQucmVhdXRoZW50aWNhdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BdXRoUHJvdmlkZXIgPSBBdXRoUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoX3Byb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/gssapi.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n    return connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step('');\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n    }\n    loadKrb();\n    if ('kModuleError' in krb) {\n        throw krb['kModuleError'];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, { user: username, password: password });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || '';\n    }\n    catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return client.wrap(response || '', { user });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        }\n        catch (error) {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return resolveCname(host);\n        }\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return resolveCname(host);\n    }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    }\n    catch {\n        return host;\n    }\n}\nexports.resolveCname = resolveCname;\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n}\n//# sourceMappingURL=gssapi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2dzc2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx5Q0FBeUMsR0FBRyxjQUFjLEdBQUcsbUNBQW1DO0FBQ3ZILFlBQVksbUJBQU8sQ0FBQyxnQkFBSztBQUN6QixlQUFlLG1CQUFPLENBQUMsNERBQVk7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsb0ZBQWlCO0FBQ2pEO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsWUFBWSxjQUFjO0FBQzFCLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxvQ0FBb0M7QUFDekU7QUFDQTtBQUNBLGlCQUFpQixZQUFZLEVBQUUseUNBQXlDLEVBQUUsUUFBUTtBQUNsRjtBQUNBLGlCQUFpQixJQUFJLEdBQUcsa0NBQWtDO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsTUFBTTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2dzc2FwaS5qcz8wY2MzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlQ25hbWUgPSBleHBvcnRzLnBlcmZvcm1HU1NBUElDYW5vbmljYWxpemVIb3N0TmFtZSA9IGV4cG9ydHMuR1NTQVBJID0gZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUgPSB2b2lkIDA7XG5jb25zdCBkbnMgPSByZXF1aXJlKFwiZG5zXCIpO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4uLy4uL2RlcHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBvbjogdHJ1ZSxcbiAgICBvZmY6IGZhbHNlLFxuICAgIG5vbmU6ICdub25lJyxcbiAgICBmb3J3YXJkOiAnZm9yd2FyZCcsXG4gICAgZm9yd2FyZEFuZFJldmVyc2U6ICdmb3J3YXJkQW5kUmV2ZXJzZSdcbn0pO1xuYXN5bmMgZnVuY3Rpb24gZXh0ZXJuYWxDb21tYW5kKGNvbm5lY3Rpb24sIGNvbW1hbmQpIHtcbiAgICByZXR1cm4gY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKSgnJGV4dGVybmFsLiRjbWQnKSwgY29tbWFuZCwgdW5kZWZpbmVkKTtcbn1cbmxldCBrcmI7XG5jbGFzcyBHU1NBUEkgZXh0ZW5kcyBhdXRoX3Byb3ZpZGVyXzEuQXV0aFByb3ZpZGVyIHtcbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiwgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBpZiAoY3JlZGVudGlhbHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQ3JlZGVudGlhbHMgcmVxdWlyZWQgZm9yIEdTU0FQSSBhdXRoZW50aWNhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdXNlcm5hbWUgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCBtYWtlS2VyYmVyb3NDbGllbnQoYXV0aENvbnRleHQpO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgY2xpZW50LnN0ZXAoJycpO1xuICAgICAgICBjb25zdCBzYXNsU3RhcnRSZXNwb25zZSA9IGF3YWl0IGV4dGVybmFsQ29tbWFuZChjb25uZWN0aW9uLCBzYXNsU3RhcnQocGF5bG9hZCkpO1xuICAgICAgICBjb25zdCBuZWdvdGlhdGVkUGF5bG9hZCA9IGF3YWl0IG5lZ290aWF0ZShjbGllbnQsIDEwLCBzYXNsU3RhcnRSZXNwb25zZS5wYXlsb2FkKTtcbiAgICAgICAgY29uc3Qgc2FzbENvbnRpbnVlUmVzcG9uc2UgPSBhd2FpdCBleHRlcm5hbENvbW1hbmQoY29ubmVjdGlvbiwgc2FzbENvbnRpbnVlKG5lZ290aWF0ZWRQYXlsb2FkLCBzYXNsU3RhcnRSZXNwb25zZS5jb252ZXJzYXRpb25JZCkpO1xuICAgICAgICBjb25zdCBmaW5hbGl6ZVBheWxvYWQgPSBhd2FpdCBmaW5hbGl6ZShjbGllbnQsIHVzZXJuYW1lLCBzYXNsQ29udGludWVSZXNwb25zZS5wYXlsb2FkKTtcbiAgICAgICAgYXdhaXQgZXh0ZXJuYWxDb21tYW5kKGNvbm5lY3Rpb24sIHtcbiAgICAgICAgICAgIHNhc2xDb250aW51ZTogMSxcbiAgICAgICAgICAgIGNvbnZlcnNhdGlvbklkOiBzYXNsQ29udGludWVSZXNwb25zZS5jb252ZXJzYXRpb25JZCxcbiAgICAgICAgICAgIHBheWxvYWQ6IGZpbmFsaXplUGF5bG9hZFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkdTU0FQSSA9IEdTU0FQSTtcbmFzeW5jIGZ1bmN0aW9uIG1ha2VLZXJiZXJvc0NsaWVudChhdXRoQ29udGV4dCkge1xuICAgIGNvbnN0IHsgaG9zdEFkZHJlc3MgfSA9IGF1dGhDb250ZXh0Lm9wdGlvbnM7XG4gICAgY29uc3QgeyBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgaWYgKCFob3N0QWRkcmVzcyB8fCB0eXBlb2YgaG9zdEFkZHJlc3MuaG9zdCAhPT0gJ3N0cmluZycgfHwgIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0Nvbm5lY3Rpb24gbXVzdCBoYXZlIGhvc3QgYW5kIHBvcnQgYW5kIGNyZWRlbnRpYWxzIGRlZmluZWQuJyk7XG4gICAgfVxuICAgIGxvYWRLcmIoKTtcbiAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4ga3JiKSB7XG4gICAgICAgIHRocm93IGtyYlsna01vZHVsZUVycm9yJ107XG4gICAgfVxuICAgIGNvbnN0IHsgaW5pdGlhbGl6ZUNsaWVudCB9ID0ga3JiO1xuICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSBjcmVkZW50aWFscztcbiAgICBjb25zdCBtZWNoYW5pc21Qcm9wZXJ0aWVzID0gY3JlZGVudGlhbHMubWVjaGFuaXNtUHJvcGVydGllcztcbiAgICBjb25zdCBzZXJ2aWNlTmFtZSA9IG1lY2hhbmlzbVByb3BlcnRpZXMuU0VSVklDRV9OQU1FID8/ICdtb25nb2RiJztcbiAgICBjb25zdCBob3N0ID0gYXdhaXQgcGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lKGhvc3RBZGRyZXNzLmhvc3QsIG1lY2hhbmlzbVByb3BlcnRpZXMpO1xuICAgIGNvbnN0IGluaXRPcHRpb25zID0ge307XG4gICAgaWYgKHBhc3N3b3JkICE9IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETyhOT0RFLTUxMzkpOiBUaGVzZSBkbyBub3QgbWF0Y2ggdGhlIHR5cGVzY3JpcHQgb3B0aW9ucyBpbiBpbml0aWFsaXplQ2xpZW50XG4gICAgICAgIE9iamVjdC5hc3NpZ24oaW5pdE9wdGlvbnMsIHsgdXNlcjogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZCB9KTtcbiAgICB9XG4gICAgY29uc3Qgc3BuSG9zdCA9IG1lY2hhbmlzbVByb3BlcnRpZXMuU0VSVklDRV9IT1NUID8/IGhvc3Q7XG4gICAgbGV0IHNwbiA9IGAke3NlcnZpY2VOYW1lfSR7cHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/ICcvJyA6ICdAJ30ke3Nwbkhvc3R9YDtcbiAgICBpZiAoJ1NFUlZJQ0VfUkVBTE0nIGluIG1lY2hhbmlzbVByb3BlcnRpZXMpIHtcbiAgICAgICAgc3BuID0gYCR7c3BufUAke21lY2hhbmlzbVByb3BlcnRpZXMuU0VSVklDRV9SRUFMTX1gO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbGl6ZUNsaWVudChzcG4sIGluaXRPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHNhc2xTdGFydChwYXlsb2FkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICBtZWNoYW5pc206ICdHU1NBUEknLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgICBhdXRvQXV0aG9yaXplOiAxXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNhc2xDb250aW51ZShwYXlsb2FkLCBjb252ZXJzYXRpb25JZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xDb250aW51ZTogMSxcbiAgICAgICAgY29udmVyc2F0aW9uSWQsXG4gICAgICAgIHBheWxvYWRcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gbmVnb3RpYXRlKGNsaWVudCwgcmV0cmllcywgcGF5bG9hZCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnN0ZXAocGF5bG9hZCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZSB8fCAnJztcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChyZXRyaWVzID09PSAwKSB7XG4gICAgICAgICAgICAvLyBSZXRyaWVzIGV4aGF1c3RlZCwgcmFpc2UgZXJyb3JcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkanVzdCBudW1iZXIgb2YgcmV0cmllcyBhbmQgY2FsbCBzdGVwIGFnYWluXG4gICAgICAgIHJldHVybiBuZWdvdGlhdGUoY2xpZW50LCByZXRyaWVzIC0gMSwgcGF5bG9hZCk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZmluYWxpemUoY2xpZW50LCB1c2VyLCBwYXlsb2FkKSB7XG4gICAgLy8gR1NTIENsaWVudCBVbndyYXBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC51bndyYXAocGF5bG9hZCk7XG4gICAgcmV0dXJuIGNsaWVudC53cmFwKHJlc3BvbnNlIHx8ICcnLCB7IHVzZXIgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBwZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWUoaG9zdCwgbWVjaGFuaXNtUHJvcGVydGllcykge1xuICAgIGNvbnN0IG1vZGUgPSBtZWNoYW5pc21Qcm9wZXJ0aWVzLkNBTk9OSUNBTElaRV9IT1NUX05BTUU7XG4gICAgaWYgKCFtb2RlIHx8IG1vZGUgPT09IGV4cG9ydHMuR1NTQVBJQ2Fub25pY2FsaXphdGlvblZhbHVlLm5vbmUpIHtcbiAgICAgICAgcmV0dXJuIGhvc3Q7XG4gICAgfVxuICAgIC8vIElmIGZvcndhcmQgYW5kIHJldmVyc2Ugb3IgdHJ1ZVxuICAgIGlmIChtb2RlID09PSBleHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZS5vbiB8fFxuICAgICAgICBtb2RlID09PSBleHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZS5mb3J3YXJkQW5kUmV2ZXJzZSkge1xuICAgICAgICAvLyBQZXJmb3JtIHRoZSBsb29rdXAgb2YgdGhlIGlwIGFkZHJlc3MuXG4gICAgICAgIGNvbnN0IHsgYWRkcmVzcyB9ID0gYXdhaXQgZG5zLnByb21pc2VzLmxvb2t1cChob3N0KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFBlcmZvcm0gYSByZXZlcnNlIHB0ciBsb29rdXAgb24gdGhlIGlwIGFkZHJlc3MuXG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgZG5zLnByb21pc2VzLnJlc29sdmVQdHIoYWRkcmVzcyk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgcHRyIGRpZCBub3QgZXJyb3IgYnV0IGhhZCBubyByZXN1bHRzLCByZXR1cm4gdGhlIGhvc3QuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPiAwID8gcmVzdWx0c1swXSA6IGhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBlcnJvciBhcyBwdHIgcmVjb3JkcyBtYXkgbm90IGV4aXN0IGZvciBhbGwgaXBzLiBJbiB0aGlzIGNhc2VcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIGEgY25hbWUgbG9va3VwIGFzIGRucy5sb29rdXAoKSBkb2VzIG5vdCByZXR1cm4gdGhlXG4gICAgICAgICAgICAvLyBjbmFtZS5cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ25hbWUoaG9zdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRoZSBjYXNlIGZvciBmb3J3YXJkIGlzIGp1c3QgdG8gcmVzb2x2ZSB0aGUgY25hbWUgYXMgZG5zLmxvb2t1cCgpXG4gICAgICAgIC8vIHdpbGwgbm90IHJldHVybiBpdC5cbiAgICAgICAgcmV0dXJuIHJlc29sdmVDbmFtZShob3N0KTtcbiAgICB9XG59XG5leHBvcnRzLnBlcmZvcm1HU1NBUElDYW5vbmljYWxpemVIb3N0TmFtZSA9IHBlcmZvcm1HU1NBUElDYW5vbmljYWxpemVIb3N0TmFtZTtcbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVDbmFtZShob3N0KSB7XG4gICAgLy8gQXR0ZW1wdCB0byByZXNvbHZlIHRoZSBob3N0IG5hbWVcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgZG5zLnByb21pc2VzLnJlc29sdmVDbmFtZShob3N0KTtcbiAgICAgICAgLy8gR2V0IHRoZSBmaXJzdCByZXNvbHZlZCBob3N0IGlkXG4gICAgICAgIHJldHVybiByZXN1bHRzLmxlbmd0aCA+IDAgPyByZXN1bHRzWzBdIDogaG9zdDtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gaG9zdDtcbiAgICB9XG59XG5leHBvcnRzLnJlc29sdmVDbmFtZSA9IHJlc29sdmVDbmFtZTtcbi8qKlxuICogTG9hZCB0aGUgS2VyYmVyb3MgbGlicmFyeS5cbiAqL1xuZnVuY3Rpb24gbG9hZEtyYigpIHtcbiAgICBpZiAoIWtyYikge1xuICAgICAgICBrcmIgPSAoMCwgZGVwc18xLmdldEtlcmJlcm9zKSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdzc2FwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst gssapi_1 = __webpack_require__(/*! ./gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (hello.maxWireVersion >= 3) {\n            return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_PROVIDER_NAMES = ['aws', 'azure'];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = [\n    '*.mongodb.net',\n    '*.mongodb-dev.net',\n    '*.mongodbgov.net',\n    'localhost',\n    '127.0.0.1',\n    '::1'\n];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username ?? '';\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_CR ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n                throw new error_1.MongoInvalidArgumentError(`username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME === 'azure' &&\n                !this.mechanismProperties.TOKEN_AUDIENCE) {\n                throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME &&\n                !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`);\n            }\n            if (!this.mechanismProperties.PROVIDER_NAME &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts) {\n                    if (typeof host !== 'string') {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? '',\n            password: options.password ?? creds?.password ?? '',\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongocr.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCR = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password, source } = credentials;\n        const { nonce } = await connection.command((0, utils_1.ns)(`${source}.$cmd`), { getnonce: 1 }, undefined);\n        const hashPassword = crypto\n            .createHash('md5')\n            .update(`${username}:mongo:${password}`, 'utf8')\n            .digest('hex');\n        // Final key\n        const key = crypto\n            .createHash('md5')\n            .update(`${nonce}${username}${hashPassword}`, 'utf8')\n            .digest('hex');\n        const authenticateCommand = {\n            authenticate: 1,\n            user: username,\n            nonce,\n            key\n        };\n        await connection.command((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    }\n}\nexports.MongoCR = MongoCR;\n//# sourceMappingURL=mongocr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvY3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQixnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBYTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBYTtBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyxvRkFBaUI7QUFDakQ7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDZCQUE2QjtBQUM3QyxnQkFBZ0IsUUFBUSw4Q0FBOEMsT0FBTyxXQUFXLGFBQWE7QUFDckc7QUFDQTtBQUNBLHVCQUF1QixTQUFTLFNBQVMsU0FBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsT0FBTztBQUMzRDtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvY3IuanM/MTc2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29DUiA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jbGFzcyBNb25nb0NSIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBzb3VyY2UgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKGAke3NvdXJjZX0uJGNtZGApLCB7IGdldG5vbmNlOiAxIH0sIHVuZGVmaW5lZCk7XG4gICAgICAgIGNvbnN0IGhhc2hQYXNzd29yZCA9IGNyeXB0b1xuICAgICAgICAgICAgLmNyZWF0ZUhhc2goJ21kNScpXG4gICAgICAgICAgICAudXBkYXRlKGAke3VzZXJuYW1lfTptb25nbzoke3Bhc3N3b3JkfWAsICd1dGY4JylcbiAgICAgICAgICAgIC5kaWdlc3QoJ2hleCcpO1xuICAgICAgICAvLyBGaW5hbCBrZXlcbiAgICAgICAgY29uc3Qga2V5ID0gY3J5cHRvXG4gICAgICAgICAgICAuY3JlYXRlSGFzaCgnbWQ1JylcbiAgICAgICAgICAgIC51cGRhdGUoYCR7bm9uY2V9JHt1c2VybmFtZX0ke2hhc2hQYXNzd29yZH1gLCAndXRmOCcpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICAgICAgY29uc3QgYXV0aGVudGljYXRlQ29tbWFuZCA9IHtcbiAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogMSxcbiAgICAgICAgICAgIHVzZXI6IHVzZXJuYW1lLFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBrZXlcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKShgJHtzb3VyY2V9LiRjbWRgKSwgYXV0aGVudGljYXRlQ29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ1IgPSBNb25nb0NSO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29jci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBAWS = void 0;\nconst process = __webpack_require__(/*! process */ \"process\");\nconst BSON = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n */\nconst LEGACY_REGIONS = new Set([\n    'ap-northeast-1',\n    'ap-south-1',\n    'ap-southeast-1',\n    'ap-southeast-2',\n    'aws-global',\n    'ca-central-1',\n    'eu-central-1',\n    'eu-north-1',\n    'eu-west-1',\n    'eu-west-2',\n    'eu-west-3',\n    'sa-east-1',\n    'us-east-1',\n    'us-east-2',\n    'us-west-1',\n    'us-west-2'\n]);\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor() {\n        super();\n        MongoDBAWS.credentialProvider ??= (0, deps_1.getAwsCredentialProvider)();\n        let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n        const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */\n        const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n            (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n        if ('fromNodeProviderChain' in MongoDBAWS.credentialProvider) {\n            this.provider =\n                awsRegionSettingsExist && useRegionalSts\n                    ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\n                        clientConfig: { region: AWS_REGION }\n                    })\n                    : MongoDBAWS.credentialProvider.fromNodeProviderChain();\n        }\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials, this.provider);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        // Allow the user to specify an AWS session token for authentication with temporary credentials.\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await (0, utils_1.randomBytes)(32);\n        // All messages between MongoDB clients and servers are sent as BSON objects\n        // in the payload field of saslStart and saslContinue.\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials, provider) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        // The AWS session token (creds.Token) may or may not be set.\n        if (!creds.AccessKeyId || !creds.SecretAccessKey) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n    if (provider && !('kModuleError' in MongoDBAWS.credentialProvider)) {\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        try {\n            const creds = await provider();\n            return makeMongoCredentialsFromAWSTemp({\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            });\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message);\n        }\n    }\n    else {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return makeMongoCredentialsFromAWSTemp(creds);\n    }\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\n//# sourceMappingURL=mongodb_aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst aws_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/aws_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\");\nconst azure_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/azure_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/callback_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set('azure', new azure_service_workflow_1.AzureServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor() {\n        super();\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        await workflow.execute(connection, credentials, reauthenticating, response);\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        const result = await workflow.speculativeAuth(credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials) {\n    const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n    const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n    if (!workflow) {\n        throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n    }\n    return workflow;\n}\n//# sourceMappingURL=mongodb_oidc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxzQkFBc0I7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsb0ZBQWlCO0FBQ2pELCtCQUErQixtQkFBTyxDQUFDLDRIQUFxQztBQUM1RSxpQ0FBaUMsbUJBQU8sQ0FBQyxnSUFBdUM7QUFDaEYsNEJBQTRCLG1CQUFPLENBQUMsc0hBQWtDO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUNBQXlDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RkFBNEYsOENBQThDO0FBQzFJO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy5qcz8zN2RiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb0RCT0lEQyA9IGV4cG9ydHMuT0lEQ19XT1JLRkxPV1MgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbmNvbnN0IGF3c19zZXJ2aWNlX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tb25nb2RiX29pZGMvYXdzX3NlcnZpY2Vfd29ya2Zsb3dcIik7XG5jb25zdCBhenVyZV9zZXJ2aWNlX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tb25nb2RiX29pZGMvYXp1cmVfc2VydmljZV93b3JrZmxvd1wiKTtcbmNvbnN0IGNhbGxiYWNrX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9tb25nb2RiX29pZGMvY2FsbGJhY2tfd29ya2Zsb3dcIik7XG4vKiogRXJyb3Igd2hlbiBjcmVkZW50aWFscyBhcmUgbWlzc2luZy4gKi9cbmNvbnN0IE1JU1NJTkdfQ1JFREVOVElBTFNfRVJST1IgPSAnQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLic7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLk9JRENfV09SS0ZMT1dTID0gbmV3IE1hcCgpO1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUy5zZXQoJ2NhbGxiYWNrJywgbmV3IGNhbGxiYWNrX3dvcmtmbG93XzEuQ2FsbGJhY2tXb3JrZmxvdygpKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCdhd3MnLCBuZXcgYXdzX3NlcnZpY2Vfd29ya2Zsb3dfMS5Bd3NTZXJ2aWNlV29ya2Zsb3coKSk7XG5leHBvcnRzLk9JRENfV09SS0ZMT1dTLnNldCgnYXp1cmUnLCBuZXcgYXp1cmVfc2VydmljZV93b3JrZmxvd18xLkF6dXJlU2VydmljZVdvcmtmbG93KCkpO1xuLyoqXG4gKiBPSURDIGF1dGggcHJvdmlkZXIuXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmNsYXNzIE1vbmdvREJPSURDIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGF1dGggcHJvdmlkZXIuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZSB1c2luZyBPSURDXG4gICAgICovXG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIHJlYXV0aGVudGljYXRpbmcsIHJlc3BvbnNlIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBnZXRDcmVkZW50aWFscyhhdXRoQ29udGV4dCk7XG4gICAgICAgIGNvbnN0IHdvcmtmbG93ID0gZ2V0V29ya2Zsb3coY3JlZGVudGlhbHMpO1xuICAgICAgICBhd2FpdCB3b3JrZmxvdy5leGVjdXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzLCByZWF1dGhlbnRpY2F0aW5nLCByZXNwb25zZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgc3BlY3VsYXRpdmUgYXV0aCBmb3IgdGhlIGluaXRpYWwgaGFuZHNoYWtlLlxuICAgICAqL1xuICAgIGFzeW5jIHByZXBhcmUoaGFuZHNoYWtlRG9jLCBhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGdldENyZWRlbnRpYWxzKGF1dGhDb250ZXh0KTtcbiAgICAgICAgY29uc3Qgd29ya2Zsb3cgPSBnZXRXb3JrZmxvdyhjcmVkZW50aWFscyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdvcmtmbG93LnNwZWN1bGF0aXZlQXV0aChjcmVkZW50aWFscyk7XG4gICAgICAgIHJldHVybiB7IC4uLmhhbmRzaGFrZURvYywgLi4ucmVzdWx0IH07XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0RCT0lEQyA9IE1vbmdvREJPSURDO1xuLyoqXG4gKiBHZXQgY3JlZGVudGlhbHMgZnJvbSB0aGUgYXV0aCBjb250ZXh0LCB0aHJvd2luZyBpZiB0aGV5IGRvIG5vdCBleGlzdC5cbiAqL1xuZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpIHtcbiAgICBjb25zdCB7IGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoTUlTU0lOR19DUkVERU5USUFMU19FUlJPUik7XG4gICAgfVxuICAgIHJldHVybiBjcmVkZW50aWFscztcbn1cbi8qKlxuICogR2V0cyBlaXRoZXIgYSBkZXZpY2Ugd29ya2Zsb3cgb3IgY2FsbGJhY2sgd29ya2Zsb3cuXG4gKi9cbmZ1bmN0aW9uIGdldFdvcmtmbG93KGNyZWRlbnRpYWxzKSB7XG4gICAgY29uc3QgcHJvdmlkZXJOYW1lID0gY3JlZGVudGlhbHMubWVjaGFuaXNtUHJvcGVydGllcy5QUk9WSURFUl9OQU1FO1xuICAgIGNvbnN0IHdvcmtmbG93ID0gZXhwb3J0cy5PSURDX1dPUktGTE9XUy5nZXQocHJvdmlkZXJOYW1lIHx8ICdjYWxsYmFjaycpO1xuICAgIGlmICghd29ya2Zsb3cpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgQ291bGQgbm90IGxvYWQgd29ya2Zsb3cgZm9yIHByb3ZpZGVyICR7Y3JlZGVudGlhbHMubWVjaGFuaXNtUHJvcGVydGllcy5QUk9WSURFUl9OQU1FfWApO1xuICAgIH1cbiAgICByZXR1cm4gd29ya2Zsb3c7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb2RiX29pZGMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsServiceWorkflow = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.';\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nclass AwsServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken() {\n        const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        return fs.promises.readFile(tokenFile, 'utf8');\n    }\n}\nexports.AwsServiceWorkflow = AwsServiceWorkflow;\n//# sourceMappingURL=aws_service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWdCO0FBQ3hDLDJCQUEyQixtQkFBTyxDQUFDLHVHQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXdzX3NlcnZpY2Vfd29ya2Zsb3cuanM/MzRmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXdzU2VydmljZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3Qgc2VydmljZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vc2VydmljZV93b3JrZmxvd1wiKTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9NSVNTSU5HX0VSUk9SID0gJ0FXU19XRUJfSURFTlRJVFlfVE9LRU5fRklMRSBtdXN0IGJlIHNldCBpbiB0aGUgZW52aXJvbm1lbnQuJztcbi8qKlxuICogRGV2aWNlIHdvcmtmbG93IGltcGxlbWVudGF0aW9uIGZvciBBV1MuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF3c1NlcnZpY2VXb3JrZmxvdyBleHRlbmRzIHNlcnZpY2Vfd29ya2Zsb3dfMS5TZXJ2aWNlV29ya2Zsb3cge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKCkge1xuICAgICAgICBjb25zdCB0b2tlbkZpbGUgPSBwcm9jZXNzLmVudi5BV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEU7XG4gICAgICAgIGlmICghdG9rZW5GaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FXU0Vycm9yKFRPS0VOX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcy5wcm9taXNlcy5yZWFkRmlsZSh0b2tlbkZpbGUsICd1dGY4Jyk7XG4gICAgfVxufVxuZXhwb3J0cy5Bd3NTZXJ2aWNlV29ya2Zsb3cgPSBBd3NTZXJ2aWNlV29ya2Zsb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hd3Nfc2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureServiceWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst azure_token_cache_1 = __webpack_require__(/*! ./azure_token_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Base URL for getting Azure tokens. */\nconst AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01';\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */\nclass AzureServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super(...arguments);\n        this.cache = new azure_token_cache_1.AzureTokenCache();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n        }\n        let token;\n        const entry = this.cache.getEntry(tokenAudience);\n        if (entry?.isValid()) {\n            token = entry.token;\n        }\n        else {\n            this.cache.deleteEntry(tokenAudience);\n            const response = await getAzureTokenData(tokenAudience);\n            if (!isEndpointResultValid(response)) {\n                throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n            }\n            this.cache.addEntry(tokenAudience, response);\n            token = response.access_token;\n        }\n        return token;\n    }\n}\nexports.AzureServiceWorkflow = AzureServiceWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience) {\n    const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\n    const data = await (0, utils_1.request)(url, {\n        json: true,\n        headers: AZURE_HEADERS\n    });\n    return data;\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n    if (token == null || typeof token !== 'object')\n        return false;\n    return 'access_token' in token && 'expires_in' in token;\n}\n//# sourceMappingURL=azure_service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWdCO0FBQ3hDLDRCQUE0QixtQkFBTyxDQUFDLHlHQUFxQjtBQUN6RCwyQkFBMkIsbUJBQU8sQ0FBQyx1R0FBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDhDQUE4QztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZSxZQUFZLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzP2IxYzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF6dXJlU2VydmljZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhenVyZV90b2tlbl9jYWNoZV8xID0gcmVxdWlyZShcIi4vYXp1cmVfdG9rZW5fY2FjaGVcIik7XG5jb25zdCBzZXJ2aWNlX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9zZXJ2aWNlX3dvcmtmbG93XCIpO1xuLyoqIEJhc2UgVVJMIGZvciBnZXR0aW5nIEF6dXJlIHRva2Vucy4gKi9cbmNvbnN0IEFaVVJFX0JBU0VfVVJMID0gJ2h0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbWV0YWRhdGEvaWRlbnRpdHkvb2F1dGgyL3Rva2VuP2FwaS12ZXJzaW9uPTIwMTgtMDItMDEnO1xuLyoqIEF6dXJlIHJlcXVlc3QgaGVhZGVycy4gKi9cbmNvbnN0IEFaVVJFX0hFQURFUlMgPSBPYmplY3QuZnJlZXplKHsgTWV0YWRhdGE6ICd0cnVlJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSk7XG4vKiogSW52YWxpZCBlbmRwb2ludCByZXN1bHQgZXJyb3IuICovXG5jb25zdCBFTkRQT0lOVF9SRVNVTFRfRVJST1IgPSAnQXp1cmUgZW5kcG9pbnQgZGlkIG5vdCByZXR1cm4gYSB2YWx1ZSB3aXRoIG9ubHkgYWNjZXNzX3Rva2VuIGFuZCBleHBpcmVzX2luIHByb3BlcnRpZXMnO1xuLyoqIEVycm9yIGZvciB3aGVuIHRoZSB0b2tlbiBhdWRpZW5jZSBpcyBtaXNzaW5nIGluIHRoZSBlbnZpcm9ubWVudC4gKi9cbmNvbnN0IFRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IgPSAnVE9LRU5fQVVESUVOQ0UgbXVzdCBiZSBzZXQgaW4gdGhlIGF1dGggbWVjaGFuaXNtIHByb3BlcnRpZXMgd2hlbiBQUk9WSURFUl9OQU1FIGlzIGF6dXJlLic7XG4vKipcbiAqIERldmljZSB3b3JrZmxvdyBpbXBsZW1lbnRhdGlvbiBmb3IgQXp1cmUuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF6dXJlU2VydmljZVdvcmtmbG93IGV4dGVuZHMgc2VydmljZV93b3JrZmxvd18xLlNlcnZpY2VXb3JrZmxvdyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgYXp1cmVfdG9rZW5fY2FjaGVfMS5BenVyZVRva2VuQ2FjaGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbkF1ZGllbmNlID0gY3JlZGVudGlhbHM/Lm1lY2hhbmlzbVByb3BlcnRpZXMuVE9LRU5fQVVESUVOQ0U7XG4gICAgICAgIGlmICghdG9rZW5BdWRpZW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKFRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0b2tlbjtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmNhY2hlLmdldEVudHJ5KHRva2VuQXVkaWVuY2UpO1xuICAgICAgICBpZiAoZW50cnk/LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdG9rZW4gPSBlbnRyeS50b2tlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlRW50cnkodG9rZW5BdWRpZW5jZSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldEF6dXJlVG9rZW5EYXRhKHRva2VuQXVkaWVuY2UpO1xuICAgICAgICAgICAgaWYgKCFpc0VuZHBvaW50UmVzdWx0VmFsaWQocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKEVORFBPSU5UX1JFU1VMVF9FUlJPUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmFkZEVudHJ5KHRva2VuQXVkaWVuY2UsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRva2VuID0gcmVzcG9uc2UuYWNjZXNzX3Rva2VuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlU2VydmljZVdvcmtmbG93ID0gQXp1cmVTZXJ2aWNlV29ya2Zsb3c7XG4vKipcbiAqIEhpdCB0aGUgQXp1cmUgZW5kcG9pbnQgdG8gZ2V0IHRoZSB0b2tlbiBkYXRhLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRBenVyZVRva2VuRGF0YSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgY29uc3QgdXJsID0gYCR7QVpVUkVfQkFTRV9VUkx9JnJlc291cmNlPSR7dG9rZW5BdWRpZW5jZX1gO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgdXRpbHNfMS5yZXF1ZXN0KSh1cmwsIHtcbiAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgaGVhZGVyczogQVpVUkVfSEVBREVSU1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVzdWx0IHJldHVybmVkIGZyb20gdGhlIGVuZHBvaW50IGlzIHZhbGlkLlxuICogVGhpcyBtZWFucyB0aGUgcmVzdWx0IGlzIG5vdCBudWxsaXNoLCBjb250YWlucyB0aGUgYWNjZXNzX3Rva2VuIHJlcXVpcmVkIGZpZWxkXG4gKiBhbmQgdGhlIGV4cGlyZXNfaW4gcmVxdWlyZWQgZmllbGQuXG4gKi9cbmZ1bmN0aW9uIGlzRW5kcG9pbnRSZXN1bHRWYWxpZCh0b2tlbikge1xuICAgIGlmICh0b2tlbiA9PSBudWxsIHx8IHR5cGVvZiB0b2tlbiAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gJ2FjY2Vzc190b2tlbicgaW4gdG9rZW4gJiYgJ2V4cGlyZXNfaW4nIGluIHRva2VuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfc2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** @internal */\nclass AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(token, expiration) {\n        super(expiration);\n        this.token = token;\n    }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nclass AzureTokenCache extends cache_1.Cache {\n    /**\n     * Add an entry to the cache.\n     */\n    addEntry(tokenAudience, token) {\n        const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n        this.entries.set(tokenAudience, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key.\n     */\n    cacheKey(tokenAudience) {\n        return tokenAudience;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(tokenAudience) {\n        this.entries.delete(tokenAudience);\n    }\n    /**\n     * Get an Azure token entry from the cache.\n     */\n    getEntry(tokenAudience) {\n        return this.entries.get(tokenAudience);\n    }\n}\nexports.AzureTokenCache = AzureTokenCache;\n//# sourceMappingURL=azure_token_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV90b2tlbl9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx1QkFBdUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXp1cmVfdG9rZW5fY2FjaGUuanM/MTQwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXp1cmVUb2tlbkNhY2hlID0gZXhwb3J0cy5BenVyZVRva2VuRW50cnkgPSB2b2lkIDA7XG5jb25zdCBjYWNoZV8xID0gcmVxdWlyZShcIi4vY2FjaGVcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBBenVyZVRva2VuRW50cnkgZXh0ZW5kcyBjYWNoZV8xLkV4cGlyaW5nQ2FjaGVFbnRyeSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGVudHJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRva2VuLCBleHBpcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKGV4cGlyYXRpb24pO1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgfVxufVxuZXhwb3J0cy5BenVyZVRva2VuRW50cnkgPSBBenVyZVRva2VuRW50cnk7XG4vKipcbiAqIEEgY2FjaGUgb2YgYWNjZXNzIHRva2VucyBmcm9tIEF6dXJlLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF6dXJlVG9rZW5DYWNoZSBleHRlbmRzIGNhY2hlXzEuQ2FjaGUge1xuICAgIC8qKlxuICAgICAqIEFkZCBhbiBlbnRyeSB0byB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgYWRkRW50cnkodG9rZW5BdWRpZW5jZSwgdG9rZW4pIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBuZXcgQXp1cmVUb2tlbkVudHJ5KHRva2VuLmFjY2Vzc190b2tlbiwgdG9rZW4uZXhwaXJlc19pbik7XG4gICAgICAgIHRoaXMuZW50cmllcy5zZXQodG9rZW5BdWRpZW5jZSwgZW50cnkpO1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNhY2hlIGtleS5cbiAgICAgKi9cbiAgICBjYWNoZUtleSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgIHJldHVybiB0b2tlbkF1ZGllbmNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gZW50cnkgZnJvbSB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgZGVsZXRlRW50cnkodG9rZW5BdWRpZW5jZSkge1xuICAgICAgICB0aGlzLmVudHJpZXMuZGVsZXRlKHRva2VuQXVkaWVuY2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gQXp1cmUgdG9rZW4gZW50cnkgZnJvbSB0aGUgY2FjaGUuXG4gICAgICovXG4gICAgZ2V0RW50cnkodG9rZW5BdWRpZW5jZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzLmdldCh0b2tlbkF1ZGllbmNlKTtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlVG9rZW5DYWNoZSA9IEF6dXJlVG9rZW5DYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF6dXJlX3Rva2VuX2NhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */\nclass ExpiringCacheEntry {\n    /**\n     * Create a new expiring token entry.\n     */\n    constructor(expiration) {\n        this.expiration = this.expirationTime(expiration);\n    }\n    /**\n     * The entry is still valid if the expiration is more than\n     * 5 minutes from the expiration time.\n     */\n    isValid() {\n        return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n    }\n    /**\n     * Get an expiration time in milliseconds past epoch.\n     */\n    expirationTime(expiresInSeconds) {\n        return Date.now() + expiresInSeconds * 1000;\n    }\n}\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\n * Base class for OIDC caches.\n */\nclass Cache {\n    /**\n     * Create a new cache.\n     */\n    constructor() {\n        this.entries = new Map();\n    }\n    /**\n     * Clear the cache.\n     */\n    clear() {\n        this.entries.clear();\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    hashedCacheKey(address, username, callbackHash) {\n        return JSON.stringify([address, username, callbackHash]);\n    }\n}\nexports.Cache = Cache;\n//# sourceMappingURL=cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLEdBQUcsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvY2FjaGUuanM/ZTc2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FjaGUgPSBleHBvcnRzLkV4cGlyaW5nQ2FjaGVFbnRyeSA9IHZvaWQgMDtcbi8qIDUgbWludXRlcyBpbiBtaWxsaXNlY29uZHMgKi9cbmNvbnN0IEVYUElSQVRJT05fQlVGRkVSX01TID0gMzAwMDAwO1xuLyoqXG4gKiBBbiBlbnRyeSBpbiBhIGNhY2hlIHRoYXQgY2FuIGV4cGlyZSBpbiBhIGNlcnRhaW4gYW1vdW50IG9mIHRpbWUuXG4gKi9cbmNsYXNzIEV4cGlyaW5nQ2FjaGVFbnRyeSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGV4cGlyaW5nIHRva2VuIGVudHJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGV4cGlyYXRpb24pIHtcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uID0gdGhpcy5leHBpcmF0aW9uVGltZShleHBpcmF0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGVudHJ5IGlzIHN0aWxsIHZhbGlkIGlmIHRoZSBleHBpcmF0aW9uIGlzIG1vcmUgdGhhblxuICAgICAqIDUgbWludXRlcyBmcm9tIHRoZSBleHBpcmF0aW9uIHRpbWUuXG4gICAgICovXG4gICAgaXNWYWxpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwaXJhdGlvbiAtIERhdGUubm93KCkgPiBFWFBJUkFUSU9OX0JVRkZFUl9NUztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFuIGV4cGlyYXRpb24gdGltZSBpbiBtaWxsaXNlY29uZHMgcGFzdCBlcG9jaC5cbiAgICAgKi9cbiAgICBleHBpcmF0aW9uVGltZShleHBpcmVzSW5TZWNvbmRzKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpICsgZXhwaXJlc0luU2Vjb25kcyAqIDEwMDA7XG4gICAgfVxufVxuZXhwb3J0cy5FeHBpcmluZ0NhY2hlRW50cnkgPSBFeHBpcmluZ0NhY2hlRW50cnk7XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIE9JREMgY2FjaGVzLlxuICovXG5jbGFzcyBDYWNoZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNhY2hlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVudHJpZXMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzLmNsZWFyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNhY2hlIGtleSBmcm9tIHRoZSBhZGRyZXNzIGFuZCB1c2VybmFtZS5cbiAgICAgKi9cbiAgICBoYXNoZWRDYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShbYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaF0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FjaGUgPSBDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackLockCache = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** Error message for when request callback is missing. */\nconst REQUEST_CALLBACK_REQUIRED_ERROR = 'Auth mechanism property REQUEST_TOKEN_CALLBACK is required.';\n/* Counter for function \"hashes\".*/\nlet FN_HASH_COUNTER = 0;\n/* No function present function */\nconst NO_FUNCTION = async () => ({ accessToken: 'test' });\n/* The map of function hashes */\nconst FN_HASHES = new WeakMap();\n/* Put the no function hash in the map. */\nFN_HASHES.set(NO_FUNCTION, FN_HASH_COUNTER);\n/**\n * A cache of request and refresh callbacks per server/user.\n */\nclass CallbackLockCache extends cache_1.Cache {\n    /**\n     * Get the callbacks for the connection and credentials. If an entry does not\n     * exist a new one will get set.\n     */\n    getEntry(connection, credentials) {\n        const requestCallback = credentials.mechanismProperties.REQUEST_TOKEN_CALLBACK;\n        const refreshCallback = credentials.mechanismProperties.REFRESH_TOKEN_CALLBACK;\n        if (!requestCallback) {\n            throw new error_1.MongoInvalidArgumentError(REQUEST_CALLBACK_REQUIRED_ERROR);\n        }\n        const callbackHash = hashFunctions(requestCallback, refreshCallback);\n        const key = this.cacheKey(connection.address, credentials.username, callbackHash);\n        const entry = this.entries.get(key);\n        if (entry) {\n            return entry;\n        }\n        return this.addEntry(key, callbackHash, requestCallback, refreshCallback);\n    }\n    /**\n     * Set locked callbacks on for connection and credentials.\n     */\n    addEntry(key, callbackHash, requestCallback, refreshCallback) {\n        const entry = {\n            requestCallback: withLock(requestCallback),\n            refreshCallback: refreshCallback ? withLock(refreshCallback) : undefined,\n            callbackHash: callbackHash\n        };\n        this.entries.set(key, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.CallbackLockCache = CallbackLockCache;\n/**\n * Ensure the callback is only executed one at a time.\n */\nfunction withLock(callback) {\n    let lock = Promise.resolve();\n    return async (info, context) => {\n        await lock;\n        lock = lock.then(() => callback(info, context));\n        return lock;\n    };\n}\n/**\n * Get the hash string for the request and refresh functions.\n */\nfunction hashFunctions(requestFn, refreshFn) {\n    let requestHash = FN_HASHES.get(requestFn);\n    let refreshHash = FN_HASHES.get(refreshFn ?? NO_FUNCTION);\n    if (requestHash == null) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        requestHash = FN_HASH_COUNTER;\n        FN_HASHES.set(requestFn, FN_HASH_COUNTER);\n    }\n    if (refreshHash == null && refreshFn) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        refreshHash = FN_HASH_COUNTER;\n        FN_HASHES.set(refreshFn, FN_HASH_COUNTER);\n    }\n    return `${requestHash}-${refreshHash}`;\n}\n//# sourceMappingURL=callback_lock_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWxsYmFja19sb2NrX2NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBZ0I7QUFDeEMsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxxQkFBcUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVksR0FBRyxZQUFZO0FBQ3pDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2NhbGxiYWNrX2xvY2tfY2FjaGUuanM/OWZmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2FsbGJhY2tMb2NrQ2FjaGUgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3QgY2FjaGVfMSA9IHJlcXVpcmUoXCIuL2NhY2hlXCIpO1xuLyoqIEVycm9yIG1lc3NhZ2UgZm9yIHdoZW4gcmVxdWVzdCBjYWxsYmFjayBpcyBtaXNzaW5nLiAqL1xuY29uc3QgUkVRVUVTVF9DQUxMQkFDS19SRVFVSVJFRF9FUlJPUiA9ICdBdXRoIG1lY2hhbmlzbSBwcm9wZXJ0eSBSRVFVRVNUX1RPS0VOX0NBTExCQUNLIGlzIHJlcXVpcmVkLic7XG4vKiBDb3VudGVyIGZvciBmdW5jdGlvbiBcImhhc2hlc1wiLiovXG5sZXQgRk5fSEFTSF9DT1VOVEVSID0gMDtcbi8qIE5vIGZ1bmN0aW9uIHByZXNlbnQgZnVuY3Rpb24gKi9cbmNvbnN0IE5PX0ZVTkNUSU9OID0gYXN5bmMgKCkgPT4gKHsgYWNjZXNzVG9rZW46ICd0ZXN0JyB9KTtcbi8qIFRoZSBtYXAgb2YgZnVuY3Rpb24gaGFzaGVzICovXG5jb25zdCBGTl9IQVNIRVMgPSBuZXcgV2Vha01hcCgpO1xuLyogUHV0IHRoZSBubyBmdW5jdGlvbiBoYXNoIGluIHRoZSBtYXAuICovXG5GTl9IQVNIRVMuc2V0KE5PX0ZVTkNUSU9OLCBGTl9IQVNIX0NPVU5URVIpO1xuLyoqXG4gKiBBIGNhY2hlIG9mIHJlcXVlc3QgYW5kIHJlZnJlc2ggY2FsbGJhY2tzIHBlciBzZXJ2ZXIvdXNlci5cbiAqL1xuY2xhc3MgQ2FsbGJhY2tMb2NrQ2FjaGUgZXh0ZW5kcyBjYWNoZV8xLkNhY2hlIHtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNhbGxiYWNrcyBmb3IgdGhlIGNvbm5lY3Rpb24gYW5kIGNyZWRlbnRpYWxzLiBJZiBhbiBlbnRyeSBkb2VzIG5vdFxuICAgICAqIGV4aXN0IGEgbmV3IG9uZSB3aWxsIGdldCBzZXQuXG4gICAgICovXG4gICAgZ2V0RW50cnkoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdENhbGxiYWNrID0gY3JlZGVudGlhbHMubWVjaGFuaXNtUHJvcGVydGllcy5SRVFVRVNUX1RPS0VOX0NBTExCQUNLO1xuICAgICAgICBjb25zdCByZWZyZXNoQ2FsbGJhY2sgPSBjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlJFRlJFU0hfVE9LRU5fQ0FMTEJBQ0s7XG4gICAgICAgIGlmICghcmVxdWVzdENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKFJFUVVFU1RfQ0FMTEJBQ0tfUkVRVUlSRURfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrSGFzaCA9IGhhc2hGdW5jdGlvbnMocmVxdWVzdENhbGxiYWNrLCByZWZyZXNoQ2FsbGJhY2spO1xuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmNhY2hlS2V5KGNvbm5lY3Rpb24uYWRkcmVzcywgY3JlZGVudGlhbHMudXNlcm5hbWUsIGNhbGxiYWNrSGFzaCk7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5lbnRyaWVzLmdldChrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hZGRFbnRyeShrZXksIGNhbGxiYWNrSGFzaCwgcmVxdWVzdENhbGxiYWNrLCByZWZyZXNoQ2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9ja2VkIGNhbGxiYWNrcyBvbiBmb3IgY29ubmVjdGlvbiBhbmQgY3JlZGVudGlhbHMuXG4gICAgICovXG4gICAgYWRkRW50cnkoa2V5LCBjYWxsYmFja0hhc2gsIHJlcXVlc3RDYWxsYmFjaywgcmVmcmVzaENhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgcmVxdWVzdENhbGxiYWNrOiB3aXRoTG9jayhyZXF1ZXN0Q2FsbGJhY2spLFxuICAgICAgICAgICAgcmVmcmVzaENhbGxiYWNrOiByZWZyZXNoQ2FsbGJhY2sgPyB3aXRoTG9jayhyZWZyZXNoQ2FsbGJhY2spIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY2FsbGJhY2tIYXNoOiBjYWxsYmFja0hhc2hcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnNldChrZXksIGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjYWNoZSBrZXkgZnJvbSB0aGUgYWRkcmVzcyBhbmQgdXNlcm5hbWUuXG4gICAgICovXG4gICAgY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoZWRDYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKTtcbiAgICB9XG59XG5leHBvcnRzLkNhbGxiYWNrTG9ja0NhY2hlID0gQ2FsbGJhY2tMb2NrQ2FjaGU7XG4vKipcbiAqIEVuc3VyZSB0aGUgY2FsbGJhY2sgaXMgb25seSBleGVjdXRlZCBvbmUgYXQgYSB0aW1lLlxuICovXG5mdW5jdGlvbiB3aXRoTG9jayhjYWxsYmFjaykge1xuICAgIGxldCBsb2NrID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgcmV0dXJuIGFzeW5jIChpbmZvLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIGF3YWl0IGxvY2s7XG4gICAgICAgIGxvY2sgPSBsb2NrLnRoZW4oKCkgPT4gY2FsbGJhY2soaW5mbywgY29udGV4dCkpO1xuICAgICAgICByZXR1cm4gbG9jaztcbiAgICB9O1xufVxuLyoqXG4gKiBHZXQgdGhlIGhhc2ggc3RyaW5nIGZvciB0aGUgcmVxdWVzdCBhbmQgcmVmcmVzaCBmdW5jdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGhhc2hGdW5jdGlvbnMocmVxdWVzdEZuLCByZWZyZXNoRm4pIHtcbiAgICBsZXQgcmVxdWVzdEhhc2ggPSBGTl9IQVNIRVMuZ2V0KHJlcXVlc3RGbik7XG4gICAgbGV0IHJlZnJlc2hIYXNoID0gRk5fSEFTSEVTLmdldChyZWZyZXNoRm4gPz8gTk9fRlVOQ1RJT04pO1xuICAgIGlmIChyZXF1ZXN0SGFzaCA9PSBudWxsKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBvbmUgZm9yIHRoZSBmdW5jdGlvbiBhbmQgcHV0IGl0IGluIHRoZSBtYXAuXG4gICAgICAgIEZOX0hBU0hfQ09VTlRFUisrO1xuICAgICAgICByZXF1ZXN0SGFzaCA9IEZOX0hBU0hfQ09VTlRFUjtcbiAgICAgICAgRk5fSEFTSEVTLnNldChyZXF1ZXN0Rm4sIEZOX0hBU0hfQ09VTlRFUik7XG4gICAgfVxuICAgIGlmIChyZWZyZXNoSGFzaCA9PSBudWxsICYmIHJlZnJlc2hGbikge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgb25lIGZvciB0aGUgZnVuY3Rpb24gYW5kIHB1dCBpdCBpbiB0aGUgbWFwLlxuICAgICAgICBGTl9IQVNIX0NPVU5URVIrKztcbiAgICAgICAgcmVmcmVzaEhhc2ggPSBGTl9IQVNIX0NPVU5URVI7XG4gICAgICAgIEZOX0hBU0hFUy5zZXQocmVmcmVzaEZuLCBGTl9IQVNIX0NPVU5URVIpO1xuICAgIH1cbiAgICByZXR1cm4gYCR7cmVxdWVzdEhhc2h9LSR7cmVmcmVzaEhhc2h9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGxiYWNrX2xvY2tfY2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst callback_lock_cache_1 = __webpack_require__(/*! ./callback_lock_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\");\nconst token_entry_cache_1 = __webpack_require__(/*! ./token_entry_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\");\n/** The current version of OIDC implementation. */\nconst OIDC_VERSION = 0;\n/** 5 minutes in seconds */\nconst TIMEOUT_S = 300;\n/** Properties allowed on results of callbacks. */\nconst RESULT_PROPERTIES = ['accessToken', 'expiresInSeconds', 'refreshToken'];\n/** Error message when the callback result is invalid. */\nconst CALLBACK_RESULT_ERROR = 'User provided OIDC callbacks must return a valid object with an accessToken.';\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */\nclass CallbackWorkflow {\n    /**\n     * Instantiate the workflow\n     */\n    constructor() {\n        this.cache = new token_entry_cache_1.TokenEntryCache();\n        this.callbackCache = new callback_lock_cache_1.CallbackLockCache();\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */\n    async speculativeAuth(credentials) {\n        const document = startCommandDocument(credentials);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */\n    async execute(connection, credentials, reauthenticating, response) {\n        // Get the callbacks with locks from the callback lock cache.\n        const { requestCallback, refreshCallback, callbackHash } = this.callbackCache.getEntry(connection, credentials);\n        // Look for an existing entry in the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        if (entry) {\n            // Reauthentication cannot use a token from the cache since the server has\n            // stated it is invalid by the request for reauthentication.\n            if (entry.isValid() && !reauthenticating) {\n                // Presence of a valid cache entry means we can skip to the finishing step.\n                result = await this.finishAuthentication(connection, credentials, entry.tokenResult, response?.speculativeAuthenticate?.conversationId);\n            }\n            else {\n                // Presence of an expired cache entry means we must fetch a new one and\n                // then execute the final step.\n                const tokenResult = await this.fetchAccessToken(connection, credentials, entry.serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback);\n                try {\n                    result = await this.finishAuthentication(connection, credentials, tokenResult, reauthenticating ? undefined : response?.speculativeAuthenticate?.conversationId);\n                }\n                catch (error) {\n                    // If we are reauthenticating and this errors with reauthentication\n                    // required, we need to do the entire process over again and clear\n                    // the cache entry.\n                    if (reauthenticating &&\n                        error instanceof error_1.MongoError &&\n                        error.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                        this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n                        result = await this.execute(connection, credentials, reauthenticating);\n                    }\n                    else {\n                        throw error;\n                    }\n                }\n            }\n        }\n        else {\n            // No entry in the cache requires us to do all authentication steps\n            // from start to finish, including getting a fresh token for the cache.\n            const startDocument = await this.startAuthentication(connection, credentials, reauthenticating, response);\n            const conversationId = startDocument.conversationId;\n            const serverResult = bson_1.BSON.deserialize(startDocument.payload.buffer);\n            const tokenResult = await this.fetchAccessToken(connection, credentials, serverResult, reauthenticating, callbackHash, requestCallback, refreshCallback);\n            result = await this.finishAuthentication(connection, credentials, tokenResult, conversationId);\n        }\n        return result;\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */\n    async startAuthentication(connection, credentials, reauthenticating, response) {\n        let result;\n        if (!reauthenticating && response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        }\n        else {\n            result = await connection.command((0, utils_1.ns)(credentials.source), startCommandDocument(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */\n    async finishAuthentication(connection, credentials, tokenResult, conversationId) {\n        const result = await connection.command((0, utils_1.ns)(credentials.source), finishCommandDocument(tokenResult.accessToken, conversationId), undefined);\n        return result;\n    }\n    /**\n     * Fetches an access token using either the request or refresh callbacks and\n     * puts it in the cache.\n     */\n    async fetchAccessToken(connection, credentials, serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback) {\n        // Get the token from the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        const context = { timeoutSeconds: TIMEOUT_S, version: OIDC_VERSION };\n        // Check if there's a token in the cache.\n        if (entry) {\n            // If the cache entry is valid, return the token result.\n            if (entry.isValid() && !reauthenticating) {\n                return entry.tokenResult;\n            }\n            // If the cache entry is not valid, remove it from the cache and first attempt\n            // to use the refresh callback to get a new token. If no refresh callback\n            // exists, then fallback to the request callback.\n            if (refreshCallback) {\n                context.refreshToken = entry.tokenResult.refreshToken;\n                result = await refreshCallback(serverInfo, context);\n            }\n            else {\n                result = await requestCallback(serverInfo, context);\n            }\n        }\n        else {\n            // With no token in the cache we use the request callback.\n            result = await requestCallback(serverInfo, context);\n        }\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        // Cleanup the cache.\n        this.cache.deleteExpiredEntries();\n        // Put the new entry into the cache.\n        this.cache.addEntry(connection.address, credentials.username || '', callbackHash, result, serverInfo);\n        return result;\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n    if (conversationId != null && typeof conversationId === 'number') {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n    };\n}\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */\nfunction isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== 'object')\n        return true;\n    if (!('accessToken' in tokenResult))\n        return true;\n    return !Object.getOwnPropertyNames(tokenResult).every(prop => RESULT_PROPERTIES.includes(prop));\n}\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n}\n//# sourceMappingURL=callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\nclass ServiceWorkflow {\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */\n    async execute(connection, credentials) {\n        const token = await this.getToken(credentials);\n        const command = commandDocument(token);\n        return connection.command((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */\n    async speculativeAuth(credentials) {\n        const token = await this.getToken(credentials);\n        const document = commandDocument(token);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n}\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */\nfunction commandDocument(token) {\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: bson_1.BSON.serialize({ jwt: token })\n    };\n}\nexports.commandDocument = commandDocument;\n//# sourceMappingURL=service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLHVCQUF1QjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsb0RBQU07QUFDN0IsZ0JBQWdCLG1CQUFPLENBQUMsaUVBQWdCO0FBQ3hDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQ7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvc2VydmljZV93b3JrZmxvdy5qcz9lZDljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21tYW5kRG9jdW1lbnQgPSBleHBvcnRzLlNlcnZpY2VXb3JrZmxvdyA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCJic29uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlsc1wiKTtcbmNvbnN0IHByb3ZpZGVyc18xID0gcmVxdWlyZShcIi4uL3Byb3ZpZGVyc1wiKTtcbi8qKlxuICogQ29tbW9uIGJlaGF2aW91ciBmb3IgT0lEQyBkZXZpY2Ugd29ya2Zsb3dzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFNlcnZpY2VXb3JrZmxvdyB7XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSB0aGUgd29ya2Zsb3cuIExvb2tzIGZvciBBV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEUgaW4gdGhlIGVudmlyb25tZW50XG4gICAgICogYW5kIHRoZW4gYXR0ZW1wdHMgdG8gcmVhZCB0aGUgdG9rZW4gZnJvbSB0aGF0IHBhdGguXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShjb25uZWN0aW9uLCBjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0VG9rZW4oY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBjb21tYW5kID0gY29tbWFuZERvY3VtZW50KHRva2VuKTtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24uY29tbWFuZCgoMCwgdXRpbHNfMS5ucykoY3JlZGVudGlhbHMuc291cmNlKSwgY29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkb2N1bWVudCB0byBhZGQgZm9yIHNwZWN1bGF0aXZlIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHNwZWN1bGF0aXZlQXV0aChjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0VG9rZW4oY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGNvbW1hbmREb2N1bWVudCh0b2tlbik7XG4gICAgICAgIGRvY3VtZW50LmRiID0gY3JlZGVudGlhbHMuc291cmNlO1xuICAgICAgICByZXR1cm4geyBzcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZTogZG9jdW1lbnQgfTtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZpY2VXb3JrZmxvdyA9IFNlcnZpY2VXb3JrZmxvdztcbi8qKlxuICogQ3JlYXRlIHRoZSBzYXNsU3RhcnQgY29tbWFuZCBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gY29tbWFuZERvY3VtZW50KHRva2VuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICBtZWNoYW5pc206IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLFxuICAgICAgICBwYXlsb2FkOiBic29uXzEuQlNPTi5zZXJpYWxpemUoeyBqd3Q6IHRva2VuIH0pXG4gICAgfTtcbn1cbmV4cG9ydHMuY29tbWFuZERvY3VtZW50ID0gY29tbWFuZERvY3VtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/* Default expiration is now for when no expiration provided */\nconst DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */\nclass TokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(tokenResult, serverInfo, expiration) {\n        super(expiration);\n        this.tokenResult = tokenResult;\n        this.serverInfo = serverInfo;\n    }\n}\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nclass TokenEntryCache extends cache_1.Cache {\n    /**\n     * Set an entry in the token cache.\n     */\n    addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n        const entry = new TokenEntry(tokenResult, serverInfo, tokenResult.expiresInSeconds ?? DEFAULT_EXPIRATION_SECS);\n        this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n        return entry;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(address, username, callbackHash) {\n        this.entries.delete(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Get an entry from the cache.\n     */\n    getEntry(address, username, callbackHash) {\n        return this.entries.get(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Delete all expired entries from the cache.\n     */\n    deleteExpiredEntries() {\n        for (const [key, entry] of this.entries) {\n            if (!entry.isValid()) {\n                this.entries.delete(key);\n            }\n        }\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.TokenEntryCache = TokenEntryCache;\n//# sourceMappingURL=token_entry_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9lbnRyeV9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxrQkFBa0I7QUFDNUMsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9lbnRyeV9jYWNoZS5qcz8xNGIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub2tlbkVudHJ5Q2FjaGUgPSBleHBvcnRzLlRva2VuRW50cnkgPSB2b2lkIDA7XG5jb25zdCBjYWNoZV8xID0gcmVxdWlyZShcIi4vY2FjaGVcIik7XG4vKiBEZWZhdWx0IGV4cGlyYXRpb24gaXMgbm93IGZvciB3aGVuIG5vIGV4cGlyYXRpb24gcHJvdmlkZWQgKi9cbmNvbnN0IERFRkFVTFRfRVhQSVJBVElPTl9TRUNTID0gMDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFRva2VuRW50cnkgZXh0ZW5kcyBjYWNoZV8xLkV4cGlyaW5nQ2FjaGVFbnRyeSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGVudHJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRva2VuUmVzdWx0LCBzZXJ2ZXJJbmZvLCBleHBpcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKGV4cGlyYXRpb24pO1xuICAgICAgICB0aGlzLnRva2VuUmVzdWx0ID0gdG9rZW5SZXN1bHQ7XG4gICAgICAgIHRoaXMuc2VydmVySW5mbyA9IHNlcnZlckluZm87XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbkVudHJ5ID0gVG9rZW5FbnRyeTtcbi8qKlxuICogQ2FjaGUgb2YgT0lEQyB0b2tlbiBlbnRyaWVzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFRva2VuRW50cnlDYWNoZSBleHRlbmRzIGNhY2hlXzEuQ2FjaGUge1xuICAgIC8qKlxuICAgICAqIFNldCBhbiBlbnRyeSBpbiB0aGUgdG9rZW4gY2FjaGUuXG4gICAgICovXG4gICAgYWRkRW50cnkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCwgdG9rZW5SZXN1bHQsIHNlcnZlckluZm8pIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBuZXcgVG9rZW5FbnRyeSh0b2tlblJlc3VsdCwgc2VydmVySW5mbywgdG9rZW5SZXN1bHQuZXhwaXJlc0luU2Vjb25kcyA/PyBERUZBVUxUX0VYUElSQVRJT05fU0VDUyk7XG4gICAgICAgIHRoaXMuZW50cmllcy5zZXQodGhpcy5jYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSwgZW50cnkpO1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFbnRyeShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUodGhpcy5jYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBnZXRFbnRyeShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuZ2V0KHRoaXMuY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYWxsIGV4cGlyZWQgZW50cmllcyBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFeHBpcmVkRW50cmllcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBlbnRyeV0gb2YgdGhpcy5lbnRyaWVzKSB7XG4gICAgICAgICAgICBpZiAoIWVudHJ5LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjYWNoZSBrZXkgZnJvbSB0aGUgYWRkcmVzcyBhbmQgdXNlcm5hbWUuXG4gICAgICovXG4gICAgY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoZWRDYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKTtcbiAgICB9XG59XG5leHBvcnRzLlRva2VuRW50cnlDYWNoZSA9IFRva2VuRW50cnlDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuX2VudHJ5X2NhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/plain.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Plain = void 0;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: 'PLAIN',\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined);\n    }\n}\nexports.Plain = Plain;\n//# sourceMappingURL=plain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3BsYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixlQUFlLG1CQUFPLENBQUMsNERBQVk7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsb0ZBQWlCO0FBQ2pEO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckMsNkRBQTZELFNBQVMsTUFBTSxTQUFTO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9wbGFpbi5qcz81MWVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QbGFpbiA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9ic29uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgUGxhaW4gZXh0ZW5kcyBhdXRoX3Byb3ZpZGVyXzEuQXV0aFByb3ZpZGVyIHtcbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiwgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQgfSA9IGNyZWRlbnRpYWxzO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IGJzb25fMS5CaW5hcnkoQnVmZmVyLmZyb20oYFxceDAwJHt1c2VybmFtZX1cXHgwMCR7cGFzc3dvcmR9YCkpO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICAgICAgbWVjaGFuaXNtOiAnUExBSU4nLFxuICAgICAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgICAgICAgIGF1dG9BdXRob3JpemU6IDFcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kKCgwLCB1dGlsc18xLm5zKSgnJGV4dGVybmFsLiRjbWQnKSwgY29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnRzLlBsYWluID0gUGxhaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGFpbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/providers.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */\nexports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: 'MONGODB-AWS',\n    MONGODB_CR: 'MONGODB-CR',\n    MONGODB_DEFAULT: 'DEFAULT',\n    MONGODB_GSSAPI: 'GSSAPI',\n    MONGODB_PLAIN: 'PLAIN',\n    MONGODB_SCRAM_SHA1: 'SCRAM-SHA-1',\n    MONGODB_SCRAM_SHA256: 'SCRAM-SHA-256',\n    MONGODB_X509: 'MONGODB-X509',\n    /** @experimental */\n    MONGODB_OIDC: 'MONGODB-OIDC'\n});\n/** @internal */\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]);\n//# sourceMappingURL=providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3Byb3ZpZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0MsR0FBRyxxQkFBcUI7QUFDNUQ7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3Byb3ZpZGVycy5qcz8yMWMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BVVRIX01FQ0hTX0FVVEhfU1JDX0VYVEVSTkFMID0gZXhwb3J0cy5BdXRoTWVjaGFuaXNtID0gdm9pZCAwO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuQXV0aE1lY2hhbmlzbSA9IE9iamVjdC5mcmVlemUoe1xuICAgIE1PTkdPREJfQVdTOiAnTU9OR09EQi1BV1MnLFxuICAgIE1PTkdPREJfQ1I6ICdNT05HT0RCLUNSJyxcbiAgICBNT05HT0RCX0RFRkFVTFQ6ICdERUZBVUxUJyxcbiAgICBNT05HT0RCX0dTU0FQSTogJ0dTU0FQSScsXG4gICAgTU9OR09EQl9QTEFJTjogJ1BMQUlOJyxcbiAgICBNT05HT0RCX1NDUkFNX1NIQTE6ICdTQ1JBTS1TSEEtMScsXG4gICAgTU9OR09EQl9TQ1JBTV9TSEEyNTY6ICdTQ1JBTS1TSEEtMjU2JyxcbiAgICBNT05HT0RCX1g1MDk6ICdNT05HT0RCLVg1MDknLFxuICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgTU9OR09EQl9PSURDOiAnTU9OR09EQi1PSURDJ1xufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkFVVEhfTUVDSFNfQVVUSF9TUkNfRVhURVJOQUwgPSBuZXcgU2V0KFtcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9HU1NBUEksXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfQVdTLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX09JREMsXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfWDUwOVxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/scram.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = __webpack_require__(/*! @mongodb-js/saslprep */ \"(ssr)/./node_modules/@mongodb-js/saslprep/dist/node.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod) {\n        super();\n        this.cryptoMethod = cryptoMethod || 'sha1';\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const nonce = await (0, utils_1.randomBytes)(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace('=', '=3D').replace(',', '=2C');\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from('n=', 'utf8'),\n        Buffer.from(username, 'utf8'),\n        Buffer.from(',r=', 'utf8'),\n        Buffer.from(nonce.toString('base64'), 'utf8')\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),\n        autoAuthorize: 1,\n        options: { skipEmptyExchange: true }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === 'sha256' ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload)\n        ? new bson_1.Binary(response.payload)\n        : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith('nonce')) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString('utf8'),\n        withoutProof\n    ].join(',');\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [withoutProof, clientProof].join(',');\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {\n        throw new error_1.MongoRuntimeError('Server returned an invalid signature');\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.command((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString('utf8');\n    const dict = {};\n    const parts = payloadStr.split(',');\n    for (let i = 0; i < parts.length; i++) {\n        const valueParts = (parts[i].match(/^([^=]*)=(.*)$/) ?? []).slice(1);\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Username must be a string');\n    }\n    if (typeof password !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Password must be a string');\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash('md5');\n    }\n    catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, 'utf8');\n    return md5.digest('hex');\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString('base64');\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [data, salt.toString('base64'), iterations].join('_');\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === 'function') {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for (let i = 0; i < lhs.length; i++) {\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor() {\n        super('sha1');\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor() {\n        super('sha256');\n    }\n}\nexports.ScramSHA256 = ScramSHA256;\n//# sourceMappingURL=scram.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/x509.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.X509 = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        return { ...handshakeDoc, speculativeAuthenticate: x509AuthenticateCommand(credentials) };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.command((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n}\n//# sourceMappingURL=x509.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3g1MDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDLHdCQUF3QixtQkFBTyxDQUFDLG9GQUFpQjtBQUNqRDtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3g1MDkuanM/NGJiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuWDUwOSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbmNsYXNzIFg1MDkgZXh0ZW5kcyBhdXRoX3Byb3ZpZGVyXzEuQXV0aFByb3ZpZGVyIHtcbiAgICBhc3luYyBwcmVwYXJlKGhhbmRzaGFrZURvYywgYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyAuLi5oYW5kc2hha2VEb2MsIHNwZWN1bGF0aXZlQXV0aGVudGljYXRlOiB4NTA5QXV0aGVudGljYXRlQ29tbWFuZChjcmVkZW50aWFscykgfTtcbiAgICB9XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gYXV0aENvbnRleHQuY29ubmVjdGlvbjtcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBhdXRoQ29udGV4dC5jcmVkZW50aWFscztcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXV0aENvbnRleHQucmVzcG9uc2U7XG4gICAgICAgIGlmIChyZXNwb25zZT8uc3BlY3VsYXRpdmVBdXRoZW50aWNhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKCckZXh0ZXJuYWwuJGNtZCcpLCB4NTA5QXV0aGVudGljYXRlQ29tbWFuZChjcmVkZW50aWFscyksIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5YNTA5ID0gWDUwOTtcbmZ1bmN0aW9uIHg1MDlBdXRoZW50aWNhdGVDb21tYW5kKGNyZWRlbnRpYWxzKSB7XG4gICAgY29uc3QgY29tbWFuZCA9IHsgYXV0aGVudGljYXRlOiAxLCBtZWNoYW5pc206ICdNT05HT0RCLVg1MDknIH07XG4gICAgaWYgKGNyZWRlbnRpYWxzLnVzZXJuYW1lKSB7XG4gICAgICAgIGNvbW1hbmQudXNlciA9IGNyZWRlbnRpYWxzLnVzZXJuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gY29tbWFuZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXg1MDkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/command_monitoring_events.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */\n    constructor(connection, command, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, reply, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, error, started, serverConnectionId) {\n        /** @internal */\n        this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n        this.serverConnectionId = serverConnectionId;\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set([\n    'authenticate',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'createUser',\n    'updateUser',\n    'copydbgetnonce',\n    'copydbsaslstart',\n    'copydb'\n]);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = (commandDoc) => Object.keys(commandDoc)[0];\nconst namespace = (command) => command.ns;\nconst collectionName = (command) => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) ||\n    (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: 'filter',\n    $orderby: 'sort',\n    $hint: 'hint',\n    $comment: 'comment',\n    $maxScan: 'maxScan',\n    $max: 'max',\n    $min: 'min',\n    $returnKey: 'returnKey',\n    $showDiskLoc: 'showRecordId',\n    $maxTimeMS: 'maxTimeMS',\n    $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: 'skip',\n    numberToReturn: 'batchSize',\n    returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'partial',\n    'exhaust'\n];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(command.command);\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === 'admin.$cmd') {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        }\n        else {\n            // up-convert legacy find command\n            result = { find: collectionName(command) };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n            }\n        });\n        OP_QUERY_KEYS.forEach(key => {\n            if (command[key]) {\n                result[key] = command[key];\n            }\n        });\n        if (command.pre32Limit != null) {\n            result.limit = command.pre32Limit;\n        }\n        if (command.query.$explain) {\n            return { explain: result };\n        }\n        return result;\n    }\n    const clonedQuery = {};\n    const clonedCommand = {};\n    if (command.query) {\n        for (const k in command.query) {\n            clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n        }\n        clonedCommand.query = clonedQuery;\n    }\n    for (const k in command) {\n        if (k === 'query')\n            continue;\n        clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n    if (!reply) {\n        return reply;\n    }\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n    }\n    // is this a legacy find command?\n    if (command.query && command.query.$query != null) {\n        return {\n            ok: 1,\n            cursor: {\n                id: (0, utils_1.deepCopy)(reply.cursorId),\n                ns: namespace(command),\n                firstBatch: (0, utils_1.deepCopy)(reply.documents)\n            }\n        };\n    }\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if ('id' in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n}\n//# sourceMappingURL=command_monitoring_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/commands.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/commands.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.OpQueryResponse = exports.OpQueryRequest = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nclass OpQueryRequest {\n    constructor(databaseName, query, options) {\n        this.databaseName = databaseName;\n        this.query = query;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== 'string') {\n            throw new error_1.MongoRuntimeError('Database name must be a string for a query');\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic options\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */\nclass OpQueryResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.documents = new Array(0);\n        /** moreToCome is an OP_MSG only concept */\n        this.moreToCome = false;\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        let bsonSize;\n        // Set up the options\n        const _options = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp\n        };\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        // Preallocate document array\n        this.documents = new Array(this.numberReturned);\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            bsonSize =\n                this.data[this.index] |\n                    (this.data[this.index + 1] << 8) |\n                    (this.data[this.index + 2] << 16) |\n                    (this.data[this.index + 3] << 24);\n            // If we have raw results specified slice the return document\n            if (raw) {\n                this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n            }\n            else {\n                this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n            }\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            _options.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], _options);\n            this.documents = [doc];\n        }\n        // Set parsed\n        this.parsed = true;\n    }\n}\nexports.OpQueryResponse = OpQueryResponse;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass OpMsgRequest {\n    constructor(databaseName, command, options) {\n        this.databaseName = databaseName;\n        this.command = command;\n        this.options = options;\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic options\n        this.command.$db = databaseName;\n        if (options.readPreference && options.readPreference.mode !== read_preference_1.ReadPreference.PRIMARY) {\n            this.command.$readPreference = options.readPreference.toJSON();\n        }\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome || false;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeDocumentSegment(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    makeDocumentSegment(buffers, document) {\n        const payloadTypeBuffer = Buffer.alloc(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length;\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */\nclass OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n        this.documents = [];\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        this.index = 4;\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        const validation = this.parseBsonSerializationOptions(options);\n        // Set up the options\n        const bsonOptions = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp,\n            validation\n            // Due to the strictness of the BSON libraries validation option we need this cast\n        };\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.slice(this.index, this.index + bsonSize);\n                this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            bsonOptions.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], bsonOptions);\n            this.documents = [doc];\n        }\n        this.parsed = true;\n    }\n    parseBsonSerializationOptions({ enableUtf8Validation }) {\n        if (enableUtf8Validation === false) {\n            return { utf8: false };\n        }\n        return { utf8: { writeErrors: false } };\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */\nclass OpCompressedRequest {\n    constructor(command, options) {\n        this.command = command;\n        this.options = options;\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [msgHeader, compressionDetails, compressedMessage];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest;\n//# sourceMappingURL=commands.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9jb21tYW5kcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyxxQkFBcUIsR0FBRyxvQkFBb0IsR0FBRyx1QkFBdUIsR0FBRyxzQkFBc0I7QUFDN0gsYUFBYSxtQkFBTyxDQUFDLHlEQUFTO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLCtFQUFvQjtBQUN0RCxzQkFBc0IsbUJBQU8sQ0FBQyx1R0FBNkI7QUFDM0Qsb0JBQW9CLG1CQUFPLENBQUMsbUdBQTJCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDLGdEQUFnRDtBQUNoRCxtQ0FBbUM7QUFDbkMscURBQXFEO0FBQ3JELHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxzQkFBc0I7QUFDMUQ7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhHQUE4RztBQUM5RywyREFBMkQ7QUFDM0Qsc0NBQXNDO0FBQ3RDLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FLDBFQUEwRTtBQUMxRSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9jb21tYW5kcy5qcz9hOTI2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcENvbXByZXNzZWRSZXF1ZXN0ID0gZXhwb3J0cy5PcE1zZ1Jlc3BvbnNlID0gZXhwb3J0cy5PcE1zZ1JlcXVlc3QgPSBleHBvcnRzLk9wUXVlcnlSZXNwb25zZSA9IGV4cG9ydHMuT3BRdWVyeVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBCU09OID0gcmVxdWlyZShcIi4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuY29uc3QgY29tcHJlc3Npb25fMSA9IHJlcXVpcmUoXCIuL3dpcmVfcHJvdG9jb2wvY29tcHJlc3Npb25cIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL3dpcmVfcHJvdG9jb2wvY29uc3RhbnRzXCIpO1xuLy8gSW5jcmVtZW50aW5nIHJlcXVlc3QgaWRcbmxldCBfcmVxdWVzdElkID0gMDtcbi8vIFF1ZXJ5IGZsYWdzXG5jb25zdCBPUFRTX1RBSUxBQkxFX0NVUlNPUiA9IDI7XG5jb25zdCBPUFRTX1NFQ09OREFSWSA9IDQ7XG5jb25zdCBPUFRTX09QTE9HX1JFUExBWSA9IDg7XG5jb25zdCBPUFRTX05PX0NVUlNPUl9USU1FT1VUID0gMTY7XG5jb25zdCBPUFRTX0FXQUlUX0RBVEEgPSAzMjtcbmNvbnN0IE9QVFNfRVhIQVVTVCA9IDY0O1xuY29uc3QgT1BUU19QQVJUSUFMID0gMTI4O1xuLy8gUmVzcG9uc2UgZmxhZ3NcbmNvbnN0IENVUlNPUl9OT1RfRk9VTkQgPSAxO1xuY29uc3QgUVVFUllfRkFJTFVSRSA9IDI7XG5jb25zdCBTSEFSRF9DT05GSUdfU1RBTEUgPSA0O1xuY29uc3QgQVdBSVRfQ0FQQUJMRSA9IDg7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIFFVRVJZXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiogQGludGVybmFsICovXG5jbGFzcyBPcFF1ZXJ5UmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoZGF0YWJhc2VOYW1lLCBxdWVyeSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmRhdGFiYXNlTmFtZSA9IGRhdGFiYXNlTmFtZTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICAvLyBCYXNpYyBvcHRpb25zIG5lZWRlZCB0byBiZSBwYXNzZWQgaW5cbiAgICAgICAgLy8gVE9ETyhOT0RFLTM0ODMpOiBSZXBsYWNlIHdpdGggTW9uZ29Db21tYW5kRXJyb3JcbiAgICAgICAgY29uc3QgbnMgPSBgJHtkYXRhYmFzZU5hbWV9LiRjbWRgO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFiYXNlTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdEYXRhYmFzZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgZm9yIGEgcXVlcnknKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IFJlcGxhY2Ugd2l0aCBNb25nb0NvbW1hbmRFcnJvclxuICAgICAgICBpZiAocXVlcnkgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIHF1ZXJ5IGRvY3VtZW50IG11c3QgYmUgc3BlY2lmaWVkIGZvciBxdWVyeScpO1xuICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IHdlIGFyZSBub3QgcGFzc2luZyAweDAwIGluIHRoZSBjb2xsZWN0aW9uIG5hbWVcbiAgICAgICAgaWYgKG5zLmluZGV4T2YoJ1xceDAwJykgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IFVzZSBNb25nb05hbWVzcGFjZSBzdGF0aWMgbWV0aG9kXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignTmFtZXNwYWNlIGNhbm5vdCBjb250YWluIGEgbnVsbCBjaGFyYWN0ZXInKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBCYXNpYyBvcHRpb25zXG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgLy8gQWRkaXRpb25hbCBvcHRpb25zXG4gICAgICAgIHRoaXMubnVtYmVyVG9Ta2lwID0gb3B0aW9ucy5udW1iZXJUb1NraXAgfHwgMDtcbiAgICAgICAgdGhpcy5udW1iZXJUb1JldHVybiA9IG9wdGlvbnMubnVtYmVyVG9SZXR1cm4gfHwgMDtcbiAgICAgICAgdGhpcy5yZXR1cm5GaWVsZFNlbGVjdG9yID0gb3B0aW9ucy5yZXR1cm5GaWVsZFNlbGVjdG9yIHx8IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SWQgPSBvcHRpb25zLnJlcXVlc3RJZCA/PyBPcFF1ZXJ5UmVxdWVzdC5nZXRSZXF1ZXN0SWQoKTtcbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBwcmUtMy4yIGZpbmQgY29tbWFuZHMsIGRlbGV0ZSBBU0FQXG4gICAgICAgIHRoaXMucHJlMzJMaW1pdCA9IG9wdGlvbnMucHJlMzJMaW1pdDtcbiAgICAgICAgLy8gU2VyaWFsaXphdGlvbiBvcHRpb25cbiAgICAgICAgdGhpcy5zZXJpYWxpemVGdW5jdGlvbnMgPVxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA6IGZhbHNlO1xuICAgICAgICB0aGlzLmlnbm9yZVVuZGVmaW5lZCA9XG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkIDogZmFsc2U7XG4gICAgICAgIHRoaXMubWF4QnNvblNpemUgPSBvcHRpb25zLm1heEJzb25TaXplIHx8IDEwMjQgKiAxMDI0ICogMTY7XG4gICAgICAgIHRoaXMuY2hlY2tLZXlzID0gdHlwZW9mIG9wdGlvbnMuY2hlY2tLZXlzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmNoZWNrS2V5cyA6IGZhbHNlO1xuICAgICAgICB0aGlzLmJhdGNoU2l6ZSA9IHRoaXMubnVtYmVyVG9SZXR1cm47XG4gICAgICAgIC8vIEZsYWdzXG4gICAgICAgIHRoaXMudGFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlPayA9IHR5cGVvZiBvcHRpb25zLnNlY29uZGFyeU9rID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNlY29uZGFyeU9rIDogZmFsc2U7XG4gICAgICAgIHRoaXMub3Bsb2dSZXBsYXkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub0N1cnNvclRpbWVvdXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hd2FpdERhdGEgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5leGhhdXN0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGFydGlhbCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKiogQXNzaWduIG5leHQgcmVxdWVzdCBJZC4gKi9cbiAgICBpbmNSZXF1ZXN0SWQoKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdElkID0gX3JlcXVlc3RJZCsrO1xuICAgIH1cbiAgICAvKiogUGVlayBuZXh0IHJlcXVlc3QgSWQuICovXG4gICAgbmV4dFJlcXVlc3RJZCgpIHtcbiAgICAgICAgcmV0dXJuIF9yZXF1ZXN0SWQgKyAxO1xuICAgIH1cbiAgICAvKiogSW5jcmVtZW50IHRoZW4gcmV0dXJuIG5leHQgcmVxdWVzdCBJZC4gKi9cbiAgICBzdGF0aWMgZ2V0UmVxdWVzdElkKCkge1xuICAgICAgICByZXR1cm4gKytfcmVxdWVzdElkO1xuICAgIH1cbiAgICAvLyBVc2VzIGEgc2luZ2xlIGFsbG9jYXRlZCBidWZmZXIgZm9yIHRoZSBwcm9jZXNzLCBhdm9pZGluZyBtdWx0aXBsZSBtZW1vcnkgYWxsb2NhdGlvbnNcbiAgICB0b0JpbigpIHtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IFtdO1xuICAgICAgICBsZXQgcHJvamVjdGlvbiA9IG51bGw7XG4gICAgICAgIC8vIFNldCB1cCB0aGUgZmxhZ3NcbiAgICAgICAgbGV0IGZsYWdzID0gMDtcbiAgICAgICAgaWYgKHRoaXMudGFpbGFibGUpIHtcbiAgICAgICAgICAgIGZsYWdzIHw9IE9QVFNfVEFJTEFCTEVfQ1VSU09SO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlY29uZGFyeU9rKSB7XG4gICAgICAgICAgICBmbGFncyB8PSBPUFRTX1NFQ09OREFSWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcGxvZ1JlcGxheSkge1xuICAgICAgICAgICAgZmxhZ3MgfD0gT1BUU19PUExPR19SRVBMQVk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubm9DdXJzb3JUaW1lb3V0KSB7XG4gICAgICAgICAgICBmbGFncyB8PSBPUFRTX05PX0NVUlNPUl9USU1FT1VUO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF3YWl0RGF0YSkge1xuICAgICAgICAgICAgZmxhZ3MgfD0gT1BUU19BV0FJVF9EQVRBO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4aGF1c3QpIHtcbiAgICAgICAgICAgIGZsYWdzIHw9IE9QVFNfRVhIQVVTVDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBmbGFncyB8PSBPUFRTX1BBUlRJQUw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYmF0Y2hTaXplIGlzIGRpZmZlcmVudCB0byB0aGlzLm51bWJlclRvUmV0dXJuXG4gICAgICAgIGlmICh0aGlzLmJhdGNoU2l6ZSAhPT0gdGhpcy5udW1iZXJUb1JldHVybilcbiAgICAgICAgICAgIHRoaXMubnVtYmVyVG9SZXR1cm4gPSB0aGlzLmJhdGNoU2l6ZTtcbiAgICAgICAgLy8gQWxsb2NhdGUgd3JpdGUgcHJvdG9jb2wgaGVhZGVyIGJ1ZmZlclxuICAgICAgICBjb25zdCBoZWFkZXIgPSBCdWZmZXIuYWxsb2MoNCAqIDQgKyAvLyBIZWFkZXJcbiAgICAgICAgICAgIDQgKyAvLyBGbGFnc1xuICAgICAgICAgICAgQnVmZmVyLmJ5dGVMZW5ndGgodGhpcy5ucykgK1xuICAgICAgICAgICAgMSArIC8vIG5hbWVzcGFjZVxuICAgICAgICAgICAgNCArIC8vIG51bWJlclRvU2tpcFxuICAgICAgICAgICAgNCAvLyBudW1iZXJUb1JldHVyblxuICAgICAgICApO1xuICAgICAgICAvLyBBZGQgaGVhZGVyIHRvIGJ1ZmZlcnNcbiAgICAgICAgYnVmZmVycy5wdXNoKGhlYWRlcik7XG4gICAgICAgIC8vIFNlcmlhbGl6ZSB0aGUgcXVlcnlcbiAgICAgICAgY29uc3QgcXVlcnkgPSBCU09OLnNlcmlhbGl6ZSh0aGlzLnF1ZXJ5LCB7XG4gICAgICAgICAgICBjaGVja0tleXM6IHRoaXMuY2hlY2tLZXlzLFxuICAgICAgICAgICAgc2VyaWFsaXplRnVuY3Rpb25zOiB0aGlzLnNlcmlhbGl6ZUZ1bmN0aW9ucyxcbiAgICAgICAgICAgIGlnbm9yZVVuZGVmaW5lZDogdGhpcy5pZ25vcmVVbmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFkZCBxdWVyeSBkb2N1bWVudFxuICAgICAgICBidWZmZXJzLnB1c2gocXVlcnkpO1xuICAgICAgICBpZiAodGhpcy5yZXR1cm5GaWVsZFNlbGVjdG9yICYmIE9iamVjdC5rZXlzKHRoaXMucmV0dXJuRmllbGRTZWxlY3RvcikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gU2VyaWFsaXplIHRoZSBwcm9qZWN0aW9uIGRvY3VtZW50XG4gICAgICAgICAgICBwcm9qZWN0aW9uID0gQlNPTi5zZXJpYWxpemUodGhpcy5yZXR1cm5GaWVsZFNlbGVjdG9yLCB7XG4gICAgICAgICAgICAgICAgY2hlY2tLZXlzOiB0aGlzLmNoZWNrS2V5cyxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVGdW5jdGlvbnM6IHRoaXMuc2VyaWFsaXplRnVuY3Rpb25zLFxuICAgICAgICAgICAgICAgIGlnbm9yZVVuZGVmaW5lZDogdGhpcy5pZ25vcmVVbmRlZmluZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQWRkIHByb2plY3Rpb24gZG9jdW1lbnRcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChwcm9qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUb3RhbCBtZXNzYWdlIHNpemVcbiAgICAgICAgY29uc3QgdG90YWxMZW5ndGggPSBoZWFkZXIubGVuZ3RoICsgcXVlcnkubGVuZ3RoICsgKHByb2plY3Rpb24gPyBwcm9qZWN0aW9uLmxlbmd0aCA6IDApO1xuICAgICAgICAvLyBTZXQgdXAgdGhlIGluZGV4XG4gICAgICAgIGxldCBpbmRleCA9IDQ7XG4gICAgICAgIC8vIFdyaXRlIHRvdGFsIGRvY3VtZW50IGxlbmd0aFxuICAgICAgICBoZWFkZXJbM10gPSAodG90YWxMZW5ndGggPj4gMjQpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyWzJdID0gKHRvdGFsTGVuZ3RoID4+IDE2KSAmIDB4ZmY7XG4gICAgICAgIGhlYWRlclsxXSA9ICh0b3RhbExlbmd0aCA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIGhlYWRlclswXSA9IHRvdGFsTGVuZ3RoICYgMHhmZjtcbiAgICAgICAgLy8gV3JpdGUgaGVhZGVyIGluZm9ybWF0aW9uIHJlcXVlc3RJZFxuICAgICAgICBoZWFkZXJbaW5kZXggKyAzXSA9ICh0aGlzLnJlcXVlc3RJZCA+PiAyNCkgJiAweGZmO1xuICAgICAgICBoZWFkZXJbaW5kZXggKyAyXSA9ICh0aGlzLnJlcXVlc3RJZCA+PiAxNikgJiAweGZmO1xuICAgICAgICBoZWFkZXJbaW5kZXggKyAxXSA9ICh0aGlzLnJlcXVlc3RJZCA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIGhlYWRlcltpbmRleF0gPSB0aGlzLnJlcXVlc3RJZCAmIDB4ZmY7XG4gICAgICAgIGluZGV4ID0gaW5kZXggKyA0O1xuICAgICAgICAvLyBXcml0ZSBoZWFkZXIgaW5mb3JtYXRpb24gcmVzcG9uc2VUb1xuICAgICAgICBoZWFkZXJbaW5kZXggKyAzXSA9ICgwID4+IDI0KSAmIDB4ZmY7XG4gICAgICAgIGhlYWRlcltpbmRleCArIDJdID0gKDAgPj4gMTYpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgMV0gPSAoMCA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIGhlYWRlcltpbmRleF0gPSAwICYgMHhmZjtcbiAgICAgICAgaW5kZXggPSBpbmRleCArIDQ7XG4gICAgICAgIC8vIFdyaXRlIGhlYWRlciBpbmZvcm1hdGlvbiBPUF9RVUVSWVxuICAgICAgICBoZWFkZXJbaW5kZXggKyAzXSA9IChjb25zdGFudHNfMS5PUF9RVUVSWSA+PiAyNCkgJiAweGZmO1xuICAgICAgICBoZWFkZXJbaW5kZXggKyAyXSA9IChjb25zdGFudHNfMS5PUF9RVUVSWSA+PiAxNikgJiAweGZmO1xuICAgICAgICBoZWFkZXJbaW5kZXggKyAxXSA9IChjb25zdGFudHNfMS5PUF9RVUVSWSA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIGhlYWRlcltpbmRleF0gPSBjb25zdGFudHNfMS5PUF9RVUVSWSAmIDB4ZmY7XG4gICAgICAgIGluZGV4ID0gaW5kZXggKyA0O1xuICAgICAgICAvLyBXcml0ZSBoZWFkZXIgaW5mb3JtYXRpb24gZmxhZ3NcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgM10gPSAoZmxhZ3MgPj4gMjQpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgMl0gPSAoZmxhZ3MgPj4gMTYpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgMV0gPSAoZmxhZ3MgPj4gOCkgJiAweGZmO1xuICAgICAgICBoZWFkZXJbaW5kZXhdID0gZmxhZ3MgJiAweGZmO1xuICAgICAgICBpbmRleCA9IGluZGV4ICsgNDtcbiAgICAgICAgLy8gV3JpdGUgY29sbGVjdGlvbiBuYW1lXG4gICAgICAgIGluZGV4ID0gaW5kZXggKyBoZWFkZXIud3JpdGUodGhpcy5ucywgaW5kZXgsICd1dGY4JykgKyAxO1xuICAgICAgICBoZWFkZXJbaW5kZXggLSAxXSA9IDA7XG4gICAgICAgIC8vIFdyaXRlIGhlYWRlciBpbmZvcm1hdGlvbiBmbGFncyBudW1iZXJUb1NraXBcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgM10gPSAodGhpcy5udW1iZXJUb1NraXAgPj4gMjQpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgMl0gPSAodGhpcy5udW1iZXJUb1NraXAgPj4gMTYpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgMV0gPSAodGhpcy5udW1iZXJUb1NraXAgPj4gOCkgJiAweGZmO1xuICAgICAgICBoZWFkZXJbaW5kZXhdID0gdGhpcy5udW1iZXJUb1NraXAgJiAweGZmO1xuICAgICAgICBpbmRleCA9IGluZGV4ICsgNDtcbiAgICAgICAgLy8gV3JpdGUgaGVhZGVyIGluZm9ybWF0aW9uIGZsYWdzIG51bWJlclRvUmV0dXJuXG4gICAgICAgIGhlYWRlcltpbmRleCArIDNdID0gKHRoaXMubnVtYmVyVG9SZXR1cm4gPj4gMjQpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyW2luZGV4ICsgMl0gPSAodGhpcy5udW1iZXJUb1JldHVybiA+PiAxNikgJiAweGZmO1xuICAgICAgICBoZWFkZXJbaW5kZXggKyAxXSA9ICh0aGlzLm51bWJlclRvUmV0dXJuID4+IDgpICYgMHhmZjtcbiAgICAgICAgaGVhZGVyW2luZGV4XSA9IHRoaXMubnVtYmVyVG9SZXR1cm4gJiAweGZmO1xuICAgICAgICBpbmRleCA9IGluZGV4ICsgNDtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBidWZmZXJzXG4gICAgICAgIHJldHVybiBidWZmZXJzO1xuICAgIH1cbn1cbmV4cG9ydHMuT3BRdWVyeVJlcXVlc3QgPSBPcFF1ZXJ5UmVxdWVzdDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIE9wUXVlcnlSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgbXNnSGVhZGVyLCBtc2dCb2R5LCBvcHRzKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRzID0gbmV3IEFycmF5KDApO1xuICAgICAgICAvKiogbW9yZVRvQ29tZSBpcyBhbiBPUF9NU0cgb25seSBjb25jZXB0ICovXG4gICAgICAgIHRoaXMubW9yZVRvQ29tZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBhcnNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJhdyA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuZGF0YSA9IG1zZ0JvZHk7XG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHMgPz8ge1xuICAgICAgICAgICAgdXNlQmlnSW50NjQ6IGZhbHNlLFxuICAgICAgICAgICAgcHJvbW90ZUxvbmdzOiB0cnVlLFxuICAgICAgICAgICAgcHJvbW90ZVZhbHVlczogdHJ1ZSxcbiAgICAgICAgICAgIHByb21vdGVCdWZmZXJzOiBmYWxzZSxcbiAgICAgICAgICAgIGJzb25SZWdFeHA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIC8vIFJlYWQgdGhlIG1lc3NhZ2UgaGVhZGVyXG4gICAgICAgIHRoaXMubGVuZ3RoID0gbXNnSGVhZGVyLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SWQgPSBtc2dIZWFkZXIucmVxdWVzdElkO1xuICAgICAgICB0aGlzLnJlc3BvbnNlVG8gPSBtc2dIZWFkZXIucmVzcG9uc2VUbztcbiAgICAgICAgdGhpcy5vcENvZGUgPSBtc2dIZWFkZXIub3BDb2RlO1xuICAgICAgICB0aGlzLmZyb21Db21wcmVzc2VkID0gbXNnSGVhZGVyLmZyb21Db21wcmVzc2VkO1xuICAgICAgICAvLyBGbGFnIHZhbHVlc1xuICAgICAgICB0aGlzLnVzZUJpZ0ludDY0ID0gdHlwZW9mIHRoaXMub3B0cy51c2VCaWdJbnQ2NCA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRzLnVzZUJpZ0ludDY0IDogZmFsc2U7XG4gICAgICAgIHRoaXMucHJvbW90ZUxvbmdzID0gdHlwZW9mIHRoaXMub3B0cy5wcm9tb3RlTG9uZ3MgPT09ICdib29sZWFuJyA/IHRoaXMub3B0cy5wcm9tb3RlTG9uZ3MgOiB0cnVlO1xuICAgICAgICB0aGlzLnByb21vdGVWYWx1ZXMgPVxuICAgICAgICAgICAgdHlwZW9mIHRoaXMub3B0cy5wcm9tb3RlVmFsdWVzID09PSAnYm9vbGVhbicgPyB0aGlzLm9wdHMucHJvbW90ZVZhbHVlcyA6IHRydWU7XG4gICAgICAgIHRoaXMucHJvbW90ZUJ1ZmZlcnMgPVxuICAgICAgICAgICAgdHlwZW9mIHRoaXMub3B0cy5wcm9tb3RlQnVmZmVycyA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRzLnByb21vdGVCdWZmZXJzIDogZmFsc2U7XG4gICAgICAgIHRoaXMuYnNvblJlZ0V4cCA9IHR5cGVvZiB0aGlzLm9wdHMuYnNvblJlZ0V4cCA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRzLmJzb25SZWdFeHAgOiBmYWxzZTtcbiAgICB9XG4gICAgaXNQYXJzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZDtcbiAgICB9XG4gICAgcGFyc2Uob3B0aW9ucykge1xuICAgICAgICAvLyBEb24ndCBwYXJzZSBhZ2FpbiBpZiBub3QgbmVlZGVkXG4gICAgICAgIGlmICh0aGlzLnBhcnNlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIC8vIEFsbG93IHRoZSByZXR1cm4gb2YgcmF3IGRvY3VtZW50cyBpbnN0ZWFkIG9mIHBhcnNpbmdcbiAgICAgICAgY29uc3QgcmF3ID0gb3B0aW9ucy5yYXcgfHwgZmFsc2U7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50c1JldHVybmVkSW4gPSBvcHRpb25zLmRvY3VtZW50c1JldHVybmVkSW4gfHwgbnVsbDtcbiAgICAgICAgY29uc3QgdXNlQmlnSW50NjQgPSBvcHRpb25zLnVzZUJpZ0ludDY0ID8/IHRoaXMub3B0cy51c2VCaWdJbnQ2NDtcbiAgICAgICAgY29uc3QgcHJvbW90ZUxvbmdzID0gb3B0aW9ucy5wcm9tb3RlTG9uZ3MgPz8gdGhpcy5vcHRzLnByb21vdGVMb25ncztcbiAgICAgICAgY29uc3QgcHJvbW90ZVZhbHVlcyA9IG9wdGlvbnMucHJvbW90ZVZhbHVlcyA/PyB0aGlzLm9wdHMucHJvbW90ZVZhbHVlcztcbiAgICAgICAgY29uc3QgcHJvbW90ZUJ1ZmZlcnMgPSBvcHRpb25zLnByb21vdGVCdWZmZXJzID8/IHRoaXMub3B0cy5wcm9tb3RlQnVmZmVycztcbiAgICAgICAgY29uc3QgYnNvblJlZ0V4cCA9IG9wdGlvbnMuYnNvblJlZ0V4cCA/PyB0aGlzLm9wdHMuYnNvblJlZ0V4cDtcbiAgICAgICAgbGV0IGJzb25TaXplO1xuICAgICAgICAvLyBTZXQgdXAgdGhlIG9wdGlvbnNcbiAgICAgICAgY29uc3QgX29wdGlvbnMgPSB7XG4gICAgICAgICAgICB1c2VCaWdJbnQ2NCxcbiAgICAgICAgICAgIHByb21vdGVMb25ncyxcbiAgICAgICAgICAgIHByb21vdGVWYWx1ZXMsXG4gICAgICAgICAgICBwcm9tb3RlQnVmZmVycyxcbiAgICAgICAgICAgIGJzb25SZWdFeHBcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUG9zaXRpb24gd2l0aGluIE9QX1JFUExZIGF0IHdoaWNoIGRvY3VtZW50cyBzdGFydFxuICAgICAgICAvLyAoU2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9tb25nb2RiLXdpcmUtcHJvdG9jb2wvI3dpcmUtb3AtcmVwbHkpXG4gICAgICAgIHRoaXMuaW5kZXggPSAyMDtcbiAgICAgICAgLy8gUmVhZCB0aGUgbWVzc2FnZSBib2R5XG4gICAgICAgIHRoaXMucmVzcG9uc2VGbGFncyA9IHRoaXMuZGF0YS5yZWFkSW50MzJMRSgwKTtcbiAgICAgICAgdGhpcy5jdXJzb3JJZCA9IG5ldyBCU09OLkxvbmcodGhpcy5kYXRhLnJlYWRJbnQzMkxFKDQpLCB0aGlzLmRhdGEucmVhZEludDMyTEUoOCkpO1xuICAgICAgICB0aGlzLnN0YXJ0aW5nRnJvbSA9IHRoaXMuZGF0YS5yZWFkSW50MzJMRSgxMik7XG4gICAgICAgIHRoaXMubnVtYmVyUmV0dXJuZWQgPSB0aGlzLmRhdGEucmVhZEludDMyTEUoMTYpO1xuICAgICAgICAvLyBQcmVhbGxvY2F0ZSBkb2N1bWVudCBhcnJheVxuICAgICAgICB0aGlzLmRvY3VtZW50cyA9IG5ldyBBcnJheSh0aGlzLm51bWJlclJldHVybmVkKTtcbiAgICAgICAgdGhpcy5jdXJzb3JOb3RGb3VuZCA9ICh0aGlzLnJlc3BvbnNlRmxhZ3MgJiBDVVJTT1JfTk9UX0ZPVU5EKSAhPT0gMDtcbiAgICAgICAgdGhpcy5xdWVyeUZhaWx1cmUgPSAodGhpcy5yZXNwb25zZUZsYWdzICYgUVVFUllfRkFJTFVSRSkgIT09IDA7XG4gICAgICAgIHRoaXMuc2hhcmRDb25maWdTdGFsZSA9ICh0aGlzLnJlc3BvbnNlRmxhZ3MgJiBTSEFSRF9DT05GSUdfU1RBTEUpICE9PSAwO1xuICAgICAgICB0aGlzLmF3YWl0Q2FwYWJsZSA9ICh0aGlzLnJlc3BvbnNlRmxhZ3MgJiBBV0FJVF9DQVBBQkxFKSAhPT0gMDtcbiAgICAgICAgLy8gUGFyc2UgQm9keVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtYmVyUmV0dXJuZWQ7IGkrKykge1xuICAgICAgICAgICAgYnNvblNpemUgPVxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVt0aGlzLmluZGV4XSB8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmRhdGFbdGhpcy5pbmRleCArIDFdIDw8IDgpIHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0YVt0aGlzLmluZGV4ICsgMl0gPDwgMTYpIHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGF0YVt0aGlzLmluZGV4ICsgM10gPDwgMjQpO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSByYXcgcmVzdWx0cyBzcGVjaWZpZWQgc2xpY2UgdGhlIHJldHVybiBkb2N1bWVudFxuICAgICAgICAgICAgaWYgKHJhdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRzW2ldID0gdGhpcy5kYXRhLnNsaWNlKHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyBic29uU2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50c1tpXSA9IEJTT04uZGVzZXJpYWxpemUodGhpcy5kYXRhLnNsaWNlKHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyBic29uU2l6ZSksIF9vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkanVzdCB0aGUgaW5kZXhcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmluZGV4ICsgYnNvblNpemU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBkb2N1bWVudHNSZXR1cm5lZEluICE9IG51bGwgJiYgcmF3KSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHNBc1JhdyA9IHt9O1xuICAgICAgICAgICAgZmllbGRzQXNSYXdbZG9jdW1lbnRzUmV0dXJuZWRJbl0gPSB0cnVlO1xuICAgICAgICAgICAgX29wdGlvbnMuZmllbGRzQXNSYXcgPSBmaWVsZHNBc1JhdztcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IEJTT04uZGVzZXJpYWxpemUodGhpcy5kb2N1bWVudHNbMF0sIF9vcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRzID0gW2RvY107XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHBhcnNlZFxuICAgICAgICB0aGlzLnBhcnNlZCA9IHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5PcFF1ZXJ5UmVzcG9uc2UgPSBPcFF1ZXJ5UmVzcG9uc2U7XG4vLyBJbXBsZW1lbnRhdGlvbiBvZiBPUF9NU0cgc3BlYzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL2Jsb2IvbWFzdGVyL3NvdXJjZS9tZXNzYWdlL09QX01TRy5yc3Rcbi8vXG4vLyBzdHJ1Y3QgU2VjdGlvbiB7XG4vLyAgIHVpbnQ4IHBheWxvYWRUeXBlO1xuLy8gICB1bmlvbiBwYXlsb2FkIHtcbi8vICAgICAgIGRvY3VtZW50ICBkb2N1bWVudDsgLy8gcGF5bG9hZFR5cGUgPT0gMFxuLy8gICAgICAgc3RydWN0IHNlcXVlbmNlIHsgLy8gcGF5bG9hZFR5cGUgPT0gMVxuLy8gICAgICAgICAgIGludDMyICAgICAgc2l6ZTtcbi8vICAgICAgICAgICBjc3RyaW5nICAgIGlkZW50aWZpZXI7XG4vLyAgICAgICAgICAgZG9jdW1lbnQqICBkb2N1bWVudHM7XG4vLyAgICAgICB9O1xuLy8gICB9O1xuLy8gfTtcbi8vIHN0cnVjdCBPUF9NU0cge1xuLy8gICBzdHJ1Y3QgTXNnSGVhZGVyIHtcbi8vICAgICAgIGludDMyICBtZXNzYWdlTGVuZ3RoO1xuLy8gICAgICAgaW50MzIgIHJlcXVlc3RJRDtcbi8vICAgICAgIGludDMyICByZXNwb25zZVRvO1xuLy8gICAgICAgaW50MzIgIG9wQ29kZSA9IDIwMTM7XG4vLyAgIH07XG4vLyAgIHVpbnQzMiAgICAgIGZsYWdCaXRzO1xuLy8gICBTZWN0aW9uKyAgICBzZWN0aW9ucztcbi8vICAgW3VpbnQzMiAgICAgY2hlY2tzdW07XVxuLy8gfTtcbi8vIE1zZyBGbGFnc1xuY29uc3QgT1BUU19DSEVDS1NVTV9QUkVTRU5UID0gMTtcbmNvbnN0IE9QVFNfTU9SRV9UT19DT01FID0gMjtcbmNvbnN0IE9QVFNfRVhIQVVTVF9BTExPV0VEID0gMSA8PCAxNjtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIE9wTXNnUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3IoZGF0YWJhc2VOYW1lLCBjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZGF0YWJhc2VOYW1lID0gZGF0YWJhc2VOYW1lO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAvLyBCYXNpYyBvcHRpb25zIG5lZWRlZCB0byBiZSBwYXNzZWQgaW5cbiAgICAgICAgaWYgKGNvbW1hbmQgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1F1ZXJ5IGRvY3VtZW50IG11c3QgYmUgc3BlY2lmaWVkIGZvciBxdWVyeScpO1xuICAgICAgICAvLyBCYXNpYyBvcHRpb25zXG4gICAgICAgIHRoaXMuY29tbWFuZC4kZGIgPSBkYXRhYmFzZU5hbWU7XG4gICAgICAgIGlmIChvcHRpb25zLnJlYWRQcmVmZXJlbmNlICYmIG9wdGlvbnMucmVhZFByZWZlcmVuY2UubW9kZSAhPT0gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UuUFJJTUFSWSkge1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kLiRyZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2UudG9KU09OKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIGVtcHR5IG9wdGlvbnNcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgLy8gQWRkaXRpb25hbCBvcHRpb25zXG4gICAgICAgIHRoaXMucmVxdWVzdElkID0gb3B0aW9ucy5yZXF1ZXN0SWQgPyBvcHRpb25zLnJlcXVlc3RJZCA6IE9wTXNnUmVxdWVzdC5nZXRSZXF1ZXN0SWQoKTtcbiAgICAgICAgLy8gU2VyaWFsaXphdGlvbiBvcHRpb25cbiAgICAgICAgdGhpcy5zZXJpYWxpemVGdW5jdGlvbnMgPVxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA6IGZhbHNlO1xuICAgICAgICB0aGlzLmlnbm9yZVVuZGVmaW5lZCA9XG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkIDogZmFsc2U7XG4gICAgICAgIHRoaXMuY2hlY2tLZXlzID0gdHlwZW9mIG9wdGlvbnMuY2hlY2tLZXlzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmNoZWNrS2V5cyA6IGZhbHNlO1xuICAgICAgICB0aGlzLm1heEJzb25TaXplID0gb3B0aW9ucy5tYXhCc29uU2l6ZSB8fCAxMDI0ICogMTAyNCAqIDE2O1xuICAgICAgICAvLyBmbGFnc1xuICAgICAgICB0aGlzLmNoZWNrc3VtUHJlc2VudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vcmVUb0NvbWUgPSBvcHRpb25zLm1vcmVUb0NvbWUgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuZXhoYXVzdEFsbG93ZWQgPVxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuZXhoYXVzdEFsbG93ZWQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZXhoYXVzdEFsbG93ZWQgOiBmYWxzZTtcbiAgICB9XG4gICAgdG9CaW4oKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgbGV0IGZsYWdzID0gMDtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tzdW1QcmVzZW50KSB7XG4gICAgICAgICAgICBmbGFncyB8PSBPUFRTX0NIRUNLU1VNX1BSRVNFTlQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubW9yZVRvQ29tZSkge1xuICAgICAgICAgICAgZmxhZ3MgfD0gT1BUU19NT1JFX1RPX0NPTUU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhoYXVzdEFsbG93ZWQpIHtcbiAgICAgICAgICAgIGZsYWdzIHw9IE9QVFNfRVhIQVVTVF9BTExPV0VEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IEJ1ZmZlci5hbGxvYyg0ICogNCArIC8vIEhlYWRlclxuICAgICAgICAgICAgNCAvLyBGbGFnc1xuICAgICAgICApO1xuICAgICAgICBidWZmZXJzLnB1c2goaGVhZGVyKTtcbiAgICAgICAgbGV0IHRvdGFsTGVuZ3RoID0gaGVhZGVyLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMuY29tbWFuZDtcbiAgICAgICAgdG90YWxMZW5ndGggKz0gdGhpcy5tYWtlRG9jdW1lbnRTZWdtZW50KGJ1ZmZlcnMsIGNvbW1hbmQpO1xuICAgICAgICBoZWFkZXIud3JpdGVJbnQzMkxFKHRvdGFsTGVuZ3RoLCAwKTsgLy8gbWVzc2FnZUxlbmd0aFxuICAgICAgICBoZWFkZXIud3JpdGVJbnQzMkxFKHRoaXMucmVxdWVzdElkLCA0KTsgLy8gcmVxdWVzdElEXG4gICAgICAgIGhlYWRlci53cml0ZUludDMyTEUoMCwgOCk7IC8vIHJlc3BvbnNlVG9cbiAgICAgICAgaGVhZGVyLndyaXRlSW50MzJMRShjb25zdGFudHNfMS5PUF9NU0csIDEyKTsgLy8gb3BDb2RlXG4gICAgICAgIGhlYWRlci53cml0ZVVJbnQzMkxFKGZsYWdzLCAxNik7IC8vIGZsYWdzXG4gICAgICAgIHJldHVybiBidWZmZXJzO1xuICAgIH1cbiAgICBtYWtlRG9jdW1lbnRTZWdtZW50KGJ1ZmZlcnMsIGRvY3VtZW50KSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWRUeXBlQnVmZmVyID0gQnVmZmVyLmFsbG9jKDEpO1xuICAgICAgICBwYXlsb2FkVHlwZUJ1ZmZlclswXSA9IDA7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50QnVmZmVyID0gdGhpcy5zZXJpYWxpemVCc29uKGRvY3VtZW50KTtcbiAgICAgICAgYnVmZmVycy5wdXNoKHBheWxvYWRUeXBlQnVmZmVyKTtcbiAgICAgICAgYnVmZmVycy5wdXNoKGRvY3VtZW50QnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHBheWxvYWRUeXBlQnVmZmVyLmxlbmd0aCArIGRvY3VtZW50QnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgc2VyaWFsaXplQnNvbihkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gQlNPTi5zZXJpYWxpemUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGNoZWNrS2V5czogdGhpcy5jaGVja0tleXMsXG4gICAgICAgICAgICBzZXJpYWxpemVGdW5jdGlvbnM6IHRoaXMuc2VyaWFsaXplRnVuY3Rpb25zLFxuICAgICAgICAgICAgaWdub3JlVW5kZWZpbmVkOiB0aGlzLmlnbm9yZVVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGdldFJlcXVlc3RJZCgpIHtcbiAgICAgICAgX3JlcXVlc3RJZCA9IChfcmVxdWVzdElkICsgMSkgJiAweDdmZmZmZmZmO1xuICAgICAgICByZXR1cm4gX3JlcXVlc3RJZDtcbiAgICB9XG59XG5leHBvcnRzLk9wTXNnUmVxdWVzdCA9IE9wTXNnUmVxdWVzdDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIE9wTXNnUmVzcG9uc2Uge1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG1zZ0hlYWRlciwgbXNnQm9keSwgb3B0cykge1xuICAgICAgICB0aGlzLnBhcnNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJhdyA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuZGF0YSA9IG1zZ0JvZHk7XG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHMgPz8ge1xuICAgICAgICAgICAgdXNlQmlnSW50NjQ6IGZhbHNlLFxuICAgICAgICAgICAgcHJvbW90ZUxvbmdzOiB0cnVlLFxuICAgICAgICAgICAgcHJvbW90ZVZhbHVlczogdHJ1ZSxcbiAgICAgICAgICAgIHByb21vdGVCdWZmZXJzOiBmYWxzZSxcbiAgICAgICAgICAgIGJzb25SZWdFeHA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIC8vIFJlYWQgdGhlIG1lc3NhZ2UgaGVhZGVyXG4gICAgICAgIHRoaXMubGVuZ3RoID0gbXNnSGVhZGVyLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0SWQgPSBtc2dIZWFkZXIucmVxdWVzdElkO1xuICAgICAgICB0aGlzLnJlc3BvbnNlVG8gPSBtc2dIZWFkZXIucmVzcG9uc2VUbztcbiAgICAgICAgdGhpcy5vcENvZGUgPSBtc2dIZWFkZXIub3BDb2RlO1xuICAgICAgICB0aGlzLmZyb21Db21wcmVzc2VkID0gbXNnSGVhZGVyLmZyb21Db21wcmVzc2VkO1xuICAgICAgICAvLyBSZWFkIHJlc3BvbnNlIGZsYWdzXG4gICAgICAgIHRoaXMucmVzcG9uc2VGbGFncyA9IG1zZ0JvZHkucmVhZEludDMyTEUoMCk7XG4gICAgICAgIHRoaXMuY2hlY2tzdW1QcmVzZW50ID0gKHRoaXMucmVzcG9uc2VGbGFncyAmIE9QVFNfQ0hFQ0tTVU1fUFJFU0VOVCkgIT09IDA7XG4gICAgICAgIHRoaXMubW9yZVRvQ29tZSA9ICh0aGlzLnJlc3BvbnNlRmxhZ3MgJiBPUFRTX01PUkVfVE9fQ09NRSkgIT09IDA7XG4gICAgICAgIHRoaXMuZXhoYXVzdEFsbG93ZWQgPSAodGhpcy5yZXNwb25zZUZsYWdzICYgT1BUU19FWEhBVVNUX0FMTE9XRUQpICE9PSAwO1xuICAgICAgICB0aGlzLnVzZUJpZ0ludDY0ID0gdHlwZW9mIHRoaXMub3B0cy51c2VCaWdJbnQ2NCA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRzLnVzZUJpZ0ludDY0IDogZmFsc2U7XG4gICAgICAgIHRoaXMucHJvbW90ZUxvbmdzID0gdHlwZW9mIHRoaXMub3B0cy5wcm9tb3RlTG9uZ3MgPT09ICdib29sZWFuJyA/IHRoaXMub3B0cy5wcm9tb3RlTG9uZ3MgOiB0cnVlO1xuICAgICAgICB0aGlzLnByb21vdGVWYWx1ZXMgPVxuICAgICAgICAgICAgdHlwZW9mIHRoaXMub3B0cy5wcm9tb3RlVmFsdWVzID09PSAnYm9vbGVhbicgPyB0aGlzLm9wdHMucHJvbW90ZVZhbHVlcyA6IHRydWU7XG4gICAgICAgIHRoaXMucHJvbW90ZUJ1ZmZlcnMgPVxuICAgICAgICAgICAgdHlwZW9mIHRoaXMub3B0cy5wcm9tb3RlQnVmZmVycyA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRzLnByb21vdGVCdWZmZXJzIDogZmFsc2U7XG4gICAgICAgIHRoaXMuYnNvblJlZ0V4cCA9IHR5cGVvZiB0aGlzLm9wdHMuYnNvblJlZ0V4cCA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcHRzLmJzb25SZWdFeHAgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5kb2N1bWVudHMgPSBbXTtcbiAgICB9XG4gICAgaXNQYXJzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZDtcbiAgICB9XG4gICAgcGFyc2Uob3B0aW9ucykge1xuICAgICAgICAvLyBEb24ndCBwYXJzZSBhZ2FpbiBpZiBub3QgbmVlZGVkXG4gICAgICAgIGlmICh0aGlzLnBhcnNlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMuaW5kZXggPSA0O1xuICAgICAgICAvLyBBbGxvdyB0aGUgcmV0dXJuIG9mIHJhdyBkb2N1bWVudHMgaW5zdGVhZCBvZiBwYXJzaW5nXG4gICAgICAgIGNvbnN0IHJhdyA9IG9wdGlvbnMucmF3IHx8IGZhbHNlO1xuICAgICAgICBjb25zdCBkb2N1bWVudHNSZXR1cm5lZEluID0gb3B0aW9ucy5kb2N1bWVudHNSZXR1cm5lZEluIHx8IG51bGw7XG4gICAgICAgIGNvbnN0IHVzZUJpZ0ludDY0ID0gb3B0aW9ucy51c2VCaWdJbnQ2NCA/PyB0aGlzLm9wdHMudXNlQmlnSW50NjQ7XG4gICAgICAgIGNvbnN0IHByb21vdGVMb25ncyA9IG9wdGlvbnMucHJvbW90ZUxvbmdzID8/IHRoaXMub3B0cy5wcm9tb3RlTG9uZ3M7XG4gICAgICAgIGNvbnN0IHByb21vdGVWYWx1ZXMgPSBvcHRpb25zLnByb21vdGVWYWx1ZXMgPz8gdGhpcy5vcHRzLnByb21vdGVWYWx1ZXM7XG4gICAgICAgIGNvbnN0IHByb21vdGVCdWZmZXJzID0gb3B0aW9ucy5wcm9tb3RlQnVmZmVycyA/PyB0aGlzLm9wdHMucHJvbW90ZUJ1ZmZlcnM7XG4gICAgICAgIGNvbnN0IGJzb25SZWdFeHAgPSBvcHRpb25zLmJzb25SZWdFeHAgPz8gdGhpcy5vcHRzLmJzb25SZWdFeHA7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnBhcnNlQnNvblNlcmlhbGl6YXRpb25PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICAvLyBTZXQgdXAgdGhlIG9wdGlvbnNcbiAgICAgICAgY29uc3QgYnNvbk9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1c2VCaWdJbnQ2NCxcbiAgICAgICAgICAgIHByb21vdGVMb25ncyxcbiAgICAgICAgICAgIHByb21vdGVWYWx1ZXMsXG4gICAgICAgICAgICBwcm9tb3RlQnVmZmVycyxcbiAgICAgICAgICAgIGJzb25SZWdFeHAsXG4gICAgICAgICAgICB2YWxpZGF0aW9uXG4gICAgICAgICAgICAvLyBEdWUgdG8gdGhlIHN0cmljdG5lc3Mgb2YgdGhlIEJTT04gbGlicmFyaWVzIHZhbGlkYXRpb24gb3B0aW9uIHdlIG5lZWQgdGhpcyBjYXN0XG4gICAgICAgIH07XG4gICAgICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZFR5cGUgPSB0aGlzLmRhdGEucmVhZFVJbnQ4KHRoaXMuaW5kZXgrKyk7XG4gICAgICAgICAgICBpZiAocGF5bG9hZFR5cGUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBic29uU2l6ZSA9IHRoaXMuZGF0YS5yZWFkVUludDMyTEUodGhpcy5pbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmluID0gdGhpcy5kYXRhLnNsaWNlKHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyBic29uU2l6ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudHMucHVzaChyYXcgPyBiaW4gOiBCU09OLmRlc2VyaWFsaXplKGJpbiwgYnNvbk9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IGJzb25TaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF5bG9hZFR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCB3YXMgZGVjaWRlZCB0aGF0IG5vIGRyaXZlciBtYWtlcyB1c2Ugb2YgcGF5bG9hZCB0eXBlIDFcbiAgICAgICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IFJlcGxhY2Ugd2l0aCBNb25nb0RlcHJlY2F0aW9uRXJyb3JcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignT1BfTVNHIFBheWxvYWQgVHlwZSAxIGRldGVjdGVkIHVuc3VwcG9ydGVkIHByb3RvY29sJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBkb2N1bWVudHNSZXR1cm5lZEluICE9IG51bGwgJiYgcmF3KSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHNBc1JhdyA9IHt9O1xuICAgICAgICAgICAgZmllbGRzQXNSYXdbZG9jdW1lbnRzUmV0dXJuZWRJbl0gPSB0cnVlO1xuICAgICAgICAgICAgYnNvbk9wdGlvbnMuZmllbGRzQXNSYXcgPSBmaWVsZHNBc1JhdztcbiAgICAgICAgICAgIGNvbnN0IGRvYyA9IEJTT04uZGVzZXJpYWxpemUodGhpcy5kb2N1bWVudHNbMF0sIGJzb25PcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRzID0gW2RvY107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZWQgPSB0cnVlO1xuICAgIH1cbiAgICBwYXJzZUJzb25TZXJpYWxpemF0aW9uT3B0aW9ucyh7IGVuYWJsZVV0ZjhWYWxpZGF0aW9uIH0pIHtcbiAgICAgICAgaWYgKGVuYWJsZVV0ZjhWYWxpZGF0aW9uID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdXRmODogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB1dGY4OiB7IHdyaXRlRXJyb3JzOiBmYWxzZSB9IH07XG4gICAgfVxufVxuZXhwb3J0cy5PcE1zZ1Jlc3BvbnNlID0gT3BNc2dSZXNwb25zZTtcbmNvbnN0IE1FU1NBR0VfSEVBREVSX1NJWkUgPSAxNjtcbmNvbnN0IENPTVBSRVNTSU9OX0RFVEFJTFNfU0laRSA9IDk7IC8vIG9yaWdpbmFsT3Bjb2RlICsgdW5jb21wcmVzc2VkU2l6ZSwgY29tcHJlc3NvcklEXG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIEFuIE9QX0NPTVBSRVNTRUQgcmVxdWVzdCB3cmFwcyBlaXRoZXIgYW4gT1BfUVVFUlkgb3IgT1BfTVNHIG1lc3NhZ2UuXG4gKi9cbmNsYXNzIE9wQ29tcHJlc3NlZFJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgLy8gUmV0dXJuIHdoZXRoZXIgYSBjb21tYW5kIGNvbnRhaW5zIGFuIHVuY29tcHJlc3NpYmxlIGNvbW1hbmQgdGVybVxuICAgIC8vIFdpbGwgcmV0dXJuIHRydWUgaWYgY29tbWFuZCBjb250YWlucyBubyB1bmNvbXByZXNzaWJsZSBjb21tYW5kIHRlcm1zXG4gICAgc3RhdGljIGNhbkNvbXByZXNzKGNvbW1hbmQpIHtcbiAgICAgICAgY29uc3QgY29tbWFuZERvYyA9IGNvbW1hbmQgaW5zdGFuY2VvZiBPcE1zZ1JlcXVlc3QgPyBjb21tYW5kLmNvbW1hbmQgOiBjb21tYW5kLnF1ZXJ5O1xuICAgICAgICBjb25zdCBjb21tYW5kTmFtZSA9IE9iamVjdC5rZXlzKGNvbW1hbmREb2MpWzBdO1xuICAgICAgICByZXR1cm4gIWNvbXByZXNzaW9uXzEudW5jb21wcmVzc2libGVDb21tYW5kcy5oYXMoY29tbWFuZE5hbWUpO1xuICAgIH1cbiAgICBhc3luYyB0b0JpbigpIHtcbiAgICAgICAgY29uc3QgY29uY2F0ZW5hdGVkT3JpZ2luYWxDb21tYW5kQnVmZmVyID0gQnVmZmVyLmNvbmNhdCh0aGlzLmNvbW1hbmQudG9CaW4oKSk7XG4gICAgICAgIC8vIG90aGVyd2lzZSwgY29tcHJlc3MgdGhlIG1lc3NhZ2VcbiAgICAgICAgY29uc3QgbWVzc2FnZVRvQmVDb21wcmVzc2VkID0gY29uY2F0ZW5hdGVkT3JpZ2luYWxDb21tYW5kQnVmZmVyLnNsaWNlKE1FU1NBR0VfSEVBREVSX1NJWkUpO1xuICAgICAgICAvLyBFeHRyYWN0IGluZm9ybWF0aW9uIG5lZWRlZCBmb3IgT1BfQ09NUFJFU1NFRCBmcm9tIHRoZSB1bmNvbXByZXNzZWQgbWVzc2FnZVxuICAgICAgICBjb25zdCBvcmlnaW5hbENvbW1hbmRPcENvZGUgPSBjb25jYXRlbmF0ZWRPcmlnaW5hbENvbW1hbmRCdWZmZXIucmVhZEludDMyTEUoMTIpO1xuICAgICAgICAvLyBDb21wcmVzcyB0aGUgbWVzc2FnZSBib2R5XG4gICAgICAgIGNvbnN0IGNvbXByZXNzZWRNZXNzYWdlID0gYXdhaXQgKDAsIGNvbXByZXNzaW9uXzEuY29tcHJlc3MpKHRoaXMub3B0aW9ucywgbWVzc2FnZVRvQmVDb21wcmVzc2VkKTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBtc2dIZWFkZXIgb2YgT1BfQ09NUFJFU1NFRFxuICAgICAgICBjb25zdCBtc2dIZWFkZXIgPSBCdWZmZXIuYWxsb2MoTUVTU0FHRV9IRUFERVJfU0laRSk7XG4gICAgICAgIG1zZ0hlYWRlci53cml0ZUludDMyTEUoTUVTU0FHRV9IRUFERVJfU0laRSArIENPTVBSRVNTSU9OX0RFVEFJTFNfU0laRSArIGNvbXByZXNzZWRNZXNzYWdlLmxlbmd0aCwgMCk7IC8vIG1lc3NhZ2VMZW5ndGhcbiAgICAgICAgbXNnSGVhZGVyLndyaXRlSW50MzJMRSh0aGlzLmNvbW1hbmQucmVxdWVzdElkLCA0KTsgLy8gcmVxdWVzdElEXG4gICAgICAgIG1zZ0hlYWRlci53cml0ZUludDMyTEUoMCwgOCk7IC8vIHJlc3BvbnNlVG8gKHplcm8pXG4gICAgICAgIG1zZ0hlYWRlci53cml0ZUludDMyTEUoY29uc3RhbnRzXzEuT1BfQ09NUFJFU1NFRCwgMTIpOyAvLyBvcENvZGVcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjb21wcmVzc2lvbiBkZXRhaWxzIG9mIE9QX0NPTVBSRVNTRURcbiAgICAgICAgY29uc3QgY29tcHJlc3Npb25EZXRhaWxzID0gQnVmZmVyLmFsbG9jKENPTVBSRVNTSU9OX0RFVEFJTFNfU0laRSk7XG4gICAgICAgIGNvbXByZXNzaW9uRGV0YWlscy53cml0ZUludDMyTEUob3JpZ2luYWxDb21tYW5kT3BDb2RlLCAwKTsgLy8gb3JpZ2luYWxPcGNvZGVcbiAgICAgICAgY29tcHJlc3Npb25EZXRhaWxzLndyaXRlSW50MzJMRShtZXNzYWdlVG9CZUNvbXByZXNzZWQubGVuZ3RoLCA0KTsgLy8gU2l6ZSBvZiB0aGUgdW5jb21wcmVzc2VkIGNvbXByZXNzZWRNZXNzYWdlLCBleGNsdWRpbmcgdGhlIE1zZ0hlYWRlclxuICAgICAgICBjb21wcmVzc2lvbkRldGFpbHMud3JpdGVVSW50OChjb21wcmVzc2lvbl8xLkNvbXByZXNzb3JbdGhpcy5vcHRpb25zLmFncmVlZENvbXByZXNzb3JdLCA4KTsgLy8gY29tcHJlc3NvcklEXG4gICAgICAgIHJldHVybiBbbXNnSGVhZGVyLCBjb21wcmVzc2lvbkRldGFpbHMsIGNvbXByZXNzZWRNZXNzYWdlXTtcbiAgICB9XG59XG5leHBvcnRzLk9wQ29tcHJlc3NlZFJlcXVlc3QgPSBPcENvbXByZXNzZWRSZXF1ZXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbWFuZHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/commands.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connect.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connect.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeSocket = exports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.performInitialHandshake = exports.makeConnection = exports.connect = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth/auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_2 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nasync function connect(options) {\n    let connection = null;\n    try {\n        const socket = await makeSocket(options);\n        connection = makeConnection(options, socket);\n        await performInitialHandshake(connection, options);\n        return connection;\n    }\n    catch (error) {\n        connection?.destroy({ force: false });\n        throw error;\n    }\n}\nexports.connect = connect;\nfunction makeConnection(options, socket) {\n    let ConnectionType = options.connectionType ?? connection_1.Connection;\n    if (options.autoEncrypter) {\n        ConnectionType = connection_1.CryptoConnection;\n    }\n    return new ConnectionType(socket, options);\n}\nexports.makeConnection = makeConnection;\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) &&\n            !options.authProviders.getOrCreateProvider(credentials.mechanism)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = { ...options };\n    if (typeof options.connectTimeoutMS === 'number') {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n    if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.');\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = options.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n    // Connection establishment is socket creation (tcp handshake, tls handshake, MongoDB handshake (saslStart, saslContinue))\n    // Once connection is established, command logging can log events (if enabled)\n    conn.established = true;\n}\nexports.performInitialHandshake = performInitialHandshake;\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: options.metadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = authContext.options.authProviders.getOrCreateProvider(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = authContext.options.authProviders.getOrCreateProvider(credentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = [\n    'ALPNProtocols',\n    'ca',\n    'cert',\n    'checkServerIdentity',\n    'ciphers',\n    'crl',\n    'ecdhCurve',\n    'key',\n    'minDHSize',\n    'passphrase',\n    'pfx',\n    'rejectUnauthorized',\n    'secureContext',\n    'secureProtocol',\n    'servername',\n    'session'\n];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = [\n    'family',\n    'hints',\n    'localAddress',\n    'localPort',\n    'lookup'\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress)\n        throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === 'string') {\n        result.path = hostAddress.socketPath;\n        return result;\n    }\n    else if (typeof hostAddress.host === 'string') {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    }\n    else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nasync function makeSocket(options) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const rejectUnauthorized = options.rejectUnauthorized ?? true;\n    const existingSocket = options.existingSocket;\n    let socket;\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return makeSocks5Connection({\n            ...options,\n            connectTimeoutMS // Should always be present for Socks5\n        });\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === 'function') {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    }\n    else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    }\n    else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    let cancellationHandler = null;\n    const { promise: connectedSocket, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n    if (existingSocket) {\n        resolve(socket);\n    }\n    else {\n        const connectEvent = useTLS ? 'secureConnect' : 'connect';\n        socket\n            .once(connectEvent, () => resolve(socket))\n            .once('error', error => reject(connectionFailureError('error', error)))\n            .once('timeout', () => reject(connectionFailureError('timeout')))\n            .once('close', () => reject(connectionFailureError('close')));\n        if (options.cancellationToken != null) {\n            cancellationHandler = () => reject(connectionFailureError('cancel'));\n            options.cancellationToken.once('cancel', cancellationHandler);\n        }\n    }\n    try {\n        socket = await connectedSocket;\n        return socket;\n    }\n    catch (error) {\n        socket.destroy();\n        if ('authorizationError' in socket && socket.authorizationError != null && rejectUnauthorized) {\n            // TODO(NODE-5192): wrap this with a MongoError subclass\n            throw socket.authorizationError;\n        }\n        throw error;\n    }\n    finally {\n        socket.setTimeout(0);\n        socket.removeAllListeners();\n        if (cancellationHandler != null) {\n            options.cancellationToken?.removeListener('cancel', cancellationHandler);\n        }\n    }\n}\nexports.makeSocket = makeSocket;\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nasync function makeSocks5Connection(options) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    const rawSocket = await makeSocket({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    });\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts');\n    }\n    socks ??= loadSocks();\n    try {\n        // Then, establish the Socks5 proxy connection:\n        const { socket } = await socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: 'connect',\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: 'iLoveJavaScript',\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        });\n        // Finally, now treat the resulting duplex stream as the\n        // socket over which we send and receive wire protocol messages:\n        return await makeSocket({\n            ...options,\n            existingSocket: socket,\n            proxyHost: undefined\n        });\n    }\n    catch (error) {\n        throw connectionFailureError('error', error);\n    }\n}\nfunction connectionFailureError(type, cause) {\n    switch (type) {\n        case 'error':\n            return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(cause), { cause });\n        case 'timeout':\n            return new error_1.MongoNetworkTimeoutError('connection timed out');\n        case 'close':\n            return new error_1.MongoNetworkError('connection closed');\n        case 'cancel':\n            return new error_1.MongoNetworkError('connection establishment was cancelled');\n        default:\n            return new error_1.MongoNetworkError('unknown network error');\n    }\n}\n//# sourceMappingURL=connect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = exports.hasSessionSupport = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_monitoring_events_1 = __webpack_require__(/*! ./command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst stream_description_1 = __webpack_require__(/*! ./stream_description */ \"(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst on_data_1 = __webpack_require__(/*! ./wire_protocol/on_data */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\");\nconst shared_1 = __webpack_require__(/*! ./wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\n/** @internal */\nfunction hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString('hex');\n}\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.lastHelloMS = -1;\n        this.helloOk = false;\n        this.delayedTimeoutId = null;\n        this.clusterTime = null;\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.mongoLogger = options.mongoLogger;\n        this.established = false;\n        this.description = new stream_description_1.StreamDescription(this.address, options);\n        this.generation = options.generation;\n        this.lastUseTime = (0, utils_1.now)();\n        this.socket = stream;\n        // TODO: Remove signal from connection layer\n        this.controller = new AbortController();\n        const { signal } = this.controller;\n        this.signal = signal;\n        const { promise: aborted, reject } = (0, utils_1.promiseWithResolvers)();\n        aborted.then(undefined, () => null); // Prevent unhandled rejection\n        this.signal.addEventListener('abort', function onAbort() {\n            reject(signal.reason);\n        }, { once: true });\n        this.aborted = aborted;\n        this.messageStream = this.socket\n            .on('error', this.onError.bind(this))\n            .pipe(new SizedMessageTransform({ connection: this }))\n            .on('error', this.onError.bind(this));\n        this.socket.on('close', this.onClose.bind(this));\n        this.socket.on('timeout', this.onTimeout.bind(this));\n        const socketWrite = (0, util_1.promisify)(this.socket.write.bind(this.socket));\n        this.socketWrite = async (buffer) => {\n            return Promise.race([socketWrite(buffer), this.aborted]);\n        };\n    }\n    /** Indicates that the connection (including underlying TCP socket) has been closed. */\n    get closed() {\n        return this.signal.aborted;\n    }\n    get hello() {\n        return this.description.hello;\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this.description.receiveResponse(response);\n        Object.freeze(this.description);\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return (this.description != null &&\n            (0, utils_1.maxWireVersion)(this) >= 6 &&\n            !this.description.__nodejs_mock_server__);\n    }\n    get shouldEmitAndLogCommand() {\n        return ((this.monitorCommands ||\n            (this.established &&\n                !this.authContext?.reauthenticating &&\n                this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG))) ??\n            false);\n    }\n    markAvailable() {\n        this.lastUseTime = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this.delayedTimeoutId = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    destroy(options, callback) {\n        if (this.closed) {\n            if (typeof callback === 'function')\n                process.nextTick(callback);\n            return;\n        }\n        if (typeof callback === 'function') {\n            this.once('close', () => process.nextTick(() => callback()));\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(error) {\n        if (this.closed) {\n            return;\n        }\n        this.socket.destroy();\n        this.controller.abort(error);\n        this.emit(Connection.CLOSE);\n    }\n    prepareCommand(db, command, options) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n            if (sessionError)\n                throw sessionError;\n        }\n        else if (session?.explicit) {\n            throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        if ((0, shared_1.isSharded)(this) &&\n            !this.supportsOpMsg &&\n            readPreference &&\n            readPreference.mode !== 'primary') {\n            cmd = {\n                $query: cmd,\n                $readPreference: readPreference.toJSON()\n            };\n        }\n        const commandOptions = {\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk(),\n            ...options,\n            readPreference // ensure we pass in ReadPreference instance\n        };\n        const message = this.supportsOpMsg\n            ? new commands_1.OpMsgRequest(db, cmd, commandOptions)\n            : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n        return message;\n    }\n    async *sendWire(message, options) {\n        this.throwIfAborted();\n        if (typeof options.socketTimeoutMS === 'number') {\n            this.socket.setTimeout(options.socketTimeoutMS);\n        }\n        else if (this.socketTimeoutMS !== 0) {\n            this.socket.setTimeout(this.socketTimeoutMS);\n        }\n        try {\n            await this.writeCommand(message, {\n                agreedCompressor: this.description.compressor ?? 'none',\n                zlibCompressionLevel: this.description.zlibCompressionLevel\n            });\n            if (options.noResponse) {\n                yield { ok: 1 };\n                return;\n            }\n            this.throwIfAborted();\n            for await (const response of this.readMany()) {\n                this.socket.setTimeout(0);\n                response.parse(options);\n                const [document] = response.documents;\n                if (!Buffer.isBuffer(document)) {\n                    const { session } = options;\n                    if (session) {\n                        (0, sessions_1.updateSessionFromResponse)(session, document);\n                    }\n                    if (document.$clusterTime) {\n                        this.clusterTime = document.$clusterTime;\n                        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n                    }\n                }\n                yield document;\n                this.throwIfAborted();\n                if (typeof options.socketTimeoutMS === 'number') {\n                    this.socket.setTimeout(options.socketTimeoutMS);\n                }\n                else if (this.socketTimeoutMS !== 0) {\n                    this.socket.setTimeout(this.socketTimeoutMS);\n                }\n            }\n        }\n        finally {\n            this.socket.setTimeout(0);\n        }\n    }\n    async *sendCommand(ns, command, options = {}) {\n        const message = this.prepareCommand(ns.db, command, options);\n        let started = 0;\n        if (this.shouldEmitAndLogCommand) {\n            started = (0, utils_1.now)();\n            this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n        }\n        let document;\n        try {\n            this.throwIfAborted();\n            for await (document of this.sendWire(message, options)) {\n                if (!Buffer.isBuffer(document) && document.writeConcernError) {\n                    throw new error_1.MongoWriteConcernError(document.writeConcernError, document);\n                }\n                if (!Buffer.isBuffer(document) &&\n                    (document.ok === 0 || document.$err || document.errmsg || document.code)) {\n                    throw new error_1.MongoServerError(document);\n                }\n                if (this.shouldEmitAndLogCommand) {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n                }\n                yield document;\n                this.throwIfAborted();\n            }\n        }\n        catch (error) {\n            if (this.shouldEmitAndLogCommand) {\n                if (error.name === 'MongoWriteConcernError') {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : document, started, this.description.serverConnectionId));\n                }\n                else {\n                    this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n                }\n            }\n            throw error;\n        }\n    }\n    async command(ns, command, options = {}) {\n        this.throwIfAborted();\n        for await (const document of this.sendCommand(ns, command, options)) {\n            return document;\n        }\n        throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');\n    }\n    exhaustCommand(ns, command, options, replyListener) {\n        const exhaustLoop = async () => {\n            this.throwIfAborted();\n            for await (const reply of this.sendCommand(ns, command, options)) {\n                replyListener(undefined, reply);\n                this.throwIfAborted();\n            }\n            throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n        };\n        exhaustLoop().catch(replyListener);\n    }\n    throwIfAborted() {\n        this.signal.throwIfAborted();\n    }\n    /**\n     * @internal\n     *\n     * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n     * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n     */\n    async writeCommand(command, options) {\n        const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n            ? command\n            : new commands_1.OpCompressedRequest(command, {\n                agreedCompressor: options.agreedCompressor ?? 'none',\n                zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n            });\n        const buffer = Buffer.concat(await finalCommand.toBin());\n        return this.socketWrite(buffer);\n    }\n    /**\n     * @internal\n     *\n     * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n     * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n     * by calling `return` on the generator.\n     *\n     * Note that `for-await` loops call `return` automatically when the loop is exited.\n     */\n    async *readMany() {\n        for await (const message of (0, on_data_1.onData)(this.messageStream, { signal: this.signal })) {\n            const response = await (0, compression_1.decompressResponse)(message);\n            yield response;\n            if (!response.moreToCome) {\n                return;\n            }\n        }\n    }\n}\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */\nclass SizedMessageTransform extends stream_1.Transform {\n    constructor({ connection }) {\n        super({ objectMode: false });\n        this.bufferPool = new utils_1.BufferPool();\n        this.connection = connection;\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.connection.delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n            this.connection.delayedTimeoutId = null;\n        }\n        this.bufferPool.append(chunk);\n        const sizeOfMessage = this.bufferPool.getInt32();\n        if (sizeOfMessage == null) {\n            return callback();\n        }\n        if (sizeOfMessage < 0) {\n            return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n        }\n        if (sizeOfMessage > this.bufferPool.length) {\n            return callback();\n        }\n        const message = this.bufferPool.read(sizeOfMessage);\n        return callback(null, message);\n    }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */\nclass CryptoConnection extends Connection {\n    constructor(stream, options) {\n        super(stream, options);\n        this.autoEncrypter = options.autoEncrypter;\n    }\n    /** @internal @override */\n    async command(ns, cmd, options) {\n        const { autoEncrypter } = this;\n        if (!autoEncrypter) {\n            throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption');\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return super.command(ns, cmd, options);\n        }\n        if (serverWireVersion < 8) {\n            throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes\n            ? cmd.indexes.map((index) => index.key)\n            : null;\n        const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n        // Replace the saved values\n        if (sort != null && (cmd.find || cmd.findAndModify)) {\n            encrypted.sort = sort;\n        }\n        if (indexKeys != null && cmd.createIndexes) {\n            for (const [offset, index] of indexKeys.entries()) {\n                // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                encrypted.indexes[offset].key = index;\n            }\n        }\n        const response = await super.command(ns, encrypted, options);\n        return autoEncrypter.decrypt(response, options);\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst connect_1 = __webpack_require__(/*! ./connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_events_1 = __webpack_require__(/*! ./connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst metrics_1 = __webpack_require__(/*! ./metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        this.options = Object.freeze({\n            connectionType: connection_1.Connection,\n            ...options,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter,\n            metadata: options.metadata\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kServer] = server;\n        this[kConnections] = new utils_1.List();\n        this[kPending] = 0;\n        this[kCheckedOut] = new Set();\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new utils_1.List();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        this.component = 'connection';\n        process.nextTick(() => {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */\n    get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut].size;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get serverError() {\n        return this[kServer].description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */\n    get checkedOutConnections() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        if (this[kPoolState] !== exports.PoolState.paused) {\n            return;\n        }\n        this[kPoolState] = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    async checkOut() {\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n        const waitQueueMember = {\n            resolve,\n            reject,\n            timeoutController: new utils_1.TimeoutController(waitQueueTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n            waitQueueMember.reject(new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                ? this.waitQueueErrorMetrics()\n                : 'Timed out while checking out a connection from connection pool', this.address));\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n        return promise;\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        if (!this[kCheckedOut].has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut].delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this[kGeneration];\n        this[kGeneration] += 1;\n        const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n        this[kPoolState] = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */\n    interruptInUseConnections(minGeneration) {\n        for (const connection of this[kCheckedOut]) {\n            if (connection.generation <= minGeneration) {\n                this.checkIn(connection);\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n            }\n        }\n    }\n    close(_options, _cb) {\n        let options = _options;\n        const callback = (_cb ?? _options);\n        if (typeof options === 'function') {\n            options = {};\n        }\n        options = Object.assign({ force: false }, options);\n        if (this.closed) {\n            return callback();\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit('cancel');\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === 'function') {\n            this[kConnectionCounter].return(undefined);\n        }\n        this[kPoolState] = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy({ force: !!options.force }, cb);\n        }, err => {\n            this[kConnections].clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n            callback(err);\n        });\n    }\n    /**\n     * @internal\n     * Reauthenticate a connection\n     */\n    async reauthenticate(connection) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            throw new error_1.MongoRuntimeError('No auth context found on connection.');\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n        const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n        }\n        await provider.reauth(authContext);\n        return;\n    }\n    /** Clear the min pool size timer */\n    clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        process.nextTick(() => connection.destroy({ force: false }));\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */\n    destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken],\n            mongoLogger: this.mongoLogger,\n            authProviders: this[kServer].topology.client.s.authProviders\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions).then(connection => {\n            // The pool might have closed since we started trying to create a connection\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                this[kPending]--;\n                connection.destroy({ force: true });\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n            this[kPending]--;\n            callback(undefined, connection);\n        }, error => {\n            this[kPending]--;\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error', \n            // TODO(NODE-5192): Remove this cast\n            error));\n            if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n                error.connectionGeneration = connectOptions.generation;\n            }\n            callback(error ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                if (err) {\n                    this[kServer].handleError(err);\n                }\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                if (this[kPoolState] === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n                    this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        }\n        else {\n            (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].first();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                const reason = this.closed ? 'poolClosed' : 'connectionError';\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, error));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.reject(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this[kCheckedOut].add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.resolve(connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, \n                        // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', err));\n                        waitQueueMember.reject(err);\n                    }\n                    else if (connection) {\n                        this[kCheckedOut].add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                        waitQueueMember.resolve(connection);\n                    }\n                    waitQueueMember.timeoutController.clear();\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\nexports.ConnectionPool = ConnectionPool;\n//# sourceMappingURL=connection_pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool_events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_READY;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, options = {}) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;\n//# sourceMappingURL=connection_pool_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/errors.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/errors.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool, message) {\n        const errorMessage = message\n            ? message\n            : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return 'MongoPoolClearedError';\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return 'PoolClearedOnNetworkError';\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsaUNBQWlDLEdBQUcsd0JBQXdCLEdBQUcsdUJBQXVCO0FBQ3RILGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjLHNEQUFzRCwwQkFBMEI7QUFDbkksaURBQWlELDBCQUEwQjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGNBQWM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2Vycm9ycy5qcz9kOWUwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYWl0UXVldWVUaW1lb3V0RXJyb3IgPSBleHBvcnRzLlBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3IgPSBleHBvcnRzLlBvb2xDbGVhcmVkRXJyb3IgPSBleHBvcnRzLlBvb2xDbG9zZWRFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG4vKipcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgYSBjb25uZWN0aW9uIHBvb2wgaXMgY2xvc2VkXG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgUG9vbENsb3NlZEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb0RyaXZlckVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IocG9vbCkge1xuICAgICAgICBzdXBlcignQXR0ZW1wdGVkIHRvIGNoZWNrIG91dCBhIGNvbm5lY3Rpb24gZnJvbSBjbG9zZWQgY29ubmVjdGlvbiBwb29sJyk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IHBvb2wuYWRkcmVzcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29Qb29sQ2xvc2VkRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbENsb3NlZEVycm9yID0gUG9vbENsb3NlZEVycm9yO1xuLyoqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIGEgY29ubmVjdGlvbiBwb29sIGlzIGN1cnJlbnRseSBwYXVzZWRcbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xlYXJlZEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb05ldHdvcmtFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wsIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gbWVzc2FnZVxuICAgICAgICAgICAgPyBtZXNzYWdlXG4gICAgICAgICAgICA6IGBDb25uZWN0aW9uIHBvb2wgZm9yICR7cG9vbC5hZGRyZXNzfSB3YXMgY2xlYXJlZCBiZWNhdXNlIGFub3RoZXIgb3BlcmF0aW9uIGZhaWxlZCB3aXRoOiBcIiR7cG9vbC5zZXJ2ZXJFcnJvcj8ubWVzc2FnZX1cImA7XG4gICAgICAgIHN1cGVyKGVycm9yTWVzc2FnZSwgcG9vbC5zZXJ2ZXJFcnJvciA/IHsgY2F1c2U6IHBvb2wuc2VydmVyRXJyb3IgfSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IHBvb2wuYWRkcmVzcztcbiAgICAgICAgdGhpcy5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlBvb2xSZXF1c3RlZFJldHJ5KTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29Qb29sQ2xlYXJlZEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlBvb2xDbGVhcmVkRXJyb3IgPSBQb29sQ2xlYXJlZEVycm9yO1xuLyoqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgYSBjb25uZWN0aW9uIHBvb2wgaGFzIGJlZW4gY2xlYXJlZCBhZnRlciB0aGUgbW9uaXRvciBmb3IgdGhhdCBzZXJ2ZXIgdGltZWQgb3V0LlxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3IgZXh0ZW5kcyBQb29sQ2xlYXJlZEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IocG9vbCkge1xuICAgICAgICBzdXBlcihwb29sLCBgQ29ubmVjdGlvbiB0byAke3Bvb2wuYWRkcmVzc30gaW50ZXJydXB0ZWQgZHVlIHRvIHNlcnZlciBtb25pdG9yIHRpbWVvdXRgKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yID0gUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gYSByZXF1ZXN0IHRvIGNoZWNrIG91dCBhIGNvbm5lY3Rpb24gdGltZXMgb3V0XG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgV2FpdFF1ZXVlVGltZW91dEVycm9yIGV4dGVuZHMgZXJyb3JfMS5Nb25nb0RyaXZlckVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYWRkcmVzcykge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29XYWl0UXVldWVUaW1lb3V0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuV2FpdFF1ZXVlVGltZW91dEVycm9yID0gV2FpdFF1ZXVlVGltZW91dEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/handshake/client_metadata.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getFAASEnv = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst os = __webpack_require__(/*! os */ \"os\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = (__webpack_require__(/*! ../../../package.json */ \"(ssr)/./node_modules/mongodb/package.json\").version);\n/** @internal */\nclass LimitedSizeDocument {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */\n        this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n    ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = '' } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, 'utf8') <= 128\n            ? options.appName\n            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n        metadataDocument.ifItFitsItSits('application', { name });\n    }\n    const { name = '', version = '', platform = '' } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map()\n        .set('name', process.platform)\n        .set('architecture', process.arch)\n        .set('version', os.release())\n        .set('type', os.type());\n    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n        for (const key of osInfo.keys()) {\n            osInfo.delete(key);\n            if (osInfo.size === 0)\n                break;\n            if (metadataDocument.ifItFitsItSits('os', osInfo))\n                break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n            for (const key of faasEnv.keys()) {\n                faasEnv.delete(key);\n                if (faasEnv.size === 0)\n                    break;\n                if (metadataDocument.ifItFitsItSits('env', faasEnv))\n                    break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n    const { AWS_EXECUTION_ENV = '', AWS_LAMBDA_RUNTIME_API = '', FUNCTIONS_WORKER_RUNTIME = '', K_SERVICE = '', FUNCTION_NAME = '', VERCEL = '', AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '', AWS_REGION = '', FUNCTION_MEMORY_MB = '', FUNCTION_REGION = '', FUNCTION_TIMEOUT_SEC = '', VERCEL_REGION = '' } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set('region', VERCEL_REGION);\n        }\n        faasEnv.set('name', 'vercel');\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set('region', AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set('name', 'aws.lambda');\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set('name', 'azure.func');\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set('region', FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set('name', 'gcp.func');\n        return faasEnv;\n    }\n    return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n    if ('Deno' in globalThis) {\n        const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if ('Bun' in globalThis) {\n        const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n}\n//# sourceMappingURL=client_metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/metrics.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/metrics.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nclass ConnectionPoolMetrics {\n    constructor() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */\n    markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        }\n        else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n    markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        }\n        else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n    info(maxPoolSize) {\n        return ('Timed out while checking out a connection from connection pool: ' +\n            `maxPoolSize: ${maxPoolSize}, ` +\n            `connections in use by cursors: ${this.cursorConnections}, ` +\n            `connections in use by transactions: ${this.txnConnections}, ` +\n            `connections in use by other operations: ${this.otherConnections}`);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n    reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;\n//# sourceMappingURL=metrics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9tZXRyaWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixZQUFZO0FBQ3hDLDhDQUE4Qyx1QkFBdUI7QUFDckUsbURBQW1ELG9CQUFvQjtBQUN2RSx1REFBdUQsc0JBQXNCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9tZXRyaWNzLmpzPzBiNmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sTWV0cmljcyA9IHZvaWQgMDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbm5lY3Rpb25Qb29sTWV0cmljcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFyayBhIGNvbm5lY3Rpb24gYXMgcGlubmVkIGZvciBhIHNwZWNpZmljIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBtYXJrUGlubmVkKHBpblR5cGUpIHtcbiAgICAgICAgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4pIHtcbiAgICAgICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbm1hcmsgYSBjb25uZWN0aW9uIGFzIHBpbm5lZCBmb3IgYW4gb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIG1hcmtVbnBpbm5lZChwaW5UeXBlKSB7XG4gICAgICAgIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOKSB7XG4gICAgICAgICAgICB0aGlzLnR4bkNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLkNVUlNPUikge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JDb25uZWN0aW9ucyAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbWFwIG1ldHJpY3MgYXMgYSBzdHJpbmcuXG4gICAgICovXG4gICAgaW5mbyhtYXhQb29sU2l6ZSkge1xuICAgICAgICByZXR1cm4gKCdUaW1lZCBvdXQgd2hpbGUgY2hlY2tpbmcgb3V0IGEgY29ubmVjdGlvbiBmcm9tIGNvbm5lY3Rpb24gcG9vbDogJyArXG4gICAgICAgICAgICBgbWF4UG9vbFNpemU6ICR7bWF4UG9vbFNpemV9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgY3Vyc29yczogJHt0aGlzLmN1cnNvckNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IHRyYW5zYWN0aW9uczogJHt0aGlzLnR4bkNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IG90aGVyIG9wZXJhdGlvbnM6ICR7dGhpcy5vdGhlckNvbm5lY3Rpb25zfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgbWV0cmljcyB0byB0aGUgaW5pdGlhbCB2YWx1ZXMuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG59XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOID0gJ3R4bic7XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SID0gJ2N1cnNvcic7XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuT1RIRVIgPSAnb3RoZXInO1xuZXhwb3J0cy5Db25uZWN0aW9uUG9vbE1ldHJpY3MgPSBDb25uZWN0aW9uUG9vbE1ldHJpY3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/stream_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ../sdam/server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.hello = null;\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n        this.serverConnectionId = null;\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.hello = response;\n        this.type = (0, server_description_1.parseServerType)(response);\n        if ('connectionId' in response) {\n            this.serverConnectionId = this.parseServerConnectionID(response.connectionId);\n        }\n        else {\n            this.serverConnectionId = null;\n        }\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n    /* @internal */\n    parseServerConnectionID(serverConnectionId) {\n        // Connection ids are always integral, so it's safe to coerce doubles as well as\n        // any integral type.\n        return bson_1.Long.isLong(serverConnectionId)\n            ? serverConnectionId.toBigInt()\n            : // @ts-expect-error: Doubles are coercible to number\n                BigInt(serverConnectionId);\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9zdHJlYW1fZGVzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGVBQWUsbUJBQU8sQ0FBQyx5REFBUztBQUNoQyxpQkFBaUIsbUJBQU8sQ0FBQyx1RUFBZ0I7QUFDekMsNkJBQTZCLG1CQUFPLENBQUMsK0ZBQTRCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL3N0cmVhbV9kZXNjcmlwdGlvbi5qcz81MDgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vc2RhbS9jb21tb25cIik7XG5jb25zdCBzZXJ2ZXJfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL3NlcnZlcl9kZXNjcmlwdGlvblwiKTtcbmNvbnN0IFJFU1BPTlNFX0ZJRUxEUyA9IFtcbiAgICAnbWluV2lyZVZlcnNpb24nLFxuICAgICdtYXhXaXJlVmVyc2lvbicsXG4gICAgJ21heEJzb25PYmplY3RTaXplJyxcbiAgICAnbWF4TWVzc2FnZVNpemVCeXRlcycsXG4gICAgJ21heFdyaXRlQmF0Y2hTaXplJyxcbiAgICAnbG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcydcbl07XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgU3RyZWFtRGVzY3JpcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5oZWxsbyA9IG51bGw7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMudHlwZSA9IGNvbW1vbl8xLlNlcnZlclR5cGUuVW5rbm93bjtcbiAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhCc29uT2JqZWN0U2l6ZSA9IDE2Nzc3MjE2O1xuICAgICAgICB0aGlzLm1heE1lc3NhZ2VTaXplQnl0ZXMgPSA0ODAwMDAwMDtcbiAgICAgICAgdGhpcy5tYXhXcml0ZUJhdGNoU2l6ZSA9IDEwMDAwMDtcbiAgICAgICAgdGhpcy5sb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzID0gb3B0aW9ucz8ubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcztcbiAgICAgICAgdGhpcy5sb2FkQmFsYW5jZWQgPSAhIW9wdGlvbnM/LmxvYWRCYWxhbmNlZDtcbiAgICAgICAgdGhpcy5jb21wcmVzc29ycyA9XG4gICAgICAgICAgICBvcHRpb25zICYmIG9wdGlvbnMuY29tcHJlc3NvcnMgJiYgQXJyYXkuaXNBcnJheShvcHRpb25zLmNvbXByZXNzb3JzKVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5jb21wcmVzc29yc1xuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgIHRoaXMuc2VydmVyQ29ubmVjdGlvbklkID0gbnVsbDtcbiAgICB9XG4gICAgcmVjZWl2ZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oZWxsbyA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnR5cGUgPSAoMCwgc2VydmVyX2Rlc2NyaXB0aW9uXzEucGFyc2VTZXJ2ZXJUeXBlKShyZXNwb25zZSk7XG4gICAgICAgIGlmICgnY29ubmVjdGlvbklkJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJDb25uZWN0aW9uSWQgPSB0aGlzLnBhcnNlU2VydmVyQ29ubmVjdGlvbklEKHJlc3BvbnNlLmNvbm5lY3Rpb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlckNvbm5lY3Rpb25JZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBSRVNQT05TRV9GSUVMRFMpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVtmaWVsZF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXNbZmllbGRdID0gcmVzcG9uc2VbZmllbGRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdGluZyBjYXNlXG4gICAgICAgICAgICBpZiAoJ19fbm9kZWpzX21vY2tfc2VydmVyX18nIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fX25vZGVqc19tb2NrX3NlcnZlcl9fID0gcmVzcG9uc2VbJ19fbm9kZWpzX21vY2tfc2VydmVyX18nXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2UuY29tcHJlc3Npb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29tcHJlc3NvciA9IHRoaXMuY29tcHJlc3NvcnMuZmlsdGVyKGMgPT4gcmVzcG9uc2UuY29tcHJlc3Npb24/LmluY2x1ZGVzKGMpKVswXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBAaW50ZXJuYWwgKi9cbiAgICBwYXJzZVNlcnZlckNvbm5lY3Rpb25JRChzZXJ2ZXJDb25uZWN0aW9uSWQpIHtcbiAgICAgICAgLy8gQ29ubmVjdGlvbiBpZHMgYXJlIGFsd2F5cyBpbnRlZ3JhbCwgc28gaXQncyBzYWZlIHRvIGNvZXJjZSBkb3VibGVzIGFzIHdlbGwgYXNcbiAgICAgICAgLy8gYW55IGludGVncmFsIHR5cGUuXG4gICAgICAgIHJldHVybiBic29uXzEuTG9uZy5pc0xvbmcoc2VydmVyQ29ubmVjdGlvbklkKVxuICAgICAgICAgICAgPyBzZXJ2ZXJDb25uZWN0aW9uSWQudG9CaWdJbnQoKVxuICAgICAgICAgICAgOiAvLyBAdHMtZXhwZWN0LWVycm9yOiBEb3VibGVzIGFyZSBjb2VyY2libGUgdG8gbnVtYmVyXG4gICAgICAgICAgICAgICAgQmlnSW50KHNlcnZlckNvbm5lY3Rpb25JZCk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdGlvbiA9IFN0cmVhbURlc2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtX2Rlc2NyaXB0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/compression.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decompressResponse = exports.compressCommand = exports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst commands_1 = __webpack_require__(/*! ../commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if ('kModuleError' in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy': {\n            Snappy ??= loadSnappy();\n            return Snappy.compress(dataToBeCompressed);\n        }\n        case 'zstd': {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        }\n        case 'zlib': {\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return zlibDeflate(dataToBeCompressed, zlibOptions);\n        }\n        default: {\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n        }\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy: {\n            Snappy ??= loadSnappy();\n            return Snappy.uncompress(compressedData, { asBuffer: true });\n        }\n        case exports.Compressor.zstd: {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.decompress(compressedData);\n        }\n        case exports.Compressor.zlib: {\n            return zlibInflate(compressedData);\n        }\n        default: {\n            return compressedData;\n        }\n    }\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */\nasync function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command)\n        ? command\n        : new commands_1.OpCompressedRequest(command, {\n            agreedCompressor: description.agreedCompressor ?? 'none',\n            zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n        });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\nexports.compressCommand = compressCommand;\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */\nasync function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError('Message body and message header must be the same length');\n    }\n    return new ResponseType(message, header, messageBody);\n}\nexports.decompressResponse = decompressResponse;\n//# sourceMappingURL=compression.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = '3.6';\nexports.MAX_SUPPORTED_SERVER_VERSION = '7.0';\nexports.MIN_SUPPORTED_WIRE_VERSION = 6;\nexports.MAX_SUPPORTED_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = '7.0';\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcscUJBQXFCLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsdUNBQXVDLEdBQUcscUNBQXFDLEdBQUcsa0NBQWtDLEdBQUcsa0NBQWtDLEdBQUcsb0NBQW9DLEdBQUcsb0NBQW9DO0FBQ2xYLG9DQUFvQztBQUNwQyxvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFDckMsdUNBQXVDO0FBQ3ZDLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIscUJBQXFCO0FBQ3JCLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9jb25zdGFudHMuanM/NTgyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT1BfTVNHID0gZXhwb3J0cy5PUF9DT01QUkVTU0VEID0gZXhwb3J0cy5PUF9ERUxFVEUgPSBleHBvcnRzLk9QX1FVRVJZID0gZXhwb3J0cy5PUF9JTlNFUlQgPSBleHBvcnRzLk9QX1VQREFURSA9IGV4cG9ydHMuT1BfUkVQTFkgPSBleHBvcnRzLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OID0gZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSBleHBvcnRzLk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSB2b2lkIDA7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSAnMy42JztcbmV4cG9ydHMuTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9ICc3LjAnO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IDY7XG5leHBvcnRzLk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gMjE7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OID0gMjE7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT04gPSAnNy4wJztcbmV4cG9ydHMuT1BfUkVQTFkgPSAxO1xuZXhwb3J0cy5PUF9VUERBVEUgPSAyMDAxO1xuZXhwb3J0cy5PUF9JTlNFUlQgPSAyMDAyO1xuZXhwb3J0cy5PUF9RVUVSWSA9IDIwMDQ7XG5leHBvcnRzLk9QX0RFTEVURSA9IDIwMDY7XG5leHBvcnRzLk9QX0NPTVBSRVNTRUQgPSAyMDEyO1xuZXhwb3J0cy5PUF9NU0cgPSAyMDEzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.onData = void 0;\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/**\n * onData is adapted from Node.js' events.on helper\n * https://nodejs.org/api/events.html#eventsonemitter-eventname-options\n *\n * Returns an AsyncIterator that iterates each 'data' event emitted from emitter.\n * It will reject upon an error event or if the provided signal is aborted.\n */\nfunction onData(emitter, options) {\n    const signal = options.signal;\n    // Setup pending events and pending promise lists\n    /**\n     * When the caller has not yet called .next(), we store the\n     * value from the event in this list. Next time they call .next()\n     * we pull the first value out of this list and resolve a promise with it.\n     */\n    const unconsumedEvents = new utils_1.List();\n    /**\n     * When there has not yet been an event, a new promise will be created\n     * and implicitly stored in this list. When an event occurs we take the first\n     * promise in this list and resolve it.\n     */\n    const unconsumedPromises = new utils_1.List();\n    /**\n     * Stored an error created by an error event.\n     * This error will turn into a rejection for the subsequent .next() call\n     */\n    let error = null;\n    /** Set to true only after event listeners have been removed. */\n    let finished = false;\n    const iterator = {\n        next() {\n            // First, we consume all unread events\n            const value = unconsumedEvents.shift();\n            if (value != null) {\n                return Promise.resolve({ value, done: false });\n            }\n            // Then we error, if an error happened\n            // This happens one time if at all, because after 'error'\n            // we stop listening\n            if (error != null) {\n                const p = Promise.reject(error);\n                // Only the first element errors\n                error = null;\n                return p;\n            }\n            // If the iterator is finished, resolve to done\n            if (finished)\n                return closeHandler();\n            // Wait until an event happens\n            const { promise, resolve, reject } = (0, utils_1.promiseWithResolvers)();\n            unconsumedPromises.push({ resolve, reject });\n            return promise;\n        },\n        return() {\n            return closeHandler();\n        },\n        throw(err) {\n            errorHandler(err);\n            return Promise.resolve({ value: undefined, done: true });\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        }\n    };\n    // Adding event handlers\n    emitter.on('data', eventHandler);\n    emitter.on('error', errorHandler);\n    if (signal.aborted) {\n        // If the signal is aborted, set up the first .next() call to be a rejection\n        queueMicrotask(abortListener);\n    }\n    else {\n        signal.addEventListener('abort', abortListener, { once: true });\n    }\n    return iterator;\n    function abortListener() {\n        errorHandler(signal.reason);\n    }\n    function eventHandler(value) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.resolve({ value, done: false });\n        else\n            unconsumedEvents.push(value);\n    }\n    function errorHandler(err) {\n        const promise = unconsumedPromises.shift();\n        if (promise != null)\n            promise.reject(err);\n        else\n            error = err;\n        void closeHandler();\n    }\n    function closeHandler() {\n        // Adding event handlers\n        emitter.off('data', eventHandler);\n        emitter.off('error', errorHandler);\n        signal.removeEventListener('abort', abortListener);\n        finished = true;\n        const doneResult = { value: undefined, done: finished };\n        for (const promise of unconsumedPromises) {\n            promise.resolve(doneResult);\n        }\n        return Promise.resolve(doneResult);\n    }\n}\nexports.onData = onData;\n//# sourceMappingURL=on_data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL29uX2RhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG9CQUFvQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJCQUEyQjtBQUMvQyxzQ0FBc0MsaUJBQWlCO0FBQ3ZEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHFDQUFxQyw4QkFBOEI7QUFDbkUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxZQUFZO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsb0JBQW9CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL29uX2RhdGEuanM/ODM5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25EYXRhID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbi8qKlxuICogb25EYXRhIGlzIGFkYXB0ZWQgZnJvbSBOb2RlLmpzJyBldmVudHMub24gaGVscGVyXG4gKiBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c29uZW1pdHRlci1ldmVudG5hbWUtb3B0aW9uc1xuICpcbiAqIFJldHVybnMgYW4gQXN5bmNJdGVyYXRvciB0aGF0IGl0ZXJhdGVzIGVhY2ggJ2RhdGEnIGV2ZW50IGVtaXR0ZWQgZnJvbSBlbWl0dGVyLlxuICogSXQgd2lsbCByZWplY3QgdXBvbiBhbiBlcnJvciBldmVudCBvciBpZiB0aGUgcHJvdmlkZWQgc2lnbmFsIGlzIGFib3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIG9uRGF0YShlbWl0dGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc2lnbmFsID0gb3B0aW9ucy5zaWduYWw7XG4gICAgLy8gU2V0dXAgcGVuZGluZyBldmVudHMgYW5kIHBlbmRpbmcgcHJvbWlzZSBsaXN0c1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGNhbGxlciBoYXMgbm90IHlldCBjYWxsZWQgLm5leHQoKSwgd2Ugc3RvcmUgdGhlXG4gICAgICogdmFsdWUgZnJvbSB0aGUgZXZlbnQgaW4gdGhpcyBsaXN0LiBOZXh0IHRpbWUgdGhleSBjYWxsIC5uZXh0KClcbiAgICAgKiB3ZSBwdWxsIHRoZSBmaXJzdCB2YWx1ZSBvdXQgb2YgdGhpcyBsaXN0IGFuZCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0LlxuICAgICAqL1xuICAgIGNvbnN0IHVuY29uc3VtZWRFdmVudHMgPSBuZXcgdXRpbHNfMS5MaXN0KCk7XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGVyZSBoYXMgbm90IHlldCBiZWVuIGFuIGV2ZW50LCBhIG5ldyBwcm9taXNlIHdpbGwgYmUgY3JlYXRlZFxuICAgICAqIGFuZCBpbXBsaWNpdGx5IHN0b3JlZCBpbiB0aGlzIGxpc3QuIFdoZW4gYW4gZXZlbnQgb2NjdXJzIHdlIHRha2UgdGhlIGZpcnN0XG4gICAgICogcHJvbWlzZSBpbiB0aGlzIGxpc3QgYW5kIHJlc29sdmUgaXQuXG4gICAgICovXG4gICAgY29uc3QgdW5jb25zdW1lZFByb21pc2VzID0gbmV3IHV0aWxzXzEuTGlzdCgpO1xuICAgIC8qKlxuICAgICAqIFN0b3JlZCBhbiBlcnJvciBjcmVhdGVkIGJ5IGFuIGVycm9yIGV2ZW50LlxuICAgICAqIFRoaXMgZXJyb3Igd2lsbCB0dXJuIGludG8gYSByZWplY3Rpb24gZm9yIHRoZSBzdWJzZXF1ZW50IC5uZXh0KCkgY2FsbFxuICAgICAqL1xuICAgIGxldCBlcnJvciA9IG51bGw7XG4gICAgLyoqIFNldCB0byB0cnVlIG9ubHkgYWZ0ZXIgZXZlbnQgbGlzdGVuZXJzIGhhdmUgYmVlbiByZW1vdmVkLiAqL1xuICAgIGxldCBmaW5pc2hlZCA9IGZhbHNlO1xuICAgIGNvbnN0IGl0ZXJhdG9yID0ge1xuICAgICAgICBuZXh0KCkge1xuICAgICAgICAgICAgLy8gRmlyc3QsIHdlIGNvbnN1bWUgYWxsIHVucmVhZCBldmVudHNcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdW5jb25zdW1lZEV2ZW50cy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdmFsdWUsIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlbiB3ZSBlcnJvciwgaWYgYW4gZXJyb3IgaGFwcGVuZWRcbiAgICAgICAgICAgIC8vIFRoaXMgaGFwcGVucyBvbmUgdGltZSBpZiBhdCBhbGwsIGJlY2F1c2UgYWZ0ZXIgJ2Vycm9yJ1xuICAgICAgICAgICAgLy8gd2Ugc3RvcCBsaXN0ZW5pbmdcbiAgICAgICAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHRoZSBmaXJzdCBlbGVtZW50IGVycm9yc1xuICAgICAgICAgICAgICAgIGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgcmVzb2x2ZSB0byBkb25lXG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb3NlSGFuZGxlcigpO1xuICAgICAgICAgICAgLy8gV2FpdCB1bnRpbCBhbiBldmVudCBoYXBwZW5zXG4gICAgICAgICAgICBjb25zdCB7IHByb21pc2UsIHJlc29sdmUsIHJlamVjdCB9ID0gKDAsIHV0aWxzXzEucHJvbWlzZVdpdGhSZXNvbHZlcnMpKCk7XG4gICAgICAgICAgICB1bmNvbnN1bWVkUHJvbWlzZXMucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9LFxuICAgICAgICByZXR1cm4oKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xvc2VIYW5kbGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRocm93KGVycikge1xuICAgICAgICAgICAgZXJyb3JIYW5kbGVyKGVycik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBBZGRpbmcgZXZlbnQgaGFuZGxlcnNcbiAgICBlbWl0dGVyLm9uKCdkYXRhJywgZXZlbnRIYW5kbGVyKTtcbiAgICBlbWl0dGVyLm9uKCdlcnJvcicsIGVycm9ySGFuZGxlcik7XG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIC8vIElmIHRoZSBzaWduYWwgaXMgYWJvcnRlZCwgc2V0IHVwIHRoZSBmaXJzdCAubmV4dCgpIGNhbGwgdG8gYmUgYSByZWplY3Rpb25cbiAgICAgICAgcXVldWVNaWNyb3Rhc2soYWJvcnRMaXN0ZW5lcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydExpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICBmdW5jdGlvbiBhYm9ydExpc3RlbmVyKCkge1xuICAgICAgICBlcnJvckhhbmRsZXIoc2lnbmFsLnJlYXNvbik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV2ZW50SGFuZGxlcih2YWx1ZSkge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gdW5jb25zdW1lZFByb21pc2VzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChwcm9taXNlICE9IG51bGwpXG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoeyB2YWx1ZSwgZG9uZTogZmFsc2UgfSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHVuY29uc3VtZWRFdmVudHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnIpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHVuY29uc3VtZWRQcm9taXNlcy5zaGlmdCgpO1xuICAgICAgICBpZiAocHJvbWlzZSAhPSBudWxsKVxuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgIHZvaWQgY2xvc2VIYW5kbGVyKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3NlSGFuZGxlcigpIHtcbiAgICAgICAgLy8gQWRkaW5nIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIGVtaXR0ZXIub2ZmKCdkYXRhJywgZXZlbnRIYW5kbGVyKTtcbiAgICAgICAgZW1pdHRlci5vZmYoJ2Vycm9yJywgZXJyb3JIYW5kbGVyKTtcbiAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRMaXN0ZW5lcik7XG4gICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgZG9uZVJlc3VsdCA9IHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogZmluaXNoZWQgfTtcbiAgICAgICAgZm9yIChjb25zdCBwcm9taXNlIG9mIHVuY29uc3VtZWRQcm9taXNlcykge1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGRvbmVSZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZG9uZVJlc3VsdCk7XG4gICAgfVxufVxuZXhwb3J0cy5vbkRhdGEgPSBvbkRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbl9kYXRhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/on_data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/shared.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSharded = exports.getReadPreference = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst topology_description_1 = __webpack_require__(/*! ../../sdam/topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    // If we have an option readPreference override the command one\n    if (options?.readPreference) {\n        readPreference = options.readPreference;\n    }\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    //       happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\nexports.isSharded = isSharded;\n//# sourceMappingURL=shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyx5QkFBeUI7QUFDN0MsZ0JBQWdCLG1CQUFPLENBQUMsOERBQWE7QUFDckMsMEJBQTBCLG1CQUFPLENBQUMsa0ZBQXVCO0FBQ3pELGlCQUFpQixtQkFBTyxDQUFDLDBFQUFtQjtBQUM1QywrQkFBK0IsbUJBQU8sQ0FBQyxzR0FBaUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9zaGFyZWQuanM/YjI5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNTaGFyZGVkID0gZXhwb3J0cy5nZXRSZWFkUHJlZmVyZW5jZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCByZWFkX3ByZWZlcmVuY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi9yZWFkX3ByZWZlcmVuY2VcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9zZGFtL2NvbW1vblwiKTtcbmNvbnN0IHRvcG9sb2d5X2Rlc2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vc2RhbS90b3BvbG9neV9kZXNjcmlwdGlvblwiKTtcbmZ1bmN0aW9uIGdldFJlYWRQcmVmZXJlbmNlKG9wdGlvbnMpIHtcbiAgICAvLyBEZWZhdWx0IHRvIGNvbW1hbmQgdmVyc2lvbiBvZiB0aGUgcmVhZFByZWZlcmVuY2VcbiAgICBsZXQgcmVhZFByZWZlcmVuY2UgPSBvcHRpb25zPy5yZWFkUHJlZmVyZW5jZSA/PyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5O1xuICAgIC8vIElmIHdlIGhhdmUgYW4gb3B0aW9uIHJlYWRQcmVmZXJlbmNlIG92ZXJyaWRlIHRoZSBjb21tYW5kIG9uZVxuICAgIGlmIChvcHRpb25zPy5yZWFkUHJlZmVyZW5jZSkge1xuICAgICAgICByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVhZFByZWZlcmVuY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlYWRQcmVmZXJlbmNlID0gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UuZnJvbVN0cmluZyhyZWFkUHJlZmVyZW5jZSk7XG4gICAgfVxuICAgIGlmICghKHJlYWRQcmVmZXJlbmNlIGluc3RhbmNlb2YgcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcInJlYWRQcmVmZXJlbmNlXCIgbXVzdCBiZSBhIFJlYWRQcmVmZXJlbmNlIGluc3RhbmNlJyk7XG4gICAgfVxuICAgIHJldHVybiByZWFkUHJlZmVyZW5jZTtcbn1cbmV4cG9ydHMuZ2V0UmVhZFByZWZlcmVuY2UgPSBnZXRSZWFkUHJlZmVyZW5jZTtcbmZ1bmN0aW9uIGlzU2hhcmRlZCh0b3BvbG9neU9yU2VydmVyKSB7XG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uICYmIHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24udHlwZSA9PT0gY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIE5PVEU6IFRoaXMgaXMgaW5jcmVkaWJseSBpbmVmZmljaWVudCwgYW5kIHNob3VsZCBiZSByZW1vdmVkIG9uY2UgY29tbWFuZCBjb25zdHJ1Y3Rpb25cbiAgICAvLyAgICAgICBoYXBwZW5zIGJhc2VkIG9uIGBTZXJ2ZXJgIG5vdCBgVG9wb2xvZ3lgLlxuICAgIGlmICh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uICYmIHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gaW5zdGFuY2VvZiB0b3BvbG9neV9kZXNjcmlwdGlvbl8xLlRvcG9sb2d5RGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IEFycmF5LmZyb20odG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbi5zZXJ2ZXJzLnZhbHVlcygpKTtcbiAgICAgICAgcmV0dXJuIHNlcnZlcnMuc29tZSgoc2VydmVyKSA9PiBzZXJ2ZXIudHlwZSA9PT0gY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzU2hhcmRlZCA9IGlzU2hhcmRlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/collection.js":
/*!************************************************!*\
  !*** ./node_modules/mongodb/lib/collection.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Collection = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nconst list_search_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_search_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./operations/bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst count_1 = __webpack_require__(/*! ./operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst count_documents_1 = __webpack_require__(/*! ./operations/count_documents */ \"(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\");\nconst delete_1 = __webpack_require__(/*! ./operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst distinct_1 = __webpack_require__(/*! ./operations/distinct */ \"(ssr)/./node_modules/mongodb/lib/operations/distinct.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst estimated_document_count_1 = __webpack_require__(/*! ./operations/estimated_document_count */ \"(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst insert_1 = __webpack_require__(/*! ./operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst is_capped_1 = __webpack_require__(/*! ./operations/is_capped */ \"(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\");\nconst options_operation_1 = __webpack_require__(/*! ./operations/options_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst create_1 = __webpack_require__(/*! ./operations/search_indexes/create */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\");\nconst drop_2 = __webpack_require__(/*! ./operations/search_indexes/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\");\nconst update_1 = __webpack_require__(/*! ./operations/search_indexes/update */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\");\nconst update_2 = __webpack_require__(/*! ./operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */\n    get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndDelete(filter, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options =\n            typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null\n            ? null\n            : typeof indexNameOrOptions === 'object'\n                ? null\n                : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([description]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    async createSearchIndexes(descriptions) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async dropSearchIndex(name) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async updateSearchIndex(name, definition) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/connection_string.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/connection_string.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst mongodb_connection_string_url_1 = __webpack_require__(/*! mongodb-connection-string-url */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst client_metadata_1 = __webpack_require__(/*! ./cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst encrypter_1 = __webpack_require__(/*! ./encrypter */ \"(ssr)/./node_modules/mongodb/lib/encrypter.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst monitor_1 = __webpack_require__(/*! ./sdam/monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n            throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n        }\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Resolve TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await dns.promises.resolveTxt(lookupAddress);\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    switch (value) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === '') {\n        return;\n    }\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)) {\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes('')) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties) {\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n            }\n        }\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n    for (const key of allProvidedKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n        const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n            .concat(allProvidedOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n            }\n        }\n        else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allProvidedOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allProvidedOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath,\n            mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n            mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverMonitoringMode: {\n        default: 'auto',\n        transform({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    timeoutMS: {\n        type: 'uint'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: 'string'\n    },\n    tlsCRLFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: 'boolean',\n        deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    useUnifiedTopology: {\n        type: 'boolean',\n        deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    // MongoLogger\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogPath: {\n        transform({ values: [value] }) {\n            if (!((typeof value === 'string' && ['stderr', 'stdout'].includes(value)) ||\n                (value &&\n                    typeof value === 'object' &&\n                    'write' in value &&\n                    typeof value.write === 'function'))) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogComponentSeverities: {\n        transform({ values: [value] }) {\n            if (typeof value !== 'object' || !value) {\n                throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n            }\n            for (const [k, v] of Object.entries(value)) {\n                if (typeof v !== 'string' || typeof k !== 'string') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n                }\n                if (!Object.values(mongo_logger_1.MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n                    throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n                }\n                if (!Object.values(mongo_logger_1.SeverityLevel).some(val => val === v)) {\n                    throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n                }\n            }\n            return value;\n        }\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */\n    mongodbLogMaxDocumentLength: { type: 'uint' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([\n    Symbol.for('@@mdb.skipPingOnConnect'),\n    Symbol.for('@@mdb.enableMongoLogger'),\n    Symbol.for('@@mdb.internalLoggerConfig')\n]);\n//# sourceMappingURL=connection_string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/connection_string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/constants.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.WAITING_FOR_SUITABLE_SERVER = exports.SERVER_SELECTION_SUCCEEDED = exports.SERVER_SELECTION_FAILED = exports.SERVER_SELECTION_STARTED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = exports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = void 0;\nexports.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nexports.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nexports.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nexports.SYSTEM_USER_COLLECTION = 'system.users';\nexports.SYSTEM_COMMAND_COLLECTION = '$cmd';\nexports.SYSTEM_JS_COLLECTION = 'system.js';\n// events\nexports.ERROR = 'error';\nexports.TIMEOUT = 'timeout';\nexports.CLOSE = 'close';\nexports.OPEN = 'open';\nexports.CONNECT = 'connect';\nexports.CLOSED = 'closed';\nexports.ENDED = 'ended';\nexports.MESSAGE = 'message';\nexports.PINNED = 'pinned';\nexports.UNPINNED = 'unpinned';\nexports.DESCRIPTION_RECEIVED = 'descriptionReceived';\n/** @internal */\nexports.SERVER_OPENING = 'serverOpening';\n/** @internal */\nexports.SERVER_CLOSED = 'serverClosed';\n/** @internal */\nexports.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @internal */\nexports.TOPOLOGY_OPENING = 'topologyOpening';\n/** @internal */\nexports.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @internal */\nexports.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @internal */\nexports.SERVER_SELECTION_STARTED = 'serverSelectionStarted';\n/** @internal */\nexports.SERVER_SELECTION_FAILED = 'serverSelectionFailed';\n/** @internal */\nexports.SERVER_SELECTION_SUCCEEDED = 'serverSelectionSucceeded';\n/** @internal */\nexports.WAITING_FOR_SUITABLE_SERVER = 'waitingForSuitableServer';\n/** @internal */\nexports.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/** @internal */\nexports.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/** @internal */\nexports.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/** @internal */\nexports.CONNECTION_POOL_READY = 'connectionPoolReady';\n/** @internal */\nexports.CONNECTION_CREATED = 'connectionCreated';\n/** @internal */\nexports.CONNECTION_READY = 'connectionReady';\n/** @internal */\nexports.CONNECTION_CLOSED = 'connectionClosed';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/** @internal */\nexports.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/** @internal */\nexports.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nexports.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\n/** @internal */\nexports.COMMAND_STARTED = 'commandStarted';\n/** @internal */\nexports.COMMAND_SUCCEEDED = 'commandSucceeded';\n/** @internal */\nexports.COMMAND_FAILED = 'commandFailed';\n/** @internal */\nexports.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\n/** @internal */\nexports.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\n/** @internal */\nexports.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\nexports.RESPONSE = 'response';\nexports.MORE = 'more';\nexports.INIT = 'init';\nexports.CHANGE = 'change';\nexports.END = 'end';\nexports.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @public */\nexports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */\nexports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */\nexports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */\nexports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */\nexports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */\nexports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */\nexports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND = 'ismaster';\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFdBQVcsR0FBRyxjQUFjLEdBQUcsWUFBWSxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsR0FBRywrQkFBK0IsR0FBRyxrQ0FBa0MsR0FBRyxnQ0FBZ0MsR0FBRyxzQkFBc0IsR0FBRyx5QkFBeUIsR0FBRyx1QkFBdUIsR0FBRyw2QkFBNkIsR0FBRyw2QkFBNkIsR0FBRyw4QkFBOEIsR0FBRyxtQ0FBbUMsR0FBRyxvQ0FBb0MsR0FBRyx5QkFBeUIsR0FBRyx3QkFBd0IsR0FBRywwQkFBMEIsR0FBRyw2QkFBNkIsR0FBRywrQkFBK0IsR0FBRyw4QkFBOEIsR0FBRywrQkFBK0IsR0FBRyxtQ0FBbUMsR0FBRyxrQ0FBa0MsR0FBRywrQkFBK0IsR0FBRyxnQ0FBZ0MsR0FBRyxvQ0FBb0MsR0FBRyx1QkFBdUIsR0FBRyx3QkFBd0IsR0FBRyxrQ0FBa0MsR0FBRyxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRyw0QkFBNEIsR0FBRyxnQkFBZ0IsR0FBRyxjQUFjLEdBQUcsZUFBZSxHQUFHLGFBQWEsR0FBRyxjQUFjLEdBQUcsZUFBZSxHQUFHLFlBQVksR0FBRyxhQUFhLEdBQUcsZUFBZSxHQUFHLGFBQWEsR0FBRyw0QkFBNEIsR0FBRyxpQ0FBaUMsR0FBRyw4QkFBOEIsR0FBRyxpQ0FBaUMsR0FBRywrQkFBK0IsR0FBRyxtQ0FBbUM7QUFDeDJDLHVDQUF1QyxHQUFHLDRCQUE0QixHQUFHLDJCQUEyQixHQUFHLDJCQUEyQixHQUFHLDJCQUEyQixHQUFHLGtCQUFrQixHQUFHLHVCQUF1QixHQUFHLG1CQUFtQixHQUFHLHdCQUF3QixHQUFHLDRCQUE0QjtBQUMvUixtQ0FBbUM7QUFDbkMsK0JBQStCO0FBQy9CLGlDQUFpQztBQUNqQyw4QkFBOEI7QUFDOUIsaUNBQWlDO0FBQ2pDLDRCQUE0QjtBQUM1QjtBQUNBLGFBQWE7QUFDYixlQUFlO0FBQ2YsYUFBYTtBQUNiLFlBQVk7QUFDWixlQUFlO0FBQ2YsY0FBYztBQUNkLGFBQWE7QUFDYixlQUFlO0FBQ2YsY0FBYztBQUNkLGdCQUFnQjtBQUNoQiw0QkFBNEI7QUFDNUI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0EsK0JBQStCO0FBQy9CLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osWUFBWTtBQUNaLGNBQWM7QUFDZCxXQUFXO0FBQ1gsNEJBQTRCO0FBQzVCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY29uc3RhbnRzLmpzPzdmOTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVORCA9IGV4cG9ydHMuQ0hBTkdFID0gZXhwb3J0cy5JTklUID0gZXhwb3J0cy5NT1JFID0gZXhwb3J0cy5SRVNQT05TRSA9IGV4cG9ydHMuU0VSVkVSX0hFQVJUQkVBVF9GQUlMRUQgPSBleHBvcnRzLlNFUlZFUl9IRUFSVEJFQVRfU1VDQ0VFREVEID0gZXhwb3J0cy5TRVJWRVJfSEVBUlRCRUFUX1NUQVJURUQgPSBleHBvcnRzLkNPTU1BTkRfRkFJTEVEID0gZXhwb3J0cy5DT01NQU5EX1NVQ0NFRURFRCA9IGV4cG9ydHMuQ09NTUFORF9TVEFSVEVEID0gZXhwb3J0cy5DTFVTVEVSX1RJTUVfUkVDRUlWRUQgPSBleHBvcnRzLkNPTk5FQ1RJT05fQ0hFQ0tFRF9JTiA9IGV4cG9ydHMuQ09OTkVDVElPTl9DSEVDS0VEX09VVCA9IGV4cG9ydHMuQ09OTkVDVElPTl9DSEVDS19PVVRfRkFJTEVEID0gZXhwb3J0cy5DT05ORUNUSU9OX0NIRUNLX09VVF9TVEFSVEVEID0gZXhwb3J0cy5DT05ORUNUSU9OX0NMT1NFRCA9IGV4cG9ydHMuQ09OTkVDVElPTl9SRUFEWSA9IGV4cG9ydHMuQ09OTkVDVElPTl9DUkVBVEVEID0gZXhwb3J0cy5DT05ORUNUSU9OX1BPT0xfUkVBRFkgPSBleHBvcnRzLkNPTk5FQ1RJT05fUE9PTF9DTEVBUkVEID0gZXhwb3J0cy5DT05ORUNUSU9OX1BPT0xfQ0xPU0VEID0gZXhwb3J0cy5DT05ORUNUSU9OX1BPT0xfQ1JFQVRFRCA9IGV4cG9ydHMuV0FJVElOR19GT1JfU1VJVEFCTEVfU0VSVkVSID0gZXhwb3J0cy5TRVJWRVJfU0VMRUNUSU9OX1NVQ0NFRURFRCA9IGV4cG9ydHMuU0VSVkVSX1NFTEVDVElPTl9GQUlMRUQgPSBleHBvcnRzLlNFUlZFUl9TRUxFQ1RJT05fU1RBUlRFRCA9IGV4cG9ydHMuVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRCA9IGV4cG9ydHMuVE9QT0xPR1lfQ0xPU0VEID0gZXhwb3J0cy5UT1BPTE9HWV9PUEVOSU5HID0gZXhwb3J0cy5TRVJWRVJfREVTQ1JJUFRJT05fQ0hBTkdFRCA9IGV4cG9ydHMuU0VSVkVSX0NMT1NFRCA9IGV4cG9ydHMuU0VSVkVSX09QRU5JTkcgPSBleHBvcnRzLkRFU0NSSVBUSU9OX1JFQ0VJVkVEID0gZXhwb3J0cy5VTlBJTk5FRCA9IGV4cG9ydHMuUElOTkVEID0gZXhwb3J0cy5NRVNTQUdFID0gZXhwb3J0cy5FTkRFRCA9IGV4cG9ydHMuQ0xPU0VEID0gZXhwb3J0cy5DT05ORUNUID0gZXhwb3J0cy5PUEVOID0gZXhwb3J0cy5DTE9TRSA9IGV4cG9ydHMuVElNRU9VVCA9IGV4cG9ydHMuRVJST1IgPSBleHBvcnRzLlNZU1RFTV9KU19DT0xMRUNUSU9OID0gZXhwb3J0cy5TWVNURU1fQ09NTUFORF9DT0xMRUNUSU9OID0gZXhwb3J0cy5TWVNURU1fVVNFUl9DT0xMRUNUSU9OID0gZXhwb3J0cy5TWVNURU1fUFJPRklMRV9DT0xMRUNUSU9OID0gZXhwb3J0cy5TWVNURU1fSU5ERVhfQ09MTEVDVElPTiA9IGV4cG9ydHMuU1lTVEVNX05BTUVTUEFDRV9DT0xMRUNUSU9OID0gdm9pZCAwO1xuZXhwb3J0cy5MRUdBQ1lfSEVMTE9fQ09NTUFORF9DQU1FTF9DQVNFID0gZXhwb3J0cy5MRUdBQ1lfSEVMTE9fQ09NTUFORCA9IGV4cG9ydHMuTU9OR09fQ0xJRU5UX0VWRU5UUyA9IGV4cG9ydHMuTE9DQUxfU0VSVkVSX0VWRU5UUyA9IGV4cG9ydHMuU0VSVkVSX1JFTEFZX0VWRU5UUyA9IGV4cG9ydHMuQVBNX0VWRU5UUyA9IGV4cG9ydHMuVE9QT0xPR1lfRVZFTlRTID0gZXhwb3J0cy5DTUFQX0VWRU5UUyA9IGV4cG9ydHMuSEVBUlRCRUFUX0VWRU5UUyA9IGV4cG9ydHMuUkVTVU1FX1RPS0VOX0NIQU5HRUQgPSB2b2lkIDA7XG5leHBvcnRzLlNZU1RFTV9OQU1FU1BBQ0VfQ09MTEVDVElPTiA9ICdzeXN0ZW0ubmFtZXNwYWNlcyc7XG5leHBvcnRzLlNZU1RFTV9JTkRFWF9DT0xMRUNUSU9OID0gJ3N5c3RlbS5pbmRleGVzJztcbmV4cG9ydHMuU1lTVEVNX1BST0ZJTEVfQ09MTEVDVElPTiA9ICdzeXN0ZW0ucHJvZmlsZSc7XG5leHBvcnRzLlNZU1RFTV9VU0VSX0NPTExFQ1RJT04gPSAnc3lzdGVtLnVzZXJzJztcbmV4cG9ydHMuU1lTVEVNX0NPTU1BTkRfQ09MTEVDVElPTiA9ICckY21kJztcbmV4cG9ydHMuU1lTVEVNX0pTX0NPTExFQ1RJT04gPSAnc3lzdGVtLmpzJztcbi8vIGV2ZW50c1xuZXhwb3J0cy5FUlJPUiA9ICdlcnJvcic7XG5leHBvcnRzLlRJTUVPVVQgPSAndGltZW91dCc7XG5leHBvcnRzLkNMT1NFID0gJ2Nsb3NlJztcbmV4cG9ydHMuT1BFTiA9ICdvcGVuJztcbmV4cG9ydHMuQ09OTkVDVCA9ICdjb25uZWN0JztcbmV4cG9ydHMuQ0xPU0VEID0gJ2Nsb3NlZCc7XG5leHBvcnRzLkVOREVEID0gJ2VuZGVkJztcbmV4cG9ydHMuTUVTU0FHRSA9ICdtZXNzYWdlJztcbmV4cG9ydHMuUElOTkVEID0gJ3Bpbm5lZCc7XG5leHBvcnRzLlVOUElOTkVEID0gJ3VucGlubmVkJztcbmV4cG9ydHMuREVTQ1JJUFRJT05fUkVDRUlWRUQgPSAnZGVzY3JpcHRpb25SZWNlaXZlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLlNFUlZFUl9PUEVOSU5HID0gJ3NlcnZlck9wZW5pbmcnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5TRVJWRVJfQ0xPU0VEID0gJ3NlcnZlckNsb3NlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLlNFUlZFUl9ERVNDUklQVElPTl9DSEFOR0VEID0gJ3NlcnZlckRlc2NyaXB0aW9uQ2hhbmdlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLlRPUE9MT0dZX09QRU5JTkcgPSAndG9wb2xvZ3lPcGVuaW5nJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuVE9QT0xPR1lfQ0xPU0VEID0gJ3RvcG9sb2d5Q2xvc2VkJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRCA9ICd0b3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLlNFUlZFUl9TRUxFQ1RJT05fU1RBUlRFRCA9ICdzZXJ2ZXJTZWxlY3Rpb25TdGFydGVkJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuU0VSVkVSX1NFTEVDVElPTl9GQUlMRUQgPSAnc2VydmVyU2VsZWN0aW9uRmFpbGVkJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuU0VSVkVSX1NFTEVDVElPTl9TVUNDRUVERUQgPSAnc2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuV0FJVElOR19GT1JfU1VJVEFCTEVfU0VSVkVSID0gJ3dhaXRpbmdGb3JTdWl0YWJsZVNlcnZlcic7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTk5FQ1RJT05fUE9PTF9DUkVBVEVEID0gJ2Nvbm5lY3Rpb25Qb29sQ3JlYXRlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTk5FQ1RJT05fUE9PTF9DTE9TRUQgPSAnY29ubmVjdGlvblBvb2xDbG9zZWQnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5DT05ORUNUSU9OX1BPT0xfQ0xFQVJFRCA9ICdjb25uZWN0aW9uUG9vbENsZWFyZWQnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5DT05ORUNUSU9OX1BPT0xfUkVBRFkgPSAnY29ubmVjdGlvblBvb2xSZWFkeSc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTk5FQ1RJT05fQ1JFQVRFRCA9ICdjb25uZWN0aW9uQ3JlYXRlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTk5FQ1RJT05fUkVBRFkgPSAnY29ubmVjdGlvblJlYWR5Jztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuQ09OTkVDVElPTl9DTE9TRUQgPSAnY29ubmVjdGlvbkNsb3NlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTk5FQ1RJT05fQ0hFQ0tfT1VUX1NUQVJURUQgPSAnY29ubmVjdGlvbkNoZWNrT3V0U3RhcnRlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTk5FQ1RJT05fQ0hFQ0tfT1VUX0ZBSUxFRCA9ICdjb25uZWN0aW9uQ2hlY2tPdXRGYWlsZWQnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5DT05ORUNUSU9OX0NIRUNLRURfT1VUID0gJ2Nvbm5lY3Rpb25DaGVja2VkT3V0Jztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuQ09OTkVDVElPTl9DSEVDS0VEX0lOID0gJ2Nvbm5lY3Rpb25DaGVja2VkSW4nO1xuZXhwb3J0cy5DTFVTVEVSX1RJTUVfUkVDRUlWRUQgPSAnY2x1c3RlclRpbWVSZWNlaXZlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTU1BTkRfU1RBUlRFRCA9ICdjb21tYW5kU3RhcnRlZCc7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkNPTU1BTkRfU1VDQ0VFREVEID0gJ2NvbW1hbmRTdWNjZWVkZWQnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5DT01NQU5EX0ZBSUxFRCA9ICdjb21tYW5kRmFpbGVkJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuU0VSVkVSX0hFQVJUQkVBVF9TVEFSVEVEID0gJ3NlcnZlckhlYXJ0YmVhdFN0YXJ0ZWQnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5TRVJWRVJfSEVBUlRCRUFUX1NVQ0NFRURFRCA9ICdzZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWQnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5TRVJWRVJfSEVBUlRCRUFUX0ZBSUxFRCA9ICdzZXJ2ZXJIZWFydGJlYXRGYWlsZWQnO1xuZXhwb3J0cy5SRVNQT05TRSA9ICdyZXNwb25zZSc7XG5leHBvcnRzLk1PUkUgPSAnbW9yZSc7XG5leHBvcnRzLklOSVQgPSAnaW5pdCc7XG5leHBvcnRzLkNIQU5HRSA9ICdjaGFuZ2UnO1xuZXhwb3J0cy5FTkQgPSAnZW5kJztcbmV4cG9ydHMuUkVTVU1FX1RPS0VOX0NIQU5HRUQgPSAncmVzdW1lVG9rZW5DaGFuZ2VkJztcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkhFQVJUQkVBVF9FVkVOVFMgPSBPYmplY3QuZnJlZXplKFtcbiAgICBleHBvcnRzLlNFUlZFUl9IRUFSVEJFQVRfU1RBUlRFRCxcbiAgICBleHBvcnRzLlNFUlZFUl9IRUFSVEJFQVRfU1VDQ0VFREVELFxuICAgIGV4cG9ydHMuU0VSVkVSX0hFQVJUQkVBVF9GQUlMRURcbl0pO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuQ01BUF9FVkVOVFMgPSBPYmplY3QuZnJlZXplKFtcbiAgICBleHBvcnRzLkNPTk5FQ1RJT05fUE9PTF9DUkVBVEVELFxuICAgIGV4cG9ydHMuQ09OTkVDVElPTl9QT09MX1JFQURZLFxuICAgIGV4cG9ydHMuQ09OTkVDVElPTl9QT09MX0NMRUFSRUQsXG4gICAgZXhwb3J0cy5DT05ORUNUSU9OX1BPT0xfQ0xPU0VELFxuICAgIGV4cG9ydHMuQ09OTkVDVElPTl9DUkVBVEVELFxuICAgIGV4cG9ydHMuQ09OTkVDVElPTl9SRUFEWSxcbiAgICBleHBvcnRzLkNPTk5FQ1RJT05fQ0xPU0VELFxuICAgIGV4cG9ydHMuQ09OTkVDVElPTl9DSEVDS19PVVRfU1RBUlRFRCxcbiAgICBleHBvcnRzLkNPTk5FQ1RJT05fQ0hFQ0tfT1VUX0ZBSUxFRCxcbiAgICBleHBvcnRzLkNPTk5FQ1RJT05fQ0hFQ0tFRF9PVVQsXG4gICAgZXhwb3J0cy5DT05ORUNUSU9OX0NIRUNLRURfSU5cbl0pO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuVE9QT0xPR1lfRVZFTlRTID0gT2JqZWN0LmZyZWV6ZShbXG4gICAgZXhwb3J0cy5TRVJWRVJfT1BFTklORyxcbiAgICBleHBvcnRzLlNFUlZFUl9DTE9TRUQsXG4gICAgZXhwb3J0cy5TRVJWRVJfREVTQ1JJUFRJT05fQ0hBTkdFRCxcbiAgICBleHBvcnRzLlRPUE9MT0dZX09QRU5JTkcsXG4gICAgZXhwb3J0cy5UT1BPTE9HWV9DTE9TRUQsXG4gICAgZXhwb3J0cy5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VELFxuICAgIGV4cG9ydHMuRVJST1IsXG4gICAgZXhwb3J0cy5USU1FT1VULFxuICAgIGV4cG9ydHMuQ0xPU0Vcbl0pO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuQVBNX0VWRU5UUyA9IE9iamVjdC5mcmVlemUoW1xuICAgIGV4cG9ydHMuQ09NTUFORF9TVEFSVEVELFxuICAgIGV4cG9ydHMuQ09NTUFORF9TVUNDRUVERUQsXG4gICAgZXhwb3J0cy5DT01NQU5EX0ZBSUxFRFxuXSk7XG4vKipcbiAqIEFsbCBldmVudHMgdGhhdCB3ZSByZWxheSB0byB0aGUgYFRvcG9sb2d5YFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuU0VSVkVSX1JFTEFZX0VWRU5UUyA9IE9iamVjdC5mcmVlemUoW1xuICAgIGV4cG9ydHMuU0VSVkVSX0hFQVJUQkVBVF9TVEFSVEVELFxuICAgIGV4cG9ydHMuU0VSVkVSX0hFQVJUQkVBVF9TVUNDRUVERUQsXG4gICAgZXhwb3J0cy5TRVJWRVJfSEVBUlRCRUFUX0ZBSUxFRCxcbiAgICBleHBvcnRzLkNPTU1BTkRfU1RBUlRFRCxcbiAgICBleHBvcnRzLkNPTU1BTkRfU1VDQ0VFREVELFxuICAgIGV4cG9ydHMuQ09NTUFORF9GQUlMRUQsXG4gICAgLi4uZXhwb3J0cy5DTUFQX0VWRU5UU1xuXSk7XG4vKipcbiAqIEFsbCBldmVudHMgd2UgbGlzdGVuIHRvIGZyb20gYFNlcnZlcmAgaW5zdGFuY2VzLCBidXQgZG8gbm90IGZvcndhcmQgdG8gdGhlIGNsaWVudFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydHMuTE9DQUxfU0VSVkVSX0VWRU5UUyA9IE9iamVjdC5mcmVlemUoW1xuICAgIGV4cG9ydHMuQ09OTkVDVCxcbiAgICBleHBvcnRzLkRFU0NSSVBUSU9OX1JFQ0VJVkVELFxuICAgIGV4cG9ydHMuQ0xPU0VELFxuICAgIGV4cG9ydHMuRU5ERURcbl0pO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuTU9OR09fQ0xJRU5UX0VWRU5UUyA9IE9iamVjdC5mcmVlemUoW1xuICAgIC4uLmV4cG9ydHMuQ01BUF9FVkVOVFMsXG4gICAgLi4uZXhwb3J0cy5BUE1fRVZFTlRTLFxuICAgIC4uLmV4cG9ydHMuVE9QT0xPR1lfRVZFTlRTLFxuICAgIC4uLmV4cG9ydHMuSEVBUlRCRUFUX0VWRU5UU1xuXSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhlIGxlZ2FjeSBoZWxsbyBjb21tYW5kIHRoYXQgd2FzIGRlcHJlY2F0ZWQgaW4gTW9uZ29EQiA1LjAuXG4gKi9cbmV4cG9ydHMuTEVHQUNZX0hFTExPX0NPTU1BTkQgPSAnaXNtYXN0ZXInO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFRoZSBsZWdhY3kgaGVsbG8gY29tbWFuZCB0aGF0IHdhcyBkZXByZWNhdGVkIGluIE1vbmdvREIgNS4wLlxuICovXG5leHBvcnRzLkxFR0FDWV9IRUxMT19DT01NQU5EX0NBTUVMX0NBU0UgPSAnaXNNYXN0ZXInO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/abstract_cursor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst kill_cursors_1 = __webpack_require__(/*! ../operations/kill_cursors */ \"(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kClient = Symbol('client');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(client, namespace, options = {}) {\n        super();\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n        }\n        this[kClient] = client;\n        this[kNamespace] = namespace;\n        this[kId] = null;\n        this[kDocuments] = new utils_1.List();\n        this[kInitialized] = false;\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kOptions] = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options)\n        };\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this[kOptions].readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this[kOptions].batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this[kOptions].comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this[kOptions].maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === 'number') {\n            this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this[kSession] = options.session;\n        }\n        else {\n            this[kSession] = this[kClient].startSession({ owner: this, explicit: false });\n        }\n    }\n    get id() {\n        return this[kId] ?? undefined;\n    }\n    /** @internal */\n    get isDead() {\n        return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n    }\n    /** @internal */\n    get client() {\n        return this[kClient];\n    }\n    /** @internal */\n    get server() {\n        return this[kServer];\n    }\n    get namespace() {\n        return this[kNamespace];\n    }\n    get readPreference() {\n        return this[kOptions].readPreference;\n    }\n    get readConcern() {\n        return this[kOptions].readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this[kSession];\n    }\n    set session(clientSession) {\n        this[kSession] = clientSession;\n    }\n    /** @internal */\n    get cursorOptions() {\n        return this[kOptions];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get killed() {\n        return this[kKilled];\n    }\n    get loadBalanced() {\n        return !!this[kClient].topology?.loadBalanced;\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n        for (let count = 0; count < documentsToRead; count++) {\n            const document = this[kDocuments].shift();\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            while (true) {\n                const document = await this.next();\n                // Intentional strict null check, because users can map cursors to falsey values.\n                // We allow mapping to all values except for null.\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    if (!this.closed) {\n                        const message = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                        await cleanupCursor(this, { needsToEmitClosed: true }).catch(() => null);\n                        throw new error_1.MongoAPIError(message);\n                    }\n                    break;\n                }\n                yield document;\n                if (this[kId] === bson_1.Long.ZERO) {\n                    // Cursor exhausted\n                    break;\n                }\n            }\n        }\n        finally {\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.closed) {\n                await this.close().catch(() => null);\n            }\n        }\n    }\n    stream(options) {\n        if (options?.transform) {\n            const transform = options.transform;\n            const readable = new ReadableCursorStream(this);\n            const transformedStream = readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n            // Bubble errors to transformed stream, because otherwise no way\n            // to handle this error.\n            readable.on('error', err => transformedStream.emit('error', err));\n            return transformedStream;\n        }\n        return new ReadableCursorStream(this);\n    }\n    async hasNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this[kDocuments].length !== 0) {\n            return true;\n        }\n        const doc = await next(this, { blocking: true, transform: false });\n        if (doc) {\n            this[kDocuments].unshift(doc);\n            return true;\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    async next() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: true, transform: true });\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: false, transform: true });\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    async forEach(iterator) {\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this) {\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    async close() {\n        const needsToEmitClosed = !this[kClosed];\n        this[kClosed] = true;\n        await cleanupCursor(this, { needsToEmitClosed });\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    async toArray() {\n        const array = [];\n        for await (const document of this) {\n            array.push(document);\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        assertUninitialized(this);\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this[kOptions][flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        assertUninitialized(this);\n        const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n        if (oldTransform) {\n            this[kTransform] = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this[kTransform] = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        assertUninitialized(this);\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this[kOptions].readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        assertUninitialized(this);\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this[kOptions].readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        assertUninitialized(this);\n        if (this[kOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this[kOptions].batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (!this[kInitialized]) {\n            return;\n        }\n        this[kId] = null;\n        this[kDocuments].clear();\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kInitialized] = false;\n        const session = this[kSession];\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false) {\n                if (!session.hasEnded) {\n                    session.endSession().catch(() => null);\n                }\n                this[kSession] = this.client.startSession({ owner: this, explicit: false });\n            }\n        }\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], {\n            ...this[kOptions],\n            session: this[kSession],\n            batchSize\n        });\n        return (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n    async [kInit]() {\n        try {\n            const state = await this._initialize(this[kSession]);\n            const response = state.response;\n            this[kServer] = state.server;\n            if (response.cursor) {\n                // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                this[kId] =\n                    typeof response.cursor.id === 'number'\n                        ? bson_1.Long.fromNumber(response.cursor.id)\n                        : typeof response.cursor.id === 'bigint'\n                            ? bson_1.Long.fromBigInt(response.cursor.id)\n                            : response.cursor.id;\n                if (response.cursor.ns) {\n                    this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                }\n                this[kDocuments].pushMany(response.cursor.firstBatch);\n            }\n            // When server responses return without a cursor document, we close this cursor\n            // and return the raw server response. This is often the case for explain commands\n            // for example\n            if (this[kId] == null) {\n                this[kId] = bson_1.Long.ZERO;\n                // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                this[kDocuments].push(state.response);\n            }\n            // the cursor is now initialized, even if it is dead\n            this[kInitialized] = true;\n        }\n        catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this[kInitialized] = true;\n            await cleanupCursor(this, { error });\n            throw error;\n        }\n        if (this.isDead) {\n            await cleanupCursor(this, undefined);\n        }\n        return;\n    }\n}\n/** @event */\nAbstractCursor.CLOSE = 'close';\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */\nasync function next(cursor, { blocking, transform }) {\n    if (cursor.closed) {\n        return null;\n    }\n    do {\n        if (cursor[kId] == null) {\n            // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n            await cursor[kInit]();\n        }\n        if (cursor[kDocuments].length !== 0) {\n            const doc = cursor[kDocuments].shift();\n            if (doc != null && transform && cursor[kTransform]) {\n                try {\n                    return cursor[kTransform](doc);\n                }\n                catch (error) {\n                    // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n                    // error instead.\n                    await cleanupCursor(cursor, { error, needsToEmitClosed: true }).catch(() => null);\n                    throw error;\n                }\n            }\n            return doc;\n        }\n        if (cursor.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n            return null;\n        }\n        // otherwise need to call getMore\n        const batchSize = cursor[kOptions].batchSize || 1000;\n        try {\n            const response = await cursor.getMore(batchSize);\n            if (response) {\n                const cursorId = typeof response.cursor.id === 'number'\n                    ? bson_1.Long.fromNumber(response.cursor.id)\n                    : typeof response.cursor.id === 'bigint'\n                        ? bson_1.Long.fromBigInt(response.cursor.id)\n                        : response.cursor.id;\n                cursor[kDocuments].pushMany(response.cursor.nextBatch);\n                cursor[kId] = cursorId;\n            }\n        }\n        catch (error) {\n            // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n            // error instead.\n            await cleanupCursor(cursor, { error }).catch(() => null);\n            throw error;\n        }\n        if (cursor.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n        }\n        if (cursor[kDocuments].length === 0 && blocking === false) {\n            return null;\n        }\n    } while (!cursor.isDead || cursor[kDocuments].length !== 0);\n    return null;\n}\nasync function cleanupCursor(cursor, options) {\n    const cursorId = cursor[kId];\n    const cursorNs = cursor[kNamespace];\n    const server = cursor[kServer];\n    const session = cursor[kSession];\n    const error = options?.error;\n    // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n    // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n    // cleanup the cursor but don't emit a `close` event.\n    const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n    if (error) {\n        if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n            return completeCleanup();\n        }\n    }\n    if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n        if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n        }\n        if (session) {\n            if (session.owner === cursor) {\n                await session.endSession({ error });\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        return;\n    }\n    async function completeCleanup() {\n        if (session) {\n            if (session.owner === cursor) {\n                try {\n                    await session.endSession({ error });\n                }\n                finally {\n                    cursor.emit(AbstractCursor.CLOSE);\n                }\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        cursor.emit(AbstractCursor.CLOSE);\n        return;\n    }\n    cursor[kKilled] = true;\n    if (session.hasEnded) {\n        return completeCleanup();\n    }\n    try {\n        await (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, { session })).catch(() => null);\n    }\n    finally {\n        await completeCleanup();\n    }\n}\n/** @internal */\nfunction assertUninitialized(cursor) {\n    if (cursor[kInitialized]) {\n        throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.assertUninitialized = assertUninitialized;\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor) {\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n    }\n    _readNext() {\n        next(this._cursor, { blocking: true, transform: true }).then(result => {\n            if (result == null) {\n                this.push(null);\n            }\n            else if (this.destroyed) {\n                this._cursor.close().catch(() => null);\n            }\n            else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, err => {\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().catch(() => null);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        });\n    }\n}\n//# sourceMappingURL=abstract_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/aggregation_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregationCursor = void 0;\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n        // TODO: NODE-2882\n        return { server: aggregateOperation.server, session, response };\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    group($group) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $group });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $limit });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $match });\n        return this;\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $out });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $project });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $lookup });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $redact });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $skip });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $sort });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $unwind });\n        return this;\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $geoNear });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/change_stream_cursor.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = __webpack_require__(/*! ../change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.options\n        };\n        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.options.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            }\n            else {\n                options.resumeAfter = this.resumeToken;\n            }\n        }\n        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const cursor = response.cursor;\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n            const batch = 'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n            if (batch.length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null &&\n            this.resumeAfter == null &&\n            this.startAfter == null &&\n            this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        // TODO: NODE-2882\n        return { server, session, response };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\n//# sourceMappingURL=change_stream_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2NoYW5nZV9zdHJlYW1fY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQix3QkFBd0IsbUJBQU8sQ0FBQywyRUFBa0I7QUFDbEQsb0JBQW9CLG1CQUFPLENBQUMsbUVBQWM7QUFDMUMsb0JBQW9CLG1CQUFPLENBQUMseUZBQXlCO0FBQ3JELDRCQUE0QixtQkFBTyxDQUFDLHlHQUFpQztBQUNyRSxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQywwQkFBMEIsbUJBQU8sQ0FBQyxxRkFBbUI7QUFDckQ7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvY2hhbmdlX3N0cmVhbV9jdXJzb3IuanM/N2I5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hhbmdlU3RyZWFtQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgY2hhbmdlX3N0cmVhbV8xID0gcmVxdWlyZShcIi4uL2NoYW5nZV9zdHJlYW1cIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5jb25zdCBhZ2dyZWdhdGVfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2FnZ3JlZ2F0ZVwiKTtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBhYnN0cmFjdF9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0X2N1cnNvclwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENoYW5nZVN0cmVhbUN1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIG5hbWVzcGFjZSwgcGlwZWxpbmUgPSBbXSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgbmFtZXNwYWNlLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9yZXN1bWVUb2tlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPSBvcHRpb25zLnN0YXJ0QXRPcGVyYXRpb25UaW1lO1xuICAgICAgICBpZiAob3B0aW9ucy5zdGFydEFmdGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gb3B0aW9ucy5zdGFydEFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMucmVzdW1lQWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSBvcHRpb25zLnJlc3VtZUFmdGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCByZXN1bWVUb2tlbih0b2tlbikge1xuICAgICAgICB0aGlzLl9yZXN1bWVUb2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLmVtaXQoY2hhbmdlX3N0cmVhbV8xLkNoYW5nZVN0cmVhbS5SRVNVTUVfVE9LRU5fQ0hBTkdFRCwgdG9rZW4pO1xuICAgIH1cbiAgICBnZXQgcmVzdW1lVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bWVUb2tlbjtcbiAgICB9XG4gICAgZ2V0IHJlc3VtZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgWydyZXN1bWVBZnRlcicsICdzdGFydEFmdGVyJywgJ3N0YXJ0QXRPcGVyYXRpb25UaW1lJ10pIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVzdW1lVG9rZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdGFydEFmdGVyICYmICF0aGlzLmhhc1JlY2VpdmVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zdGFydEFmdGVyID0gdGhpcy5yZXN1bWVUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucmVzdW1lQWZ0ZXIgPSB0aGlzLnJlc3VtZVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgIT0gbnVsbCAmJiAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikodGhpcy5zZXJ2ZXIpID49IDcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPSB0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgICBjYWNoZVJlc3VtZVRva2VuKHJlc3VtZVRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcmVkQ291bnQoKSA9PT0gMCAmJiB0aGlzLnBvc3RCYXRjaFJlc3VtZVRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gdGhpcy5wb3N0QmF0Y2hSZXN1bWVUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSByZXN1bWVUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc1JlY2VpdmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgX3Byb2Nlc3NCYXRjaChyZXNwb25zZSkge1xuICAgICAgICBjb25zdCBjdXJzb3IgPSByZXNwb25zZS5jdXJzb3I7XG4gICAgICAgIGlmIChjdXJzb3IucG9zdEJhdGNoUmVzdW1lVG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMucG9zdEJhdGNoUmVzdW1lVG9rZW4gPSByZXNwb25zZS5jdXJzb3IucG9zdEJhdGNoUmVzdW1lVG9rZW47XG4gICAgICAgICAgICBjb25zdCBiYXRjaCA9ICdmaXJzdEJhdGNoJyBpbiByZXNwb25zZS5jdXJzb3IgPyByZXNwb25zZS5jdXJzb3IuZmlyc3RCYXRjaCA6IHJlc3BvbnNlLmN1cnNvci5uZXh0QmF0Y2g7XG4gICAgICAgICAgICBpZiAoYmF0Y2gubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IGN1cnNvci5wb3N0QmF0Y2hSZXN1bWVUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2VTdHJlYW1DdXJzb3IodGhpcy5jbGllbnQsIHRoaXMubmFtZXNwYWNlLCB0aGlzLnBpcGVsaW5lLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgYWdncmVnYXRlT3BlcmF0aW9uID0gbmV3IGFnZ3JlZ2F0ZV8xLkFnZ3JlZ2F0ZU9wZXJhdGlvbih0aGlzLm5hbWVzcGFjZSwgdGhpcy5waXBlbGluZSwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKShzZXNzaW9uLmNsaWVudCwgYWdncmVnYXRlT3BlcmF0aW9uKTtcbiAgICAgICAgY29uc3Qgc2VydmVyID0gYWdncmVnYXRlT3BlcmF0aW9uLnNlcnZlcjtcbiAgICAgICAgdGhpcy5tYXhXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpO1xuICAgICAgICBpZiAodGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZSA9PSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLnJlc3VtZUFmdGVyID09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBZnRlciA9PSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLm1heFdpcmVWZXJzaW9uID49IDcpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWUgPSByZXNwb25zZS5vcGVyYXRpb25UaW1lO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NCYXRjaChyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjb25zdGFudHNfMS5JTklULCByZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjb25zdGFudHNfMS5SRVNQT05TRSk7XG4gICAgICAgIC8vIFRPRE86IE5PREUtMjg4MlxuICAgICAgICByZXR1cm4geyBzZXJ2ZXIsIHNlc3Npb24sIHJlc3BvbnNlIH07XG4gICAgfVxuICAgIGFzeW5jIGdldE1vcmUoYmF0Y2hTaXplKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXIuZ2V0TW9yZShiYXRjaFNpemUpO1xuICAgICAgICB0aGlzLm1heFdpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHRoaXMuc2VydmVyKTtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc0JhdGNoKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbWl0KGNoYW5nZV9zdHJlYW1fMS5DaGFuZ2VTdHJlYW0uTU9SRSwgcmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVtaXQoY2hhbmdlX3N0cmVhbV8xLkNoYW5nZVN0cmVhbS5SRVNQT05TRSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG59XG5leHBvcnRzLkNoYW5nZVN0cmVhbUN1cnNvciA9IENoYW5nZVN0cmVhbUN1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYW5nZV9zdHJlYW1fY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/find_cursor.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindCursor = exports.FLAGS = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst count_1 = __webpack_require__(/*! ../operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_1 = __webpack_require__(/*! ../operations/find */ \"(ssr)/./node_modules/mongodb/lib/operations/find.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        this[kFilter] = filter;\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n        // the response is not a cursor when `explain` is enabled\n        this[kNumReturned] = response.cursor?.firstBatch?.length;\n        // TODO: NODE-2882\n        return { server: findOperation.server, session, response };\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                // this is an optimization for the special case of a limit for a find command to avoid an\n                // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                // produces results for the find command.  Once a batch is filled up, it is returned and only\n                // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                // is exhausted and return a cursorId of zero.\n                // instead, if we determine there are no more documents to request from the server, we preemptively\n                // close the cursor\n                await this.close().catch(() => null);\n                return { cursor: { id: bson_1.Long.ZERO, nextBatch: [] } };\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n            this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_collections_cursor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_collections_1 = __webpack_require__(/*! ../operations/list_collections */ \"(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n//# sourceMappingURL=list_collections_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfY29sbGVjdGlvbnNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw0QkFBNEIsbUJBQU8sQ0FBQyx5R0FBaUM7QUFDckUsMkJBQTJCLG1CQUFPLENBQUMsdUdBQWdDO0FBQ25FLDBCQUEwQixtQkFBTyxDQUFDLHFGQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfY29sbGVjdGlvbnNfY3Vyc29yLmpzP2QxMTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc0N1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGxpc3RfY29sbGVjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnNcIik7XG5jb25zdCBhYnN0cmFjdF9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0X2N1cnNvclwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBMaXN0Q29sbGVjdGlvbnNDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoZGIsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYi5jbGllbnQsIGRiLnMubmFtZXNwYWNlLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBkYjtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IExpc3RDb2xsZWN0aW9uc0N1cnNvcih0aGlzLnBhcmVudCwgdGhpcy5maWx0ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGxpc3RfY29sbGVjdGlvbnNfMS5MaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24odGhpcy5wYXJlbnQsIHRoaXMuZmlsdGVyLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucGFyZW50LmNsaWVudCwgb3BlcmF0aW9uKTtcbiAgICAgICAgLy8gVE9ETzogTk9ERS0yODgyXG4gICAgICAgIHJldHVybiB7IHNlcnZlcjogb3BlcmF0aW9uLnNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc0N1cnNvciA9IExpc3RDb2xsZWN0aW9uc0N1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfY29sbGVjdGlvbnNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_indexes_cursor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ../operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options) {\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor;\n//# sourceMappingURL=list_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfaW5kZXhlc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLDRCQUE0QixtQkFBTyxDQUFDLHlHQUFpQztBQUNyRSxrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBdUI7QUFDakQsMEJBQTBCLG1CQUFPLENBQUMscUZBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfaW5kZXhlc19jdXJzb3IuanM/MTUzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdEluZGV4ZXNDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBpbmRleGVzXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9pbmRleGVzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLmNsaWVudCwgY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdEluZGV4ZXNDdXJzb3IodGhpcy5wYXJlbnQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGluZGV4ZXNfMS5MaXN0SW5kZXhlc09wZXJhdGlvbih0aGlzLnBhcmVudCwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnBhcmVudC5jbGllbnQsIG9wZXJhdGlvbik7XG4gICAgICAgIC8vIFRPRE86IE5PREUtMjg4MlxuICAgICAgICByZXR1cm4geyBzZXJ2ZXI6IG9wZXJhdGlvbi5zZXJ2ZXIsIHNlc3Npb24sIHJlc3BvbnNlIH07XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0SW5kZXhlc0N1cnNvciA9IExpc3RJbmRleGVzQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9pbmRleGVzX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = __webpack_require__(/*! ./aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\n/** @public */\nclass ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */\n    constructor({ fullNamespace: ns, client }, name, options = {}) {\n        const pipeline = name == null ? [{ $listSearchIndexes: {} }] : [{ $listSearchIndexes: { name } }];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor;\n//# sourceMappingURL=list_search_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQjtBQUMvQiw2QkFBNkIsbUJBQU8sQ0FBQywyRkFBc0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDJCQUEyQixvQkFBb0I7QUFDakUsMkNBQTJDLHdCQUF3QixPQUFPLHNCQUFzQixRQUFRO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9saXN0X3NlYXJjaF9pbmRleGVzX2N1cnNvci5qcz9iNWY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0U2VhcmNoSW5kZXhlc0N1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGFnZ3JlZ2F0aW9uX2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWdncmVnYXRpb25fY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIExpc3RTZWFyY2hJbmRleGVzQ3Vyc29yIGV4dGVuZHMgYWdncmVnYXRpb25fY3Vyc29yXzEuQWdncmVnYXRpb25DdXJzb3Ige1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IGZ1bGxOYW1lc3BhY2U6IG5zLCBjbGllbnQgfSwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHBpcGVsaW5lID0gbmFtZSA9PSBudWxsID8gW3sgJGxpc3RTZWFyY2hJbmRleGVzOiB7fSB9XSA6IFt7ICRsaXN0U2VhcmNoSW5kZXhlczogeyBuYW1lIH0gfV07XG4gICAgICAgIHN1cGVyKGNsaWVudCwgbnMsIHBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yID0gTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X3NlYXJjaF9pbmRleGVzX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/run_command_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunCommandCursor = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst run_command_1 = __webpack_require__(/*! ../operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param maxTimeMS - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */\n    clone() {\n        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */\n    maxTimeMS(_) {\n        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_) {\n        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n    }\n    /** @internal */\n    constructor(db, command, options = {}) {\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({ ...command });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation);\n        if (response.cursor == null) {\n            throw new error_1.MongoUnexpectedServerResponseError('Expected server to respond with cursor');\n        }\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */\n    async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return (0, execute_operation_1.executeOperation)(this.client, getMoreOperation);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor;\n//# sourceMappingURL=run_command_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL3J1bl9jb21tYW5kX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsNEJBQTRCLG1CQUFPLENBQUMseUdBQWlDO0FBQ3JFLG1CQUFtQixtQkFBTyxDQUFDLHVGQUF3QjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyw2RkFBMkI7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsMEJBQTBCLG1CQUFPLENBQUMscUZBQW1CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFlBQVk7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvcnVuX2NvbW1hbmRfY3Vyc29yLmpzPzgxMGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJ1bkNvbW1hbmRDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgZ2V0X21vcmVfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2dldF9tb3JlXCIpO1xuY29uc3QgcnVuX2NvbW1hbmRfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL3J1bl9jb21tYW5kXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIFJ1bkNvbW1hbmRDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgdGhlIGBnZXRNb3JlLmNvbW1lbnRgIGZpZWxkXG4gICAgICogQHBhcmFtIGNvbW1lbnQgLSBhbnkgQlNPTiB2YWx1ZVxuICAgICAqL1xuICAgIHNldENvbW1lbnQoY29tbWVudCkge1xuICAgICAgICB0aGlzLmdldE1vcmVPcHRpb25zLmNvbW1lbnQgPSBjb21tZW50O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udHJvbHMgdGhlIGBnZXRNb3JlLm1heFRpbWVNU2AgZmllbGQuIE9ubHkgdmFsaWQgd2hlbiBjdXJzb3IgaXMgdGFpbGFibGUgYXdhaXRcbiAgICAgKiBAcGFyYW0gbWF4VGltZU1TIC0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgbmV3IGRhdGFcbiAgICAgKi9cbiAgICBzZXRNYXhUaW1lTVMobWF4VGltZU1TKSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMubWF4QXdhaXRUaW1lTVMgPSBtYXhUaW1lTVM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUuYmF0Y2hTaXplYCBmaWVsZFxuICAgICAqIEBwYXJhbSBtYXhUaW1lTVMgLSB0aGUgbnVtYmVyIGRvY3VtZW50cyB0byByZXR1cm4gaW4gdGhlIGBuZXh0QmF0Y2hgXG4gICAgICovXG4gICAgc2V0QmF0Y2hTaXplKGJhdGNoU2l6ZSkge1xuICAgICAgICB0aGlzLmdldE1vcmVPcHRpb25zLmJhdGNoU2l6ZSA9IGJhdGNoU2l6ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvciAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdDbG9uZSBub3Qgc3VwcG9ydGVkLCBjcmVhdGUgYSBuZXcgY3Vyc29yIHdpdGggZGIucnVuQ3Vyc29yQ29tbWFuZCcpO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3I6IHJlYWRDb25jZXJuIG11c3QgYmUgY29uZmlndXJlZCBkaXJlY3RseSBvbiBjb21tYW5kIGRvY3VtZW50ICovXG4gICAgd2l0aFJlYWRDb25jZXJuKF8pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignUnVuQ29tbWFuZEN1cnNvciBkb2VzIG5vdCBzdXBwb3J0IHJlYWRDb25jZXJuIGl0IG11c3QgYmUgYXR0YWNoZWQgdG8gdGhlIGNvbW1hbmQgYmVpbmcgcnVuJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogdmFyaW91cyBjdXJzb3IgZmxhZ3MgbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICBhZGRDdXJzb3JGbGFnKF8sIF9fKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ1J1bkNvbW1hbmRDdXJzb3IgZG9lcyBub3Qgc3VwcG9ydCBjdXJzb3IgZmxhZ3MsIHRoZXkgbXVzdCBiZSBhdHRhY2hlZCB0byB0aGUgY29tbWFuZCBiZWluZyBydW4nKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiBtYXhUaW1lTVMgbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICBtYXhUaW1lTVMoXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdtYXhUaW1lTVMgbXVzdCBiZSBjb25maWd1cmVkIG9uIHRoZSBjb21tYW5kIGRvY3VtZW50IGRpcmVjdGx5LCB0byBjb25maWd1cmUgZ2V0TW9yZS5tYXhUaW1lTVMgdXNlIGN1cnNvci5zZXRNYXhUaW1lTVMoKScpO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3I6IGJhdGNoU2l6ZSBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIGJhdGNoU2l6ZShfKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ2JhdGNoU2l6ZSBtdXN0IGJlIGNvbmZpZ3VyZWQgb24gdGhlIGNvbW1hbmQgZG9jdW1lbnQgZGlyZWN0bHksIHRvIGNvbmZpZ3VyZSBnZXRNb3JlLmJhdGNoU2l6ZSB1c2UgY3Vyc29yLnNldEJhdGNoU2l6ZSgpJyk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihkYiwgY29tbWFuZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRiLmNsaWVudCwgKDAsIHV0aWxzXzEubnMpKGRiLm5hbWVzcGFjZSksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmdldE1vcmVPcHRpb25zID0ge307XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5jb21tYW5kID0gT2JqZWN0LmZyZWV6ZSh7IC4uLmNvbW1hbmQgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBhc3luYyBfaW5pdGlhbGl6ZShzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBydW5fY29tbWFuZF8xLlJ1bkNvbW1hbmRPcGVyYXRpb24odGhpcy5kYiwgdGhpcy5jb21tYW5kLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMuY3Vyc29yT3B0aW9ucy5yZWFkUHJlZmVyZW5jZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLmNsaWVudCwgb3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmN1cnNvciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKCdFeHBlY3RlZCBzZXJ2ZXIgdG8gcmVzcG9uZCB3aXRoIGN1cnNvcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXJ2ZXI6IG9wZXJhdGlvbi5zZXJ2ZXIsXG4gICAgICAgICAgICBzZXNzaW9uLFxuICAgICAgICAgICAgcmVzcG9uc2VcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIGdldE1vcmUoX2JhdGNoU2l6ZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBjb25zdCBnZXRNb3JlT3BlcmF0aW9uID0gbmV3IGdldF9tb3JlXzEuR2V0TW9yZU9wZXJhdGlvbih0aGlzLm5hbWVzcGFjZSwgdGhpcy5pZCwgdGhpcy5zZXJ2ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb246IHRoaXMuc2Vzc2lvbixcbiAgICAgICAgICAgIC4uLnRoaXMuZ2V0TW9yZU9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLmNsaWVudCwgZ2V0TW9yZU9wZXJhdGlvbik7XG4gICAgfVxufVxuZXhwb3J0cy5SdW5Db21tYW5kQ3Vyc29yID0gUnVuQ29tbWFuZEN1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bl9jb21tYW5kX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/db.js":
/*!****************************************!*\
  !*** ./node_modules/mongodb/lib/db.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Db = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst CONSTANTS = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nconst run_command_cursor_1 = __webpack_require__(/*! ./cursor/run_command_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst collections_1 = __webpack_require__(/*! ./operations/collections */ \"(ssr)/./node_modules/mongodb/lib/operations/collections.js\");\nconst create_collection_1 = __webpack_require__(/*! ./operations/create_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst profiling_level_1 = __webpack_require__(/*! ./operations/profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nconst stats_1 = __webpack_require__(/*! ./operations/stats */ \"(ssr)/./node_modules/mongodb/lib/operations/stats.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === 'string' && databaseName.includes('.')) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, { ...options, new_collection: true, readPreference: read_preference_1.ReadPreference.primary }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/deps.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/deps.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.ZStandard = exports.getKerberos = exports.Kerberos = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nfunction makeErrorModule(error) {\n    const props = error ? { kModuleError: error } : {};\n    return new Proxy(props, {\n        get: (_, key) => {\n            if (key === 'kModuleError') {\n                return error;\n            }\n            throw error;\n        },\n        set: () => {\n            throw error;\n        }\n    });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\nfunction getKerberos() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        exports.Kerberos = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'kerberos'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n        return exports.Kerberos;\n    }\n    catch {\n        return exports.Kerberos;\n    }\n}\nexports.getKerberos = getKerberos;\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'));\nfunction getZstdLibrary() {\n    try {\n        exports.ZStandard = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@mongodb-js/zstd'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n        return exports.ZStandard;\n    }\n    catch {\n        return exports.ZStandard;\n    }\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@aws-sdk/credential-providers'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' +\n            ' Please install it to enable getting aws credentials via the official sdk.'));\n    }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gcp-metadata'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' +\n            ' Please install it to enable getting gcp credentials via the official sdk.'));\n    }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'snappy'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'socks'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSocks = getSocks;\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\ntry {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    exports.aws4 = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'aws4'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n}\ncatch { } // eslint-disable-line\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        mongodbClientEncryption = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'mongodb-client-encryption'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', { cause });\n        return { kModuleError };\n    }\n    return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\n//# sourceMappingURL=deps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/deps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/encrypter.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/encrypter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Encrypter = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ./deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        const maybeError = await this.autoEncrypter.teardown(!!force).catch(e => e);\n        const internalClient = this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n            return internalClient.close(force);\n        }\n        if (maybeError) {\n            throw maybeError;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZW5jcnlwdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixlQUFlLG1CQUFPLENBQUMsa0JBQU07QUFDN0IseUJBQXlCLG1CQUFPLENBQUMsMEhBQXlDO0FBQzFFLG9CQUFvQixtQkFBTyxDQUFDLGtFQUFhO0FBQ3pDLGVBQWUsbUJBQU8sQ0FBQyx3REFBUTtBQUMvQixnQkFBZ0IsbUJBQU8sQ0FBQywwREFBUztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyx3RUFBZ0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2VuY3J5cHRlci5qcz8yZmRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbmNyeXB0ZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGF1dG9fZW5jcnlwdGVyXzEgPSByZXF1aXJlKFwiLi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2F1dG9fZW5jcnlwdGVyXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBkZXBzXzEgPSByZXF1aXJlKFwiLi9kZXBzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgbW9uZ29fY2xpZW50XzEgPSByZXF1aXJlKFwiLi9tb25nb19jbGllbnRcIik7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrSW50ZXJuYWxDbGllbnQgPSBTeW1ib2woJ2ludGVybmFsQ2xpZW50Jyk7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBFbmNyeXB0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgdXJpLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hdXRvRW5jcnlwdGlvbiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wdGlvbiBcImF1dG9FbmNyeXB0aW9uXCIgbXVzdCBiZSBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbml0aWFsaXplIHRvIG51bGwsIGlmIHdlIGNhbGwgZ2V0SW50ZXJuYWxDbGllbnQsIHdlIG1heSBzZXQgdGhpcyBpdCBpcyBpbXBvcnRhbnQgdG8gbm90IG92ZXJ3cml0ZSB0aG9zZSBmdW5jdGlvbiBjYWxscy5cbiAgICAgICAgdGhpc1trSW50ZXJuYWxDbGllbnRdID0gbnVsbDtcbiAgICAgICAgdGhpcy5ieXBhc3NBdXRvRW5jcnlwdGlvbiA9ICEhb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5ieXBhc3NBdXRvRW5jcnlwdGlvbjtcbiAgICAgICAgdGhpcy5uZWVkc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4UG9vbFNpemUgPT09IDAgJiYgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5rZXlWYXVsdENsaWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLmtleVZhdWx0Q2xpZW50ID0gY2xpZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ua2V5VmF1bHRDbGllbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5rZXlWYXVsdENsaWVudCA9IHRoaXMuZ2V0SW50ZXJuYWxDbGllbnQoY2xpZW50LCB1cmksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJ5cGFzc0F1dG9FbmNyeXB0aW9uKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLm1ldGFkYXRhQ2xpZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMubWF4UG9vbFNpemUgPT09IDApIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ubWV0YWRhdGFDbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLm1ldGFkYXRhQ2xpZW50ID0gdGhpcy5nZXRJbnRlcm5hbENsaWVudChjbGllbnQsIHVyaSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucHJveHlIb3N0KSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLnByb3h5T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBwcm94eUhvc3Q6IG9wdGlvbnMucHJveHlIb3N0LFxuICAgICAgICAgICAgICAgIHByb3h5UG9ydDogb3B0aW9ucy5wcm94eVBvcnQsXG4gICAgICAgICAgICAgICAgcHJveHlVc2VybmFtZTogb3B0aW9ucy5wcm94eVVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIHByb3h5UGFzc3dvcmQ6IG9wdGlvbnMucHJveHlQYXNzd29yZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF1dG9FbmNyeXB0ZXIgPSBuZXcgYXV0b19lbmNyeXB0ZXJfMS5BdXRvRW5jcnlwdGVyKGNsaWVudCwgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbik7XG4gICAgfVxuICAgIGdldEludGVybmFsQ2xpZW50KGNsaWVudCwgdXJpLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIFRPRE8oTk9ERS00MTQ0KTogUmVtb3ZlIG5ldyB2YXJpYWJsZSBmb3IgdHlwZSBuYXJyb3dpbmdcbiAgICAgICAgbGV0IGludGVybmFsQ2xpZW50ID0gdGhpc1trSW50ZXJuYWxDbGllbnRdO1xuICAgICAgICBpZiAoaW50ZXJuYWxDbGllbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgY2xvbmVkT3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgW1xuICAgICAgICAgICAgICAgIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob3B0aW9ucylcbiAgICAgICAgICAgIF0pIHtcbiAgICAgICAgICAgICAgICBpZiAoWydhdXRvRW5jcnlwdGlvbicsICdtaW5Qb29sU2l6ZScsICdzZXJ2ZXJzJywgJ2Nhc2VUcmFuc2xhdGUnLCAnZGJOYW1lJ10uaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgUmVmbGVjdC5zZXQoY2xvbmVkT3B0aW9ucywga2V5LCBSZWZsZWN0LmdldChvcHRpb25zLCBrZXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsb25lZE9wdGlvbnMubWluUG9vbFNpemUgPSAwO1xuICAgICAgICAgICAgaW50ZXJuYWxDbGllbnQgPSBuZXcgbW9uZ29fY2xpZW50XzEuTW9uZ29DbGllbnQodXJpLCBjbG9uZWRPcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXNba0ludGVybmFsQ2xpZW50XSA9IGludGVybmFsQ2xpZW50O1xuICAgICAgICAgICAgZm9yIChjb25zdCBldmVudE5hbWUgb2YgY29uc3RhbnRzXzEuTU9OR09fQ0xJRU5UX0VWRU5UUykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgY2xpZW50Lmxpc3RlbmVycyhldmVudE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsQ2xpZW50Lm9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsaWVudC5vbignbmV3TGlzdGVuZXInLCAoZXZlbnROYW1lLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgICAgIGludGVybmFsQ2xpZW50Py5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5uZWVkc0Nvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRlcm5hbENsaWVudDtcbiAgICB9XG4gICAgYXN5bmMgY29ubmVjdEludGVybmFsQ2xpZW50KCkge1xuICAgICAgICAvLyBUT0RPKE5PREUtNDE0NCk6IFJlbW92ZSBuZXcgdmFyaWFibGUgZm9yIHR5cGUgbmFycm93aW5nXG4gICAgICAgIGNvbnN0IGludGVybmFsQ2xpZW50ID0gdGhpc1trSW50ZXJuYWxDbGllbnRdO1xuICAgICAgICBpZiAodGhpcy5uZWVkc0Nvbm5lY3RpbmcgJiYgaW50ZXJuYWxDbGllbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5uZWVkc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGF3YWl0IGludGVybmFsQ2xpZW50LmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9zZUNhbGxiYWNrKGNsaWVudCwgZm9yY2UsIGNhbGxiYWNrKSB7XG4gICAgICAgICgwLCB1dGlsXzEuY2FsbGJhY2tpZnkpKHRoaXMuY2xvc2UuYmluZCh0aGlzKSkoY2xpZW50LCBmb3JjZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBhc3luYyBjbG9zZShjbGllbnQsIGZvcmNlKSB7XG4gICAgICAgIGNvbnN0IG1heWJlRXJyb3IgPSBhd2FpdCB0aGlzLmF1dG9FbmNyeXB0ZXIudGVhcmRvd24oISFmb3JjZSkuY2F0Y2goZSA9PiBlKTtcbiAgICAgICAgY29uc3QgaW50ZXJuYWxDbGllbnQgPSB0aGlzW2tJbnRlcm5hbENsaWVudF07XG4gICAgICAgIGlmIChpbnRlcm5hbENsaWVudCAhPSBudWxsICYmIGNsaWVudCAhPT0gaW50ZXJuYWxDbGllbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbENsaWVudC5jbG9zZShmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heWJlRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG1heWJlRXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGNoZWNrRm9yTW9uZ29DcnlwdCgpIHtcbiAgICAgICAgY29uc3QgbW9uZ29kYkNsaWVudEVuY3J5cHRpb24gPSAoMCwgZGVwc18xLmdldE1vbmdvREJDbGllbnRFbmNyeXB0aW9uKSgpO1xuICAgICAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gbW9uZ29kYkNsaWVudEVuY3J5cHRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0RlcGVuZGVuY3lFcnJvcignQXV0by1lbmNyeXB0aW9uIHJlcXVlc3RlZCwgYnV0IHRoZSBtb2R1bGUgaXMgbm90IGluc3RhbGxlZC4gJyArXG4gICAgICAgICAgICAgICAgJ1BsZWFzZSBhZGQgYG1vbmdvZGItY2xpZW50LWVuY3J5cHRpb25gIGFzIGEgZGVwZW5kZW5jeSBvZiB5b3VyIHByb2plY3QnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRW5jcnlwdGVyID0gRW5jcnlwdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jcnlwdGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/error.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: 'RetryableWriteError',\n    TransientTransactionError: 'TransientTransactionError',\n    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n    ResumableChangeStreamError: 'ResumableChangeStreamError',\n    HandshakeError: 'HandshakeError',\n    ResetPool: 'ResetPool',\n    PoolRequstedRetry: 'PoolRequstedRetry',\n    InterruptInUseConnections: 'InterruptInUseConnections',\n    NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n    return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        this[kErrorLabels] = new Set();\n    }\n    /** @internal */\n    static buildErrorMessage(e) {\n        if (typeof e === 'string') {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0\n                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n                : e.errors.map(({ message }) => message).join(', ');\n        }\n        return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string'\n            ? e.message\n            : 'empty error message';\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return Array.from(this[kErrorLabels]);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        for (const name in message) {\n            if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n                this[name] = message[name];\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAWSError';\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoAzureError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAzureError';\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoUnexpectedServerResponseError';\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, { cause: options?.cause });\n        if (options && typeof options.beforeHandshake === 'boolean') {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, result) {\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) &&\n            !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n    }\n    if (error instanceof MongoError && typeof error.code === 'number') {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n    return (error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) ||\n        error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry));\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return (exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n        exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError;\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/explain.js":
/*!*********************************************!*\
  !*** ./node_modules/mongodb/lib/explain.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Explain = exports.ExplainVerbosity = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n    }\n    static fromOptions(options) {\n        if (options?.explain == null)\n            return;\n        const explain = options.explain;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n    }\n}\nexports.Explain = Explain;\n//# sourceMappingURL=explain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlLEdBQUcsd0JBQXdCO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLDBEQUFTO0FBQ2pDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcz9iZTM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHBsYWluID0gZXhwb3J0cy5FeHBsYWluVmVyYm9zaXR5ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eSA9IE9iamVjdC5mcmVlemUoe1xuICAgIHF1ZXJ5UGxhbm5lcjogJ3F1ZXJ5UGxhbm5lcicsXG4gICAgcXVlcnlQbGFubmVyRXh0ZW5kZWQ6ICdxdWVyeVBsYW5uZXJFeHRlbmRlZCcsXG4gICAgZXhlY3V0aW9uU3RhdHM6ICdleGVjdXRpb25TdGF0cycsXG4gICAgYWxsUGxhbnNFeGVjdXRpb246ICdhbGxQbGFuc0V4ZWN1dGlvbidcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRXhwbGFpbiB7XG4gICAgY29uc3RydWN0b3IodmVyYm9zaXR5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyYm9zaXR5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5XG4gICAgICAgICAgICAgICAgPyBleHBvcnRzLkV4cGxhaW5WZXJib3NpdHkuYWxsUGxhbnNFeGVjdXRpb25cbiAgICAgICAgICAgICAgICA6IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eS5xdWVyeVBsYW5uZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucz8uZXhwbGFpbiA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBleHBsYWluID0gb3B0aW9ucy5leHBsYWluO1xuICAgICAgICBpZiAodHlwZW9mIGV4cGxhaW4gPT09ICdib29sZWFuJyB8fCB0eXBlb2YgZXhwbGFpbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhwbGFpbihleHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdGaWVsZCBcImV4cGxhaW5cIiBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYm9vbGVhbicpO1xuICAgIH1cbn1cbmV4cG9ydHMuRXhwbGFpbiA9IEV4cGxhaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBsYWluLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/explain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/download.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/download.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super({ emitClose: true });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroy();\n        await this.s.cursor?.close();\n    }\n}\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = ({ error, doc }) => {\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.destroy(error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(() => null, error => stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = ({ error, doc }) => {\n        if (error) {\n            return stream.destroy(error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/download.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucket = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst download_1 = __webpack_require__(/*! ./download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nconst upload_1 = __webpack_require__(/*! ./upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, { ...options, id });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    async delete(id) {\n        const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({ files_id: id });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { ...options, sort, skip });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    async rename(id, filename) {\n        const filter = { _id: id };\n        const update = { $set: { filename } };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    async drop() {\n        await this.s._filesCollection.drop();\n        await this.s._chunksCollection.drop();\n    }\n}\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\nexports.GridFSBucket = GridFSBucket;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/upload.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/upload.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ./../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */\n    constructor(bucket, filename, options) {\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */\n        this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(() => {\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit('index');\n            }, () => null);\n        }\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */\n    _construct(callback) {\n        if (this.bucket.s.checkedIndexes) {\n            return process.nextTick(callback);\n        }\n        this.bucket.once('index', callback);\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */\n    _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */\n    _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n        }\n        this.state.aborted = true;\n        await this.chunks.deleteMany({ files_id: this.id });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = { files_id: 1, n: 1 };\n    let indexes;\n    try {\n        indexes = await stream.chunks.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        stream.files.insertOne(gridFSFile, { writeConcern: stream.writeConcern }).then(() => {\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, error => handleError(stream, error, callback));\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = { filename: 1, uploadDate: 1 };\n    let indexes;\n    try {\n        indexes = await stream.files.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        await stream.files.createIndex(index, { background: false });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while (inputBufRemaining > 0) {\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, error => handleError(stream, error, callback));\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    ++stream.state.outstandingRequests;\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, error => handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=upload.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoServerSelectionError = exports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.MongoWriteConcernError = void 0;\nexports.MongoClientAuthProviders = exports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nObject.defineProperty(exports, \"Admin\", ({ enumerable: true, get: function () { return admin_1.Admin; } }));\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", ({ enumerable: true, get: function () { return ordered_1.OrderedBulkOperation; } }));\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", ({ enumerable: true, get: function () { return unordered_1.UnorderedBulkOperation; } }));\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nObject.defineProperty(exports, \"ChangeStream\", ({ enumerable: true, get: function () { return change_stream_1.ChangeStream; } }));\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({ enumerable: true, get: function () { return collection_1.Collection; } }));\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"AbstractCursor\", ({ enumerable: true, get: function () { return abstract_cursor_1.AbstractCursor; } }));\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nObject.defineProperty(exports, \"AggregationCursor\", ({ enumerable: true, get: function () { return aggregation_cursor_1.AggregationCursor; } }));\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({ enumerable: true, get: function () { return find_cursor_1.FindCursor; } }));\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", ({ enumerable: true, get: function () { return list_collections_cursor_1.ListCollectionsCursor; } }));\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nObject.defineProperty(exports, \"ListIndexesCursor\", ({ enumerable: true, get: function () { return list_indexes_cursor_1.ListIndexesCursor; } }));\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nObject.defineProperty(exports, \"Db\", ({ enumerable: true, get: function () { return db_1.Db; } }));\nconst gridfs_1 = __webpack_require__(/*! ./gridfs */ \"(ssr)/./node_modules/mongodb/lib/gridfs/index.js\");\nObject.defineProperty(exports, \"GridFSBucket\", ({ enumerable: true, get: function () { return gridfs_1.GridFSBucket; } }));\nconst download_1 = __webpack_require__(/*! ./gridfs/download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", ({ enumerable: true, get: function () { return download_1.GridFSBucketReadStream; } }));\nconst upload_1 = __webpack_require__(/*! ./gridfs/upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", ({ enumerable: true, get: function () { return upload_1.GridFSBucketWriteStream; } }));\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"MongoClient\", ({ enumerable: true, get: function () { return mongo_client_1.MongoClient; } }));\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nObject.defineProperty(exports, \"CancellationToken\", ({ enumerable: true, get: function () { return mongo_types_1.CancellationToken; } }));\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nObject.defineProperty(exports, \"ClientSession\", ({ enumerable: true, get: function () { return sessions_1.ClientSession; } }));\n/** @public */\nvar bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nvar bson_2 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_2.Binary; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_2.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_2.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_2.BSONType; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_2.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_2.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_2.Decimal128; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_2.Double; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_2.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_2.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_2.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_2.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_2.ObjectId; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_2.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_2.UUID; } }));\nvar common_1 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", ({ enumerable: true, get: function () { return common_1.MongoBulkWriteError; } }));\nvar client_encryption_1 = __webpack_require__(/*! ./client-side-encryption/client_encryption */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nObject.defineProperty(exports, \"ClientEncryption\", ({ enumerable: true, get: function () { return client_encryption_1.ClientEncryption; } }));\nvar change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", ({ enumerable: true, get: function () { return change_stream_cursor_1.ChangeStreamCursor; } }));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoAPIError\", ({ enumerable: true, get: function () { return error_1.MongoAPIError; } }));\nObject.defineProperty(exports, \"MongoAWSError\", ({ enumerable: true, get: function () { return error_1.MongoAWSError; } }));\nObject.defineProperty(exports, \"MongoAzureError\", ({ enumerable: true, get: function () { return error_1.MongoAzureError; } }));\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", ({ enumerable: true, get: function () { return error_1.MongoBatchReExecutionError; } }));\nObject.defineProperty(exports, \"MongoChangeStreamError\", ({ enumerable: true, get: function () { return error_1.MongoChangeStreamError; } }));\nObject.defineProperty(exports, \"MongoCompatibilityError\", ({ enumerable: true, get: function () { return error_1.MongoCompatibilityError; } }));\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", ({ enumerable: true, get: function () { return error_1.MongoCursorExhaustedError; } }));\nObject.defineProperty(exports, \"MongoCursorInUseError\", ({ enumerable: true, get: function () { return error_1.MongoCursorInUseError; } }));\nObject.defineProperty(exports, \"MongoDecompressionError\", ({ enumerable: true, get: function () { return error_1.MongoDecompressionError; } }));\nObject.defineProperty(exports, \"MongoDriverError\", ({ enumerable: true, get: function () { return error_1.MongoDriverError; } }));\nObject.defineProperty(exports, \"MongoError\", ({ enumerable: true, get: function () { return error_1.MongoError; } }));\nObject.defineProperty(exports, \"MongoExpiredSessionError\", ({ enumerable: true, get: function () { return error_1.MongoExpiredSessionError; } }));\nObject.defineProperty(exports, \"MongoGridFSChunkError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSChunkError; } }));\nObject.defineProperty(exports, \"MongoGridFSStreamError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSStreamError; } }));\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", ({ enumerable: true, get: function () { return error_1.MongoInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoKerberosError\", ({ enumerable: true, get: function () { return error_1.MongoKerberosError; } }));\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", ({ enumerable: true, get: function () { return error_1.MongoMissingCredentialsError; } }));\nObject.defineProperty(exports, \"MongoMissingDependencyError\", ({ enumerable: true, get: function () { return error_1.MongoMissingDependencyError; } }));\nObject.defineProperty(exports, \"MongoNetworkError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkError; } }));\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkTimeoutError; } }));\nObject.defineProperty(exports, \"MongoNotConnectedError\", ({ enumerable: true, get: function () { return error_1.MongoNotConnectedError; } }));\nObject.defineProperty(exports, \"MongoParseError\", ({ enumerable: true, get: function () { return error_1.MongoParseError; } }));\nObject.defineProperty(exports, \"MongoRuntimeError\", ({ enumerable: true, get: function () { return error_1.MongoRuntimeError; } }));\nObject.defineProperty(exports, \"MongoServerClosedError\", ({ enumerable: true, get: function () { return error_1.MongoServerClosedError; } }));\nObject.defineProperty(exports, \"MongoServerError\", ({ enumerable: true, get: function () { return error_1.MongoServerError; } }));\nObject.defineProperty(exports, \"MongoServerSelectionError\", ({ enumerable: true, get: function () { return error_1.MongoServerSelectionError; } }));\nObject.defineProperty(exports, \"MongoSystemError\", ({ enumerable: true, get: function () { return error_1.MongoSystemError; } }));\nObject.defineProperty(exports, \"MongoTailableCursorError\", ({ enumerable: true, get: function () { return error_1.MongoTailableCursorError; } }));\nObject.defineProperty(exports, \"MongoTopologyClosedError\", ({ enumerable: true, get: function () { return error_1.MongoTopologyClosedError; } }));\nObject.defineProperty(exports, \"MongoTransactionError\", ({ enumerable: true, get: function () { return error_1.MongoTransactionError; } }));\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", ({ enumerable: true, get: function () { return error_1.MongoUnexpectedServerResponseError; } }));\nObject.defineProperty(exports, \"MongoWriteConcernError\", ({ enumerable: true, get: function () { return error_1.MongoWriteConcernError; } }));\n// enums\nvar common_2 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"BatchType\", ({ enumerable: true, get: function () { return common_2.BatchType; } }));\nvar auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", ({ enumerable: true, get: function () { return auto_encrypter_1.AutoEncryptionLoggerLevel; } }));\nvar gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", ({ enumerable: true, get: function () { return gssapi_1.GSSAPICanonicalizationValue; } }));\nvar providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nObject.defineProperty(exports, \"AuthMechanism\", ({ enumerable: true, get: function () { return providers_1.AuthMechanism; } }));\nvar compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nObject.defineProperty(exports, \"Compressor\", ({ enumerable: true, get: function () { return compression_1.Compressor; } }));\nvar abstract_cursor_2 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", ({ enumerable: true, get: function () { return abstract_cursor_2.CURSOR_FLAGS; } }));\nvar error_2 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoErrorLabel\", ({ enumerable: true, get: function () { return error_2.MongoErrorLabel; } }));\nvar explain_1 = __webpack_require__(/*! ./explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainVerbosity\", ({ enumerable: true, get: function () { return explain_1.ExplainVerbosity; } }));\nvar mongo_client_2 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"ServerApiVersion\", ({ enumerable: true, get: function () { return mongo_client_2.ServerApiVersion; } }));\nvar find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nObject.defineProperty(exports, \"ReturnDocument\", ({ enumerable: true, get: function () { return find_and_modify_1.ReturnDocument; } }));\nvar set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nObject.defineProperty(exports, \"ProfilingLevel\", ({ enumerable: true, get: function () { return set_profiling_level_1.ProfilingLevel; } }));\nvar read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcernLevel\", ({ enumerable: true, get: function () { return read_concern_1.ReadConcernLevel; } }));\nvar read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", ({ enumerable: true, get: function () { return read_preference_1.ReadPreferenceMode; } }));\nvar common_3 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nObject.defineProperty(exports, \"ServerType\", ({ enumerable: true, get: function () { return common_3.ServerType; } }));\nObject.defineProperty(exports, \"TopologyType\", ({ enumerable: true, get: function () { return common_3.TopologyType; } }));\n// Helper classes\nvar read_concern_2 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcern\", ({ enumerable: true, get: function () { return read_concern_2.ReadConcern; } }));\nvar read_preference_2 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreference\", ({ enumerable: true, get: function () { return read_preference_2.ReadPreference; } }));\nvar write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nObject.defineProperty(exports, \"WriteConcern\", ({ enumerable: true, get: function () { return write_concern_1.WriteConcern; } }));\n// events\nvar command_monitoring_events_1 = __webpack_require__(/*! ./cmap/command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nObject.defineProperty(exports, \"CommandFailedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandFailedEvent; } }));\nObject.defineProperty(exports, \"CommandStartedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandStartedEvent; } }));\nObject.defineProperty(exports, \"CommandSucceededEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandSucceededEvent; } }));\nvar connection_pool_events_1 = __webpack_require__(/*! ./cmap/connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedInEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedOutEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutFailedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutStartedEvent; } }));\nObject.defineProperty(exports, \"ConnectionClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClearedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolMonitoringEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolReadyEvent; } }));\nObject.defineProperty(exports, \"ConnectionReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionReadyEvent; } }));\nvar events_1 = __webpack_require__(/*! ./sdam/events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nObject.defineProperty(exports, \"ServerClosedEvent\", ({ enumerable: true, get: function () { return events_1.ServerClosedEvent; } }));\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.ServerDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatFailedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatStartedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatSucceededEvent; } }));\nObject.defineProperty(exports, \"ServerOpeningEvent\", ({ enumerable: true, get: function () { return events_1.ServerOpeningEvent; } }));\nObject.defineProperty(exports, \"TopologyClosedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyClosedEvent; } }));\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"TopologyOpeningEvent\", ({ enumerable: true, get: function () { return events_1.TopologyOpeningEvent; } }));\nvar server_selection_events_1 = __webpack_require__(/*! ./sdam/server_selection_events */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\");\nObject.defineProperty(exports, \"ServerSelectionEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionFailedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionFailedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionStartedEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionStartedEvent; } }));\nObject.defineProperty(exports, \"ServerSelectionSucceededEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.ServerSelectionSucceededEvent; } }));\nObject.defineProperty(exports, \"WaitingForSuitableServerEvent\", ({ enumerable: true, get: function () { return server_selection_events_1.WaitingForSuitableServerEvent; } }));\nvar srv_polling_1 = __webpack_require__(/*! ./sdam/srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nObject.defineProperty(exports, \"SrvPollingEvent\", ({ enumerable: true, get: function () { return srv_polling_1.SrvPollingEvent; } }));\nvar errors_1 = __webpack_require__(/*! ./client-side-encryption/errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptAzureKMSRequestError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateDataKeyError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateEncryptedCollectionError; } }));\nObject.defineProperty(exports, \"MongoCryptError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptError; } }));\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptKMSRequestNetworkTimeoutError; } }));\nvar mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nObject.defineProperty(exports, \"MongoClientAuthProviders\", ({ enumerable: true, get: function () { return mongo_client_auth_providers_1.MongoClientAuthProviders; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_client.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_client.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_string_1 = __webpack_require__(/*! ./connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_auth_providers_1 = __webpack_require__(/*! ./mongo_client_auth_providers */ \"(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ./sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst topology_1 = __webpack_require__(/*! ./sdam/topology */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology.js\");\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n    v1: '1'\n});\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options) {\n        super();\n        this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n        const shouldSetLogger = Object.values(this[kOptions].mongoLoggerOptions.componentSeverities).some(value => value !== mongo_logger_1.SeverityLevel.OFF);\n        this.mongoLogger = shouldSetLogger\n            ? new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions)\n            : undefined;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n            namespace: (0, utils_1.ns)('admin'),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),\n            get options() {\n                return client[kOptions];\n            },\n            get readConcern() {\n                return client[kOptions].readConcern;\n            },\n            get writeConcern() {\n                return client[kOptions].writeConcern;\n            },\n            get readPreference() {\n                return client[kOptions].readPreference;\n            },\n            get isMongoClient() {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */\n    checkForNonGenuineHosts() {\n        const documentDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n        const cosmosDBHostnames = this[kOptions].hosts.filter((hostAddress) => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger?.info('client', utils_1.DOCUMENT_DB_MSG);\n        }\n        else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger?.info('client', utils_1.COSMOS_DB_MSG);\n        }\n    }\n    /** @see MongoOptions */\n    get options() {\n        return Object.freeze({ ...this[kOptions] });\n    }\n    get serverApi() {\n        return this[kOptions].serverApi && Object.freeze({ ...this[kOptions].serverApi });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n    get monitorCommands() {\n        return this[kOptions].monitorCommands;\n    }\n    set monitorCommands(value) {\n        this[kOptions].monitorCommands = value;\n    }\n    /** @internal */\n    get autoEncrypter() {\n        return this[kOptions].autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    async connect() {\n        if (this.connectionLock) {\n            return this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        }\n        finally {\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n    async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this[kOptions];\n        if (options.tls) {\n            if (typeof options.tlsCAFile === 'string') {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === 'string') {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === 'string') {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === 'string') {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n            if (!isServiceAuth) {\n                for (const host of options.hosts) {\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n            this.topology.on(event, (...args) => this.emit(event, ...args));\n        }\n        const topologyConnect = async () => {\n            try {\n                await (0, util_1.promisify)(callback => this.topology?.connect(options, callback))();\n            }\n            catch (error) {\n                this.topology?.close({ force: true });\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        }\n        else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */\n    async close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, 'hasBeenClosed', {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n            if (endSessions.length !== 0) {\n                await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({ endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true })).catch(() => null); // outcome does not matter;\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        await new Promise((resolve, reject) => {\n            topology.close({ force }, error => {\n                if (error)\n                    return reject(error);\n                const { encrypter } = this[kOptions];\n                if (encrypter) {\n                    return encrypter.closeCallback(this, force, error => {\n                        if (error)\n                            return reject(error);\n                        resolve();\n                    });\n                }\n                resolve();\n            });\n        });\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this[kOptions], options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static async connect(url, options) {\n        const client = new this(url, options);\n        return client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, { explicit: true, ...options }, this[kOptions]);\n        this.s.activeSessions.add(session);\n        session.once('ended', () => {\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n        };\n        const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        }\n        finally {\n            try {\n                await session.endSession();\n            }\n            catch {\n                // We are not concerned with errors from endSession()\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient;\n//# sourceMappingURL=mongo_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_client_auth_providers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst mongocr_1 = __webpack_require__(/*! ./cmap/auth/mongocr */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\");\nconst mongodb_aws_1 = __webpack_require__(/*! ./cmap/auth/mongodb_aws */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ./cmap/auth/mongodb_oidc */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst plain_1 = __webpack_require__(/*! ./cmap/auth/plain */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst scram_1 = __webpack_require__(/*! ./cmap/auth/scram */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\");\nconst x509_1 = __webpack_require__(/*! ./cmap/auth/x509 */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @internal */\nconst AUTH_PROVIDERS = new Map([\n    [providers_1.AuthMechanism.MONGODB_AWS, () => new mongodb_aws_1.MongoDBAWS()],\n    [providers_1.AuthMechanism.MONGODB_CR, () => new mongocr_1.MongoCR()],\n    [providers_1.AuthMechanism.MONGODB_GSSAPI, () => new gssapi_1.GSSAPI()],\n    [providers_1.AuthMechanism.MONGODB_OIDC, () => new mongodb_oidc_1.MongoDBOIDC()],\n    [providers_1.AuthMechanism.MONGODB_PLAIN, () => new plain_1.Plain()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, () => new scram_1.ScramSHA1()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, () => new scram_1.ScramSHA256()],\n    [providers_1.AuthMechanism.MONGODB_X509, () => new x509_1.X509()]\n]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nclass MongoClientAuthProviders {\n    constructor() {\n        this.existingProviders = new Map();\n    }\n    /**\n     * Get or create an authentication provider based on the provided mechanism.\n     * We don't want to create all providers at once, as some providers may not be used.\n     * @param name - The name of the provider to get or create.\n     * @returns The provider.\n     * @throws MongoInvalidArgumentError if the mechanism is not supported.\n     * @internal\n     */\n    getOrCreateProvider(name) {\n        const authProvider = this.existingProviders.get(name);\n        if (authProvider) {\n            return authProvider;\n        }\n        const provider = AUTH_PROVIDERS.get(name)?.();\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n        }\n        this.existingProviders.set(name, provider);\n        return provider;\n    }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders;\n//# sourceMappingURL=mongo_client_auth_providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fY2xpZW50X2F1dGhfcHJvdmlkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxpQkFBaUIsbUJBQU8sQ0FBQyxnRkFBb0I7QUFDN0Msa0JBQWtCLG1CQUFPLENBQUMsa0ZBQXFCO0FBQy9DLHNCQUFzQixtQkFBTyxDQUFDLDBGQUF5QjtBQUN2RCx1QkFBdUIsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsOEVBQW1CO0FBQzNDLG9CQUFvQixtQkFBTyxDQUFDLHNGQUF1QjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQyw4RUFBbUI7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLDRFQUFrQjtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQywwREFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLE1BQU07QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL21vbmdvX2NsaWVudF9hdXRoX3Byb3ZpZGVycy5qcz85NTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb0NsaWVudEF1dGhQcm92aWRlcnMgPSB2b2lkIDA7XG5jb25zdCBnc3NhcGlfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9nc3NhcGlcIik7XG5jb25zdCBtb25nb2NyXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29jclwiKTtcbmNvbnN0IG1vbmdvZGJfYXdzXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvbW9uZ29kYl9hd3NcIik7XG5jb25zdCBtb25nb2RiX29pZGNfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9tb25nb2RiX29pZGNcIik7XG5jb25zdCBwbGFpbl8xID0gcmVxdWlyZShcIi4vY21hcC9hdXRoL3BsYWluXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi9jbWFwL2F1dGgvcHJvdmlkZXJzXCIpO1xuY29uc3Qgc2NyYW1fMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC9zY3JhbVwiKTtcbmNvbnN0IHg1MDlfMSA9IHJlcXVpcmUoXCIuL2NtYXAvYXV0aC94NTA5XCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgQVVUSF9QUk9WSURFUlMgPSBuZXcgTWFwKFtcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0FXUywgKCkgPT4gbmV3IG1vbmdvZGJfYXdzXzEuTW9uZ29EQkFXUygpXSxcbiAgICBbcHJvdmlkZXJzXzEuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0NSLCAoKSA9PiBuZXcgbW9uZ29jcl8xLk1vbmdvQ1IoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9HU1NBUEksICgpID0+IG5ldyBnc3NhcGlfMS5HU1NBUEkoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLCAoKSA9PiBuZXcgbW9uZ29kYl9vaWRjXzEuTW9uZ29EQk9JREMoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9QTEFJTiwgKCkgPT4gbmV3IHBsYWluXzEuUGxhaW4oKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9TQ1JBTV9TSEExLCAoKSA9PiBuZXcgc2NyYW1fMS5TY3JhbVNIQTEoKV0sXG4gICAgW3Byb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9TQ1JBTV9TSEEyNTYsICgpID0+IG5ldyBzY3JhbV8xLlNjcmFtU0hBMjU2KCldLFxuICAgIFtwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfWDUwOSwgKCkgPT4gbmV3IHg1MDlfMS5YNTA5KCldXG5dKTtcbi8qKlxuICogQ3JlYXRlIGEgc2V0IG9mIHByb3ZpZGVycyBwZXIgY2xpZW50XG4gKiB0byBhdm9pZCBzaGFyaW5nIHRoZSBwcm92aWRlcidzIGNhY2hlIGJldHdlZW4gZGlmZmVyZW50IGNsaWVudHMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgTW9uZ29DbGllbnRBdXRoUHJvdmlkZXJzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5leGlzdGluZ1Byb3ZpZGVycyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IG9yIGNyZWF0ZSBhbiBhdXRoZW50aWNhdGlvbiBwcm92aWRlciBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgbWVjaGFuaXNtLlxuICAgICAqIFdlIGRvbid0IHdhbnQgdG8gY3JlYXRlIGFsbCBwcm92aWRlcnMgYXQgb25jZSwgYXMgc29tZSBwcm92aWRlcnMgbWF5IG5vdCBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3ZpZGVyIHRvIGdldCBvciBjcmVhdGUuXG4gICAgICogQHJldHVybnMgVGhlIHByb3ZpZGVyLlxuICAgICAqIEB0aHJvd3MgTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciBpZiB0aGUgbWVjaGFuaXNtIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZ2V0T3JDcmVhdGVQcm92aWRlcihuYW1lKSB7XG4gICAgICAgIGNvbnN0IGF1dGhQcm92aWRlciA9IHRoaXMuZXhpc3RpbmdQcm92aWRlcnMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoYXV0aFByb3ZpZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYXV0aFByb3ZpZGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gQVVUSF9QUk9WSURFUlMuZ2V0KG5hbWUpPy4oKTtcbiAgICAgICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgYXV0aE1lY2hhbmlzbSAke25hbWV9IG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV4aXN0aW5nUHJvdmlkZXJzLnNldChuYW1lLCBwcm92aWRlcik7XG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycyA9IE1vbmdvQ2xpZW50QXV0aFByb3ZpZGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvX2NsaWVudF9hdXRoX3Byb3ZpZGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_client_auth_providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_logger.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_logger.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoLogger = exports.defaultLogTransform = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.parseSeverityFromString = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection',\n    CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\nexports.parseSeverityFromString = parseSeverityFromString;\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (0, util_1.promisify)((log, cb) => {\n            stream.write((0, util_1.inspect)(log, { compact: true, breakLength: Infinity }), 'utf-8', cb);\n            return;\n        })\n    };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return (parseSeverityFromString(clientOption) ??\n        parseSeverityFromString(environmentOption) ??\n        defaultSeverity);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n    let strToTruncate = '';\n    if (typeof value === 'string') {\n        strToTruncate = value;\n    }\n    else if (typeof value === 'function') {\n        strToTruncate = value.name;\n    }\n    else {\n        try {\n            strToTruncate = bson_1.EJSON.stringify(value, options);\n        }\n        catch (e) {\n            strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n        }\n    }\n    // handle truncation that occurs in the middle of multi-byte codepoints\n    if (maxDocumentLength !== 0 &&\n        strToTruncate.length > maxDocumentLength &&\n        strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n            strToTruncate.codePointAt(maxDocumentLength - 1)) {\n        maxDocumentLength--;\n        if (maxDocumentLength === 0) {\n            return '';\n        }\n    }\n    return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n        ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n        : strToTruncate;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n    log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n    log.operation = operation;\n    log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n    log.message = message;\n    return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    log.databaseName = commandEvent.databaseName;\n    log.serverConnectionId = commandEvent.serverConnectionId;\n    return log;\n}\nfunction attachConnectionFields(log, event) {\n    const { host, port } = utils_1.HostAddress.fromString(event.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n    log.topologyId = sdamEvent.topologyId;\n    return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n    const { awaited, connectionId } = serverHeartbeatEvent;\n    log.awaited = awaited;\n    log.driverConnectionId = serverHeartbeatEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.SERVER_SELECTION_STARTED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            return log;\n        case constants_1.SERVER_SELECTION_FAILED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.SERVER_SELECTION_SUCCEEDED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.serverHost = logObject.serverHost;\n            log.serverPort = logObject.serverPort;\n            return log;\n        case constants_1.WAITING_FOR_SUITABLE_SERVER:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.remainingTimeMS = logObject.remainingTimeMS;\n            return log;\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message ?? '(redacted)';\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId?.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.SERVER_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Starting server monitoring';\n            return log;\n        case constants_1.SERVER_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Stopped server monitoring';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_STARTED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat started';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat succeeded';\n            log.durationMS = logObject.duration;\n            log.serverConnectionId = logObject.serverConnectionId;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.SERVER_HEARTBEAT_FAILED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.TOPOLOGY_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Starting topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Stopped topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Topology description changed';\n            log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n            log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\nexports.defaultLogTransform = defaultLogTransform;\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        this.pendingLog = null;\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n        this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n        this.severities = this.createLoggingSeverities();\n    }\n    createLoggingSeverities() {\n        const severities = Object();\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            severities[component] = {};\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                severities[component][severityLevel] =\n                    compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n            }\n        }\n        return severities;\n    }\n    turnOffSeverities() {\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            this.componentSeverities[component] = exports.SeverityLevel.OFF;\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                this.severities[component][severityLevel] = false;\n            }\n        }\n    }\n    logWriteFailureHandler(error) {\n        if (this.logDestinationIsStdErr) {\n            this.turnOffSeverities();\n            this.clearPendingLog();\n            return;\n        }\n        this.logDestination = createStdioLogger(process.stderr);\n        this.logDestinationIsStdErr = true;\n        this.clearPendingLog();\n        this.error(exports.MongoLoggableComponent.CLIENT, {\n            toLog: function () {\n                return {\n                    message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n                    error: error.message\n                };\n            }\n        });\n        this.turnOffSeverities();\n        this.clearPendingLog();\n    }\n    clearPendingLog() {\n        this.pendingLog = null;\n    }\n    willLog(component, severity) {\n        if (severity === exports.SeverityLevel.OFF)\n            return false;\n        return this.severities[component][severity];\n    }\n    log(severity, component, message) {\n        if (!this.willLog(component, severity))\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n            this.pendingLog = this.pendingLog\n                .then(() => this.logDestination.write(logMessage))\n                .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            return;\n        }\n        try {\n            const logResult = this.logDestination.write(logMessage);\n            if ((0, utils_1.isPromiseLike)(logResult)) {\n                this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            }\n        }\n        catch (error) {\n            this.logWriteFailureHandler(error);\n        }\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolvedLogPath.mongodbLogPath,\n            mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ??\n                (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n                1000,\n            logDestination: combinedOptions.mongodbLogPath,\n            logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_types.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_types.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\n/**\n * Typescript type safe event emitter\n * @public\n */\nclass TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */\n    emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component)\n            this.mongoLogger?.debug(this.component, args[0]);\n    }\n    /** @internal */\n    emitAndLogHeartbeat(event, topologyId, serverConnectionId, ...args) {\n        this.emit(event, ...args);\n        if (this.component) {\n            const loggableHeartbeatEvent = {\n                topologyId: topologyId,\n                serverConnectionId: serverConnectionId ?? null,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(this.component, loggableHeartbeatEvent);\n        }\n    }\n    /** @internal */\n    emitAndLogCommand(monitorCommands, event, databaseName, connectionEstablished, ...args) {\n        if (monitorCommands) {\n            this.emit(event, ...args);\n        }\n        if (connectionEstablished) {\n            const loggableCommandEvent = {\n                databaseName: databaseName,\n                ...args[0]\n            };\n            this.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.COMMAND, loggableCommandEvent);\n        }\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */\nclass CancellationToken extends TypedEventEmitter {\n}\nexports.CancellationToken = CancellationToken;\n//# sourceMappingURL=mongo_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcseUJBQXlCO0FBQ3JELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLHVCQUF1QixtQkFBTyxDQUFDLHdFQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb190eXBlcy5qcz85YmZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IGV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSB2b2lkIDA7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCBtb25nb19sb2dnZXJfMSA9IHJlcXVpcmUoXCIuL21vbmdvX2xvZ2dlclwiKTtcbi8qKlxuICogVHlwZXNjcmlwdCB0eXBlIHNhZmUgZXZlbnQgZW1pdHRlclxuICogQHB1YmxpY1xuICovXG5jbGFzcyBUeXBlZEV2ZW50RW1pdHRlciBleHRlbmRzIGV2ZW50c18xLkV2ZW50RW1pdHRlciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGVtaXRBbmRMb2coZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KVxuICAgICAgICAgICAgdGhpcy5tb25nb0xvZ2dlcj8uZGVidWcodGhpcy5jb21wb25lbnQsIGFyZ3NbMF0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZW1pdEFuZExvZ0hlYXJ0YmVhdChldmVudCwgdG9wb2xvZ3lJZCwgc2VydmVyQ29ubmVjdGlvbklkLCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgY29uc3QgbG9nZ2FibGVIZWFydGJlYXRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICB0b3BvbG9neUlkOiB0b3BvbG9neUlkLFxuICAgICAgICAgICAgICAgIHNlcnZlckNvbm5lY3Rpb25JZDogc2VydmVyQ29ubmVjdGlvbklkID8/IG51bGwsXG4gICAgICAgICAgICAgICAgLi4uYXJnc1swXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubW9uZ29Mb2dnZXI/LmRlYnVnKHRoaXMuY29tcG9uZW50LCBsb2dnYWJsZUhlYXJ0YmVhdEV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgZW1pdEFuZExvZ0NvbW1hbmQobW9uaXRvckNvbW1hbmRzLCBldmVudCwgZGF0YWJhc2VOYW1lLCBjb25uZWN0aW9uRXN0YWJsaXNoZWQsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKG1vbml0b3JDb21tYW5kcykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29ubmVjdGlvbkVzdGFibGlzaGVkKSB7XG4gICAgICAgICAgICBjb25zdCBsb2dnYWJsZUNvbW1hbmRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICBkYXRhYmFzZU5hbWU6IGRhdGFiYXNlTmFtZSxcbiAgICAgICAgICAgICAgICAuLi5hcmdzWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5tb25nb0xvZ2dlcj8uZGVidWcobW9uZ29fbG9nZ2VyXzEuTW9uZ29Mb2dnYWJsZUNvbXBvbmVudC5DT01NQU5ELCBsb2dnYWJsZUNvbW1hbmRFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlR5cGVkRXZlbnRFbWl0dGVyID0gVHlwZWRFdmVudEVtaXR0ZXI7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgQ2FuY2VsbGF0aW9uVG9rZW4gZXh0ZW5kcyBUeXBlZEV2ZW50RW1pdHRlciB7XG59XG5leHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb190eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/aggregate.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/aggregate.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options) {\n        super(undefined, { ...options, dbName: ns.db });\n        this.options = { ...options };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === 'string') {\n            this.pipeline = this.pipeline.concat({ $out: options.out });\n            this.hasWriteStage = true;\n        }\n        else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        }\n        else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n        }\n    }\n    get commandName() {\n        return 'aggregate';\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = { aggregate: this.target, pipeline: this.pipeline };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === 'boolean') {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=aggregate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9hZ2dyZWdhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsK0JBQStCO0FBQzVELGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDJFQUFrQjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwyQkFBMkI7QUFDdEQseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxtQkFBbUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYWdncmVnYXRlLmpzPzMyNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFnZ3JlZ2F0ZU9wZXJhdGlvbiA9IGV4cG9ydHMuREJfQUdHUkVHQVRFX0NPTExFQ1RJT04gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IHdyaXRlX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi93cml0ZV9jb25jZXJuXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5EQl9BR0dSRUdBVEVfQ09MTEVDVElPTiA9IDE7XG5jb25zdCBNSU5fV0lSRV9WRVJTSU9OXyRPVVRfUkVBRF9DT05DRVJOX1NVUFBPUlQgPSA4O1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQWdncmVnYXRlT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5zLCBwaXBlbGluZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIHsgLi4ub3B0aW9ucywgZGJOYW1lOiBucy5kYiB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIC8vIENvdmVycyB3aGVuIG5zLmNvbGxlY3Rpb24gaXMgbnVsbCwgdW5kZWZpbmVkIG9yIHRoZSBlbXB0eSBzdHJpbmcsIHVzZSBEQl9BR0dSRUdBVEVfQ09MTEVDVElPTlxuICAgICAgICB0aGlzLnRhcmdldCA9IG5zLmNvbGxlY3Rpb24gfHwgZXhwb3J0cy5EQl9BR0dSRUdBVEVfQ09MTEVDVElPTjtcbiAgICAgICAgdGhpcy5waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgd2UgaGF2ZSBhIHdyaXRlIHN0YWdlLCBvdmVycmlkZSByZWFkIHByZWZlcmVuY2UgaWYgc29cbiAgICAgICAgdGhpcy5oYXNXcml0ZVN0YWdlID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8ub3V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5waXBlbGluZSA9IHRoaXMucGlwZWxpbmUuY29uY2F0KHsgJG91dDogb3B0aW9ucy5vdXQgfSk7XG4gICAgICAgICAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBpcGVsaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsU3RhZ2UgPSBwaXBlbGluZVtwaXBlbGluZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChmaW5hbFN0YWdlLiRvdXQgfHwgZmluYWxTdGFnZS4kbWVyZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5U2Vjb25kYXJ5V3JpdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbiAmJiB0aGlzLndyaXRlQ29uY2Vybikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwiZXhwbGFpblwiIGNhbm5vdCBiZSB1c2VkIG9uIGFuIGFnZ3JlZ2F0ZSBjYWxsIHdpdGggd3JpdGVDb25jZXJuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnM/LmN1cnNvciAhPSBudWxsICYmIHR5cGVvZiBvcHRpb25zLmN1cnNvciAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0N1cnNvciBvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2FnZ3JlZ2F0ZSc7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVJlYWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5oYXNXcml0ZVN0YWdlO1xuICAgIH1cbiAgICBhZGRUb1BpcGVsaW5lKHN0YWdlKSB7XG4gICAgICAgIHRoaXMucGlwZWxpbmUucHVzaChzdGFnZSk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNlcnZlcldpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcik7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IGFnZ3JlZ2F0ZTogdGhpcy50YXJnZXQsIHBpcGVsaW5lOiB0aGlzLnBpcGVsaW5lIH07XG4gICAgICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UgJiYgc2VydmVyV2lyZVZlcnNpb24gPCBNSU5fV0lSRV9WRVJTSU9OXyRPVVRfUkVBRF9DT05DRVJOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZENvbmNlcm4gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzV3JpdGVTdGFnZSAmJiB0aGlzLndyaXRlQ29uY2Vybikge1xuICAgICAgICAgICAgd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5hcHBseShjb21tYW5kLCB0aGlzLndyaXRlQ29uY2Vybik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb21tYW5kLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hbGxvd0Rpc2tVc2UgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29tbWFuZC5hbGxvd0Rpc2tVc2UgPSBvcHRpb25zLmFsbG93RGlza1VzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICAgICAgICBjb21tYW5kLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGV0KSB7XG4gICAgICAgICAgICBjb21tYW5kLmxldCA9IG9wdGlvbnMubGV0O1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb21tYW5kLmN1cnNvciA9IG9wdGlvbnMuY3Vyc29yIHx8IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5iYXRjaFNpemUgJiYgIXRoaXMuaGFzV3JpdGVTdGFnZSkge1xuICAgICAgICAgICAgY29tbWFuZC5jdXJzb3IuYmF0Y2hTaXplID0gb3B0aW9ucy5iYXRjaFNpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgfVxufVxuZXhwb3J0cy5BZ2dyZWdhdGVPcGVyYXRpb24gPSBBZ2dyZWdhdGVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoQWdncmVnYXRlT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWdncmVnYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/bulk_write.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkWriteOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    get commandName() {\n        return 'bulkWrite';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        // Create the bulk operation\n        const bulk = options.ordered === false\n            ? coll.initializeUnorderedBulkOp(options)\n            : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for (let i = 0; i < operations.length; i++) {\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        const result = await bulk.execute({ ...options, session });\n        return result;\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=bulk_write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9idWxrX3dyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxxQkFBcUI7QUFDakU7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2J1bGtfd3JpdGUuanM/NjliMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVsa1dyaXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBCdWxrV3JpdGVPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25zID0gb3BlcmF0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2J1bGtXcml0ZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbnMgPSB0aGlzLm9wZXJhdGlvbnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4udGhpcy5ic29uT3B0aW9ucywgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UgfTtcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBidWxrIG9wZXJhdGlvblxuICAgICAgICBjb25zdCBidWxrID0gb3B0aW9ucy5vcmRlcmVkID09PSBmYWxzZVxuICAgICAgICAgICAgPyBjb2xsLmluaXRpYWxpemVVbm9yZGVyZWRCdWxrT3Aob3B0aW9ucylcbiAgICAgICAgICAgIDogY29sbC5pbml0aWFsaXplT3JkZXJlZEJ1bGtPcChvcHRpb25zKTtcbiAgICAgICAgLy8gZm9yIGVhY2ggb3AgZ28gdGhyb3VnaCBhbmQgYWRkIHRvIHRoZSBidWxrXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BlcmF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnVsay5yYXcob3BlcmF0aW9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnVsa1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBidWxrLmV4ZWN1dGUoeyAuLi5vcHRpb25zLCBzZXNzaW9uIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuQnVsa1dyaXRlT3BlcmF0aW9uID0gQnVsa1dyaXRlT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEJ1bGtXcml0ZU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bGtfd3JpdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/collections.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/collections.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollectionsOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options) {\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db\n            .listCollections({}, { ...this.options, nameOnly: true, readPreference: this.readPreference, session })\n            .toArray();\n        const collections = [];\n        for (const { name } of documents) {\n            if (!name.includes('$')) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation;\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb2xsZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIscUJBQXFCLG1CQUFPLENBQUMscUVBQWU7QUFDNUMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsSUFBSSwrRUFBK0U7QUFDbEg7QUFDQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29sbGVjdGlvbnMuanM/NDhiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29sbGVjdGlvbnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vY29sbGVjdGlvblwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ29sbGVjdGlvbnNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIC8vIExldCdzIGdldCB0aGUgY29sbGVjdGlvbiBuYW1lc1xuICAgICAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCB0aGlzLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHt9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IHRydWUsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLCBzZXNzaW9uIH0pXG4gICAgICAgICAgICAudG9BcnJheSgpO1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZSB9IG9mIGRvY3VtZW50cykge1xuICAgICAgICAgICAgaWYgKCFuYW1lLmluY2x1ZGVzKCckJykpIHtcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgY29sbGVjdGlvbnMgcmVtb3ZpbmcgYW55IGlsbGVnYWwgb25lc1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25zLnB1c2gobmV3IGNvbGxlY3Rpb25fMS5Db2xsZWN0aW9uKHRoaXMuZGIsIG5hbWUsIHRoaXMuZGIucy5vcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBjb2xsZWN0aW9uIG9iamVjdHNcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29sbGVjdGlvbnNPcGVyYXRpb24gPSBDb2xsZWN0aW9uc09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbGxlY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/command.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/command.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommandOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        }\n        else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return true;\n    }\n    async executeCommand(server, session, cmd) {\n        // TODO: consider making this a non-enumerable property\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation &&\n            typeof options.collation === 'object' &&\n            !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, { collation: options.collation });\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return server.command(this.ns, cmd, options);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tYW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QixnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQywrREFBWTtBQUN0Qyx1QkFBdUIsbUJBQU8sQ0FBQyx5RUFBaUI7QUFDaEQsMkJBQTJCLG1CQUFPLENBQUMsMkZBQTBCO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDJFQUFrQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtCQUErQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw4QkFBOEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbW1hbmQuanM/YmQ1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tbWFuZE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBleHBsYWluXzEgPSByZXF1aXJlKFwiLi4vZXhwbGFpblwiKTtcbmNvbnN0IHJlYWRfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uL3JlYWRfY29uY2VyblwiKTtcbmNvbnN0IHNlcnZlcl9zZWxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL3NlcnZlcl9zZWxlY3Rpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgd3JpdGVfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uL3dyaXRlX2NvbmNlcm5cIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICAvLyBOT1RFOiB0aGlzIHdhcyBleHBsaWNpdGx5IGFkZGVkIGZvciB0aGUgYWRkL3JlbW92ZSB1c2VyIG9wZXJhdGlvbnMsIGl0J3MgbGlrZWx5XG4gICAgICAgIC8vICAgICAgIHNvbWV0aGluZyB3ZSdkIHdhbnQgdG8gcmVjb25zaWRlci4gUGVyaGFwcyB0aG9zZSBjb21tYW5kcyBjYW4gdXNlIGBBZG1pbmBcbiAgICAgICAgLy8gICAgICAgYXMgYSBwYXJlbnQ/XG4gICAgICAgIGNvbnN0IGRiTmFtZU92ZXJyaWRlID0gb3B0aW9ucz8uZGJOYW1lIHx8IG9wdGlvbnM/LmF1dGhkYjtcbiAgICAgICAgaWYgKGRiTmFtZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZShkYk5hbWVPdmVycmlkZSwgJyRjbWQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubnMgPSBwYXJlbnRcbiAgICAgICAgICAgICAgICA/IHBhcmVudC5zLm5hbWVzcGFjZS53aXRoQ29sbGVjdGlvbignJGNtZCcpXG4gICAgICAgICAgICAgICAgOiBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWFkQ29uY2VybiA9IHJlYWRfY29uY2Vybl8xLlJlYWRDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLndyaXRlQ29uY2VybiA9IHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUpKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGxhaW4gPSBleHBsYWluXzEuRXhwbGFpbi5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zPy5leHBsYWluICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYE9wdGlvbiBcImV4cGxhaW5cIiBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgY29tbWFuZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwbGFpbiA9PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCkge1xuICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBtYWtpbmcgdGhpcyBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5ic29uT3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXJ2ZXJXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpO1xuICAgICAgICBjb25zdCBpblRyYW5zYWN0aW9uID0gdGhpcy5zZXNzaW9uICYmIHRoaXMuc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCk7XG4gICAgICAgIGlmICh0aGlzLnJlYWRDb25jZXJuICYmICgwLCB1dGlsc18xLmNvbW1hbmRTdXBwb3J0c1JlYWRDb25jZXJuKShjbWQpICYmICFpblRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNtZCwgeyByZWFkQ29uY2VybjogdGhpcy5yZWFkQ29uY2VybiB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50cnlTZWNvbmRhcnlXcml0ZSAmJiBzZXJ2ZXJXaXJlVmVyc2lvbiA8IHNlcnZlcl9zZWxlY3Rpb25fMS5NSU5fU0VDT05EQVJZX1dSSVRFX1dJUkVfVkVSU0lPTikge1xuICAgICAgICAgICAgb3B0aW9ucy5vbWl0UmVhZFByZWZlcmVuY2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLndyaXRlQ29uY2VybiAmJiB0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKSAmJiAhaW5UcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5hcHBseShjbWQsIHRoaXMud3JpdGVDb25jZXJuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24gJiZcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmNvbGxhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICF0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT04pKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNtZCwgeyBjb2xsYXRpb246IG9wdGlvbnMuY29sbGF0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSkgJiYgdGhpcy5leHBsYWluKSB7XG4gICAgICAgICAgICBjbWQgPSAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhFeHBsYWluKShjbWQsIHRoaXMuZXhwbGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcnZlci5jb21tYW5kKHRoaXMubnMsIGNtZCwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21tYW5kT3BlcmF0aW9uID0gQ29tbWFuZE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1hbmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/common_functions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/common_functions.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.prepareDocs = exports.indexInformation = void 0;\nasync function indexInformation(db, name, options) {\n    if (options == null) {\n        options = {};\n    }\n    // If we specified full information\n    const full = options.full == null ? false : options.full;\n    // Get the list of indexes of the specified collection\n    const indexes = await db.collection(name).listIndexes(options).toArray();\n    if (full)\n        return indexes;\n    const info = {};\n    for (const index of indexes) {\n        info[index.name] = Object.entries(index.key);\n    }\n    return info;\n}\nexports.indexInformation = indexInformation;\nfunction prepareDocs(coll, docs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docs;\n    }\n    return docs.map(doc => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    });\n}\nexports.prepareDocs = prepareDocs;\n//# sourceMappingURL=common_functions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tb25fZnVuY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29tbW9uX2Z1bmN0aW9ucy5qcz9kNmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmVwYXJlRG9jcyA9IGV4cG9ydHMuaW5kZXhJbmZvcm1hdGlvbiA9IHZvaWQgMDtcbmFzeW5jIGZ1bmN0aW9uIGluZGV4SW5mb3JtYXRpb24oZGIsIG5hbWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgLy8gSWYgd2Ugc3BlY2lmaWVkIGZ1bGwgaW5mb3JtYXRpb25cbiAgICBjb25zdCBmdWxsID0gb3B0aW9ucy5mdWxsID09IG51bGwgPyBmYWxzZSA6IG9wdGlvbnMuZnVsbDtcbiAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgaW5kZXhlcyBvZiB0aGUgc3BlY2lmaWVkIGNvbGxlY3Rpb25cbiAgICBjb25zdCBpbmRleGVzID0gYXdhaXQgZGIuY29sbGVjdGlvbihuYW1lKS5saXN0SW5kZXhlcyhvcHRpb25zKS50b0FycmF5KCk7XG4gICAgaWYgKGZ1bGwpXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgIGNvbnN0IGluZm8gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXMpIHtcbiAgICAgICAgaW5mb1tpbmRleC5uYW1lXSA9IE9iamVjdC5lbnRyaWVzKGluZGV4LmtleSk7XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xufVxuZXhwb3J0cy5pbmRleEluZm9ybWF0aW9uID0gaW5kZXhJbmZvcm1hdGlvbjtcbmZ1bmN0aW9uIHByZXBhcmVEb2NzKGNvbGwsIGRvY3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmb3JjZVNlcnZlck9iamVjdElkID0gdHlwZW9mIG9wdGlvbnMuZm9yY2VTZXJ2ZXJPYmplY3RJZCA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgID8gb3B0aW9ucy5mb3JjZVNlcnZlck9iamVjdElkXG4gICAgICAgIDogY29sbC5zLmRiLm9wdGlvbnM/LmZvcmNlU2VydmVyT2JqZWN0SWQ7XG4gICAgLy8gbm8gbmVlZCB0byBtb2RpZnkgdGhlIGRvY3MgaWYgc2VydmVyIHNldHMgdGhlIE9iamVjdElkXG4gICAgaWYgKGZvcmNlU2VydmVyT2JqZWN0SWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGRvY3M7XG4gICAgfVxuICAgIHJldHVybiBkb2NzLm1hcChkb2MgPT4ge1xuICAgICAgICBpZiAoZG9jLl9pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBkb2MuX2lkID0gY29sbC5zLnBrRmFjdG9yeS5jcmVhdGVQaygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2M7XG4gICAgfSk7XG59XG5leHBvcnRzLnByZXBhcmVEb2NzID0gcHJlcGFyZURvY3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb25fZnVuY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options) {\n        super({ s: { namespace: namespace } }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === 'number') {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === 'number') {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLEtBQUssd0JBQXdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY291bnQuanM/ZTc4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ291bnRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb3VudE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lc3BhY2UsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih7IHM6IHsgbmFtZXNwYWNlOiBuYW1lc3BhY2UgfSB9LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IG5hbWVzcGFjZS5jb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gZmlsdGVyO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY291bnQnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjbWQgPSB7XG4gICAgICAgICAgICBjb3VudDogdGhpcy5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5saW1pdCA9IG9wdGlvbnMubGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnNraXAgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQuc2tpcCA9IG9wdGlvbnMuc2tpcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5oaW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNtZC5oaW50ID0gb3B0aW9ucy5oaW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID8gcmVzdWx0Lm4gOiAwO1xuICAgIH1cbn1cbmV4cG9ydHMuQ291bnRPcGVyYXRpb24gPSBDb3VudE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDb3VudE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTiwgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRV0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y291bnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count_documents.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count_documents.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountDocumentsOperation = void 0;\nconst aggregate_1 = __webpack_require__(/*! ./aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\n/** @internal */\nclass CountDocumentsOperation extends aggregate_1.AggregateOperation {\n    constructor(collection, query, options) {\n        const pipeline = [];\n        pipeline.push({ $match: query });\n        if (typeof options.skip === 'number') {\n            pipeline.push({ $skip: options.skip });\n        }\n        if (typeof options.limit === 'number') {\n            pipeline.push({ $limit: options.limit });\n        }\n        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n        super(collection.s.namespace, pipeline, options);\n    }\n    async execute(server, session) {\n        const result = await super.execute(server, session);\n        // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n        const response = result;\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n            return 0;\n        }\n        const docs = response.cursor.firstBatch;\n        return docs.length ? docs[0].n : 0;\n    }\n}\nexports.CountDocumentsOperation = CountDocumentsOperation;\n//# sourceMappingURL=count_documents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudF9kb2N1bWVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQSw0QkFBNEIscUJBQXFCO0FBQ2pEO0FBQ0E7QUFDQSw0QkFBNEIsdUJBQXVCO0FBQ25EO0FBQ0Esd0JBQXdCLFVBQVUsYUFBYSxhQUFhO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudF9kb2N1bWVudHMuanM/NDNlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ291bnREb2N1bWVudHNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBhZ2dyZWdhdGVfMSA9IHJlcXVpcmUoXCIuL2FnZ3JlZ2F0ZVwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvdW50RG9jdW1lbnRzT3BlcmF0aW9uIGV4dGVuZHMgYWdncmVnYXRlXzEuQWdncmVnYXRlT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBxdWVyeSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwaXBlbGluZSA9IFtdO1xuICAgICAgICBwaXBlbGluZS5wdXNoKHsgJG1hdGNoOiBxdWVyeSB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnNraXAgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBwaXBlbGluZS5wdXNoKHsgJHNraXA6IG9wdGlvbnMuc2tpcCB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubGltaXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBwaXBlbGluZS5wdXNoKHsgJGxpbWl0OiBvcHRpb25zLmxpbWl0IH0pO1xuICAgICAgICB9XG4gICAgICAgIHBpcGVsaW5lLnB1c2goeyAkZ3JvdXA6IHsgX2lkOiAxLCBuOiB7ICRzdW06IDEgfSB9IH0pO1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBwaXBlbGluZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgLy8gTk9URTogV2UncmUgYXZvaWRpbmcgY3JlYXRpbmcgYSBjdXJzb3IgaGVyZSB0byByZWR1Y2UgdGhlIGNhbGxzdGFjay5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXN1bHQ7XG4gICAgICAgIGlmIChyZXNwb25zZS5jdXJzb3IgPT0gbnVsbCB8fCByZXNwb25zZS5jdXJzb3IuZmlyc3RCYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb2NzID0gcmVzcG9uc2UuY3Vyc29yLmZpcnN0QmF0Y2g7XG4gICAgICAgIHJldHVybiBkb2NzLmxlbmd0aCA/IGRvY3NbMF0ubiA6IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Db3VudERvY3VtZW50c09wZXJhdGlvbiA9IENvdW50RG9jdW1lbnRzT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y291bnRfZG9jdW1lbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/create_collection.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/create_collection.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return 'create';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ??\n            db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced &&\n                server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: { _id: 1 },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n            }\n            if (!options.encryptedFields) {\n                this.options = { ...this.options, encryptedFields };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = new indexes_1.CreateIndexOperation(db, name, { __safeContent__: 1 }, {});\n            await createIndexOp.execute(server, session);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = { create: name };\n        for (const n in options) {\n            if (options[n] != null &&\n                typeof options[n] !== 'function' &&\n                !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=create_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jcmVhdGVfY29sbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQ0FBaUM7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMseUdBQWlDO0FBQzdELHFCQUFxQixtQkFBTyxDQUFDLHFFQUFlO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxnQkFBZ0IsR0FBRyxLQUFLO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsb0JBQW9CLHlDQUF5Qyw0Q0FBNEM7QUFDdEs7QUFDQTtBQUNBLDhFQUE4RSxLQUFLO0FBQ25GLGdGQUFnRixLQUFLO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixRQUFRO0FBQ3ZDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsb0JBQW9CLElBQUk7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY3JlYXRlX2NvbGxlY3Rpb24uanM/OTFlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NtYXAvd2lyZV9wcm90b2NvbC9jb25zdGFudHNcIik7XG5jb25zdCBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vY29sbGVjdGlvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3QgaW5kZXhlc18xID0gcmVxdWlyZShcIi4vaW5kZXhlc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuY29uc3QgSUxMRUdBTF9DT01NQU5EX0ZJRUxEUyA9IG5ldyBTZXQoW1xuICAgICd3JyxcbiAgICAnd3RpbWVvdXQnLFxuICAgICdqJyxcbiAgICAnZnN5bmMnLFxuICAgICdhdXRvSW5kZXhJZCcsXG4gICAgJ3BrRmFjdG9yeScsXG4gICAgJ3JhdycsXG4gICAgJ3JlYWRQcmVmZXJlbmNlJyxcbiAgICAnc2Vzc2lvbicsXG4gICAgJ3JlYWRDb25jZXJuJyxcbiAgICAnd3JpdGVDb25jZXJuJyxcbiAgICAncmF3JyxcbiAgICAnZmllbGRzQXNSYXcnLFxuICAgICd1c2VCaWdJbnQ2NCcsXG4gICAgJ3Byb21vdGVMb25ncycsXG4gICAgJ3Byb21vdGVWYWx1ZXMnLFxuICAgICdwcm9tb3RlQnVmZmVycycsXG4gICAgJ2Jzb25SZWdFeHAnLFxuICAgICdzZXJpYWxpemVGdW5jdGlvbnMnLFxuICAgICdpZ25vcmVVbmRlZmluZWQnLFxuICAgICdlbmFibGVVdGY4VmFsaWRhdGlvbidcbl0pO1xuLyogQGludGVybmFsICovXG5jb25zdCBJTlZBTElEX1FFX1ZFUlNJT04gPSAnRHJpdmVyIHN1cHBvcnQgb2YgUXVlcnlhYmxlIEVuY3J5cHRpb24gaXMgaW5jb21wYXRpYmxlIHdpdGggc2VydmVyLiBVcGdyYWRlIHNlcnZlciB0byB1c2UgUXVlcnlhYmxlIEVuY3J5cHRpb24uJztcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGIgPSBkYjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2NyZWF0ZSc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkRmllbGRzID0gb3B0aW9ucy5lbmNyeXB0ZWRGaWVsZHMgPz9cbiAgICAgICAgICAgIGRiLmNsaWVudC5vcHRpb25zLmF1dG9FbmNyeXB0aW9uPy5lbmNyeXB0ZWRGaWVsZHNNYXA/LltgJHtkYi5kYXRhYmFzZU5hbWV9LiR7bmFtZX1gXTtcbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgLy8gQ3JlYXRpbmcgYSBRRSBjb2xsZWN0aW9uIHJlcXVpcmVkIG1pbiBzZXJ2ZXIgb2YgNy4wLjBcbiAgICAgICAgICAgIC8vIFRPRE8oTk9ERS01MzUzKTogR2V0IHdpcmUgdmVyc2lvbiBpbmZvcm1hdGlvbiBmcm9tIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICBpZiAoIXNlcnZlci5sb2FkQmFsYW5jZWQgJiZcbiAgICAgICAgICAgICAgICBzZXJ2ZXIuZGVzY3JpcHRpb24ubWF4V2lyZVZlcnNpb24gPCBjb25zdGFudHNfMS5NSU5fU1VQUE9SVEVEX1FFX1dJUkVfVkVSU0lPTikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKGAke0lOVkFMSURfUUVfVkVSU0lPTn0gVGhlIG1pbmltdW0gc2VydmVyIHZlcnNpb24gcmVxdWlyZWQgaXMgJHtjb25zdGFudHNfMS5NSU5fU1VQUE9SVEVEX1FFX1NFUlZFUl9WRVJTSU9OfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ3JlYXRlIGF1eGlsbGlhcnkgY29sbGVjdGlvbnMgZm9yIHF1ZXJ5YWJsZSBlbmNyeXB0aW9uIHN1cHBvcnQuXG4gICAgICAgICAgICBjb25zdCBlc2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVzY0NvbGxlY3Rpb24gPz8gYGVueGNvbF8uJHtuYW1lfS5lc2NgO1xuICAgICAgICAgICAgY29uc3QgZWNvY0NvbGxlY3Rpb24gPSBlbmNyeXB0ZWRGaWVsZHMuZWNvY0NvbGxlY3Rpb24gPz8gYGVueGNvbF8uJHtuYW1lfS5lY29jYDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29sbGVjdGlvbk5hbWUgb2YgW2VzY0NvbGxlY3Rpb24sIGVjb2NDb2xsZWN0aW9uXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZU9wID0gbmV3IENyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24oZGIsIGNvbGxlY3Rpb25OYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsdXN0ZXJlZEluZGV4OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHsgX2lkOiAxIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IGNyZWF0ZU9wLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5lbmNyeXB0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgZW5jcnlwdGVkRmllbGRzIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sbCA9IGF3YWl0IHRoaXMuZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICBpZiAoZW5jcnlwdGVkRmllbGRzKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHJlcXVpcmVkIGluZGV4IGZvciBxdWVyeWFibGUgZW5jcnlwdGlvbiBzdXBwb3J0LlxuICAgICAgICAgICAgY29uc3QgY3JlYXRlSW5kZXhPcCA9IG5ldyBpbmRleGVzXzEuQ3JlYXRlSW5kZXhPcGVyYXRpb24oZGIsIG5hbWUsIHsgX19zYWZlQ29udGVudF9fOiAxIH0sIHt9KTtcbiAgICAgICAgICAgIGF3YWl0IGNyZWF0ZUluZGV4T3AuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNtZCA9IHsgY3JlYXRlOiBuYW1lIH07XG4gICAgICAgIGZvciAoY29uc3QgbiBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uc1tuXSAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnNbbl0gIT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICAhSUxMRUdBTF9DT01NQU5EX0ZJRUxEUy5oYXMobikpIHtcbiAgICAgICAgICAgICAgICBjbWRbbl0gPSBvcHRpb25zW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG90aGVyd2lzZSBqdXN0IGV4ZWN1dGUgdGhlIGNvbW1hbmRcbiAgICAgICAgYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjbWQpO1xuICAgICAgICByZXR1cm4gbmV3IGNvbGxlY3Rpb25fMS5Db2xsZWN0aW9uKGRiLCBuYW1lLCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkNyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSBDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKENyZWF0ZUNvbGxlY3Rpb25PcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVfY29sbGVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/delete.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/delete.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'delete';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === 'number' ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=delete.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kZWxldGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcsdUJBQXVCO0FBQ2hILGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxxRUFBcUUsc0JBQXNCO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2RlbGV0ZS5qcz83ZWM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYWtlRGVsZXRlU3RhdGVtZW50ID0gZXhwb3J0cy5EZWxldGVNYW55T3BlcmF0aW9uID0gZXhwb3J0cy5EZWxldGVPbmVPcGVyYXRpb24gPSBleHBvcnRzLkRlbGV0ZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEZWxldGVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIHN0YXRlbWVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLnN0YXRlbWVudHMgPSBzdGF0ZW1lbnRzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZGVsZXRlJztcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIGlmIChzdXBlci5jYW5SZXRyeVdyaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlbWVudHMuZXZlcnkob3AgPT4gKG9wLmxpbWl0ICE9IG51bGwgPyBvcC5saW1pdCA+IDAgOiB0cnVlKSk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPz8ge307XG4gICAgICAgIGNvbnN0IG9yZGVyZWQgPSB0eXBlb2Ygb3B0aW9ucy5vcmRlcmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLm9yZGVyZWQgOiB0cnVlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgZGVsZXRlOiB0aGlzLm5zLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBkZWxldGVzOiB0aGlzLnN0YXRlbWVudHMsXG4gICAgICAgICAgICBvcmRlcmVkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zLmxldCkge1xuICAgICAgICAgICAgY29tbWFuZC5sZXQgPSBvcHRpb25zLmxldDtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKG9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdW5hY2tub3dsZWRnZWRXcml0ZSA9IHRoaXMud3JpdGVDb25jZXJuICYmIHRoaXMud3JpdGVDb25jZXJuLncgPT09IDA7XG4gICAgICAgIGlmICh1bmFja25vd2xlZGdlZFdyaXRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZW1lbnRzLmZpbmQoKG8pID0+IG8uaGludCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPKE5PREUtMzU0MSk6IGZpeCBlcnJvciBmb3IgaGludCB3aXRoIHVuYWNrbm93bGVkZ2VkIHdyaXRlc1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQ29tcGF0aWJpbGl0eUVycm9yKGBoaW50IGlzIG5vdCBzdXBwb3J0ZWQgd2l0aCB1bmFja25vd2xlZGdlZCB3cml0ZXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkRlbGV0ZU9wZXJhdGlvbiA9IERlbGV0ZU9wZXJhdGlvbjtcbmNsYXNzIERlbGV0ZU9uZU9wZXJhdGlvbiBleHRlbmRzIERlbGV0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIFttYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgeyAuLi5vcHRpb25zLCBsaW1pdDogMSB9KV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSAoYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbilcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBkZWxldGVkQ291bnQ6IHJlcy5uXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVPbmVPcGVyYXRpb24gPSBEZWxldGVPbmVPcGVyYXRpb247XG5jbGFzcyBEZWxldGVNYW55T3BlcmF0aW9uIGV4dGVuZHMgRGVsZXRlT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgW21ha2VEZWxldGVTdGF0ZW1lbnQoZmlsdGVyLCBvcHRpb25zKV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCByZXMgPSAoYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbilcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGlmIChyZXMuY29kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzKTtcbiAgICAgICAgaWYgKHJlcy53cml0ZUVycm9ycylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFja25vd2xlZGdlZDogdGhpcy53cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICBkZWxldGVkQ291bnQ6IHJlcy5uXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVNYW55T3BlcmF0aW9uID0gRGVsZXRlTWFueU9wZXJhdGlvbjtcbmZ1bmN0aW9uIG1ha2VEZWxldGVTdGF0ZW1lbnQoZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3AgPSB7XG4gICAgICAgIHE6IGZpbHRlcixcbiAgICAgICAgbGltaXQ6IHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMubGltaXQgOiAwXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24pIHtcbiAgICAgICAgb3AuY29sbGF0aW9uID0gb3B0aW9ucy5jb2xsYXRpb247XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmhpbnQpIHtcbiAgICAgICAgb3AuaGludCA9IG9wdGlvbnMuaGludDtcbiAgICB9XG4gICAgcmV0dXJuIG9wO1xufVxuZXhwb3J0cy5tYWtlRGVsZXRlU3RhdGVtZW50ID0gbWFrZURlbGV0ZVN0YXRlbWVudDtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEZWxldGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGVsZXRlT25lT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT05cbl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERlbGV0ZU1hbnlPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuU0tJUF9DT0xMQVRJT05cbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsZXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/delete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/distinct.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/distinct.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DistinctOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    get commandName() {\n        return 'distinct';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== 'undefined') {\n            cmd.comment = options.comment;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kaXN0aW5jdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2Rpc3RpbmN0LmpzP2UwY2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpc3RpbmN0T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKlxuICogUmV0dXJuIGEgbGlzdCBvZiBkaXN0aW5jdCB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBrZXkgYWNyb3NzIGEgY29sbGVjdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBEaXN0aW5jdE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBEaXN0aW5jdCBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbiAtIENvbGxlY3Rpb24gaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIGtleSAtIEZpZWxkIG9mIHRoZSBkb2N1bWVudCB0byBmaW5kIGRpc3RpbmN0IHZhbHVlcyBmb3IuXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHF1ZXJ5IGZvciBmaWx0ZXJpbmcgdGhlIHNldCBvZiBkb2N1bWVudHMgdG8gd2hpY2ggd2UgYXBwbHkgdGhlIGRpc3RpbmN0IGZpbHRlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzLiBTZWUgQ29sbGVjdGlvbi5wcm90b3R5cGUuZGlzdGluY3QgZm9yIGEgbGlzdCBvZiBvcHRpb25zLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGtleSwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdkaXN0aW5jdCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5O1xuICAgICAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIC8vIERpc3RpbmN0IGNvbW1hbmRcbiAgICAgICAgY29uc3QgY21kID0ge1xuICAgICAgICAgICAgZGlzdGluY3Q6IGNvbGwuY29sbGVjdGlvbk5hbWUsXG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgICB9O1xuICAgICAgICAvLyBBZGQgbWF4VGltZU1TIGlmIGRlZmluZWRcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyB3ZSBoYXZlIGEgcmVhZENvbmNlcm4gc3BlY2lmaWVkXG4gICAgICAgICgwLCB1dGlsc18xLmRlY29yYXRlV2l0aFJlYWRDb25jZXJuKShjbWQsIGNvbGwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBIYXZlIHdlIHNwZWNpZmllZCBjb2xsYXRpb25cbiAgICAgICAgKDAsIHV0aWxzXzEuZGVjb3JhdGVXaXRoQ29sbGF0aW9uKShjbWQsIGNvbGwsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cGxhaW4gPyByZXN1bHQgOiByZXN1bHQudmFsdWVzO1xuICAgIH1cbn1cbmV4cG9ydHMuRGlzdGluY3RPcGVyYXRpb24gPSBEaXN0aW5jdE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEaXN0aW5jdE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTiwgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSwgb3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/distinct.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/drop.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/drop.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    get commandName() {\n        return 'drop';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db\n                .listCollections({ name }, { nameOnly: false })\n                .toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                }\n                catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) ||\n                        err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return this.executeWithoutEncryptedFieldsCheck(server, session);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        await super.executeCommand(server, session, { drop: this.name });\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dropDatabase';\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropDatabase: 1 });\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kcm9wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLCtCQUErQjtBQUMvRCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLGdCQUFnQixHQUFHLEtBQUs7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE1BQU0sSUFBSSxpQkFBaUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsS0FBSztBQUNuRixnRkFBZ0YsS0FBSztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlCQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2Ryb3AuanM/NTEyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRHJvcERhdGFiYXNlT3BlcmF0aW9uID0gZXhwb3J0cy5Ecm9wQ29sbGVjdGlvbk9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZHJvcCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkRmllbGRzTWFwID0gZGIuY2xpZW50Lm9wdGlvbnMuYXV0b0VuY3J5cHRpb24/LmVuY3J5cHRlZEZpZWxkc01hcDtcbiAgICAgICAgbGV0IGVuY3J5cHRlZEZpZWxkcyA9IG9wdGlvbnMuZW5jcnlwdGVkRmllbGRzID8/IGVuY3J5cHRlZEZpZWxkc01hcD8uW2Ake2RiLmRhdGFiYXNlTmFtZX0uJHtuYW1lfWBdO1xuICAgICAgICBpZiAoIWVuY3J5cHRlZEZpZWxkcyAmJiBlbmNyeXB0ZWRGaWVsZHNNYXApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBNb25nb0NsaWVudCB3YXMgY29uZmlndXJlZCB3aXRoIGFuIGVuY3J5cHRlZEZpZWxkc01hcCxcbiAgICAgICAgICAgIC8vIGFuZCBubyBlbmNyeXB0ZWRGaWVsZHMgY29uZmlnIHdhcyBhdmFpbGFibGUgaW4gaXQgb3IgZXhwbGljaXRseVxuICAgICAgICAgICAgLy8gcGFzc2VkIGFzIGFuIGFyZ3VtZW50LCB0aGUgc3BlYyB0ZWxscyB1cyB0byBsb29rIG9uZSB1cCB1c2luZ1xuICAgICAgICAgICAgLy8gbGlzdENvbGxlY3Rpb25zKCkuXG4gICAgICAgICAgICBjb25zdCBsaXN0Q29sbGVjdGlvbnNSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgICAgICAgICAgIC5saXN0Q29sbGVjdGlvbnMoeyBuYW1lIH0sIHsgbmFtZU9ubHk6IGZhbHNlIH0pXG4gICAgICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIGVuY3J5cHRlZEZpZWxkcyA9IGxpc3RDb2xsZWN0aW9uc1Jlc3VsdD8uWzBdPy5vcHRpb25zPy5lbmNyeXB0ZWRGaWVsZHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgY29uc3QgZXNjQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lc2NDb2xsZWN0aW9uIHx8IGBlbnhjb2xfLiR7bmFtZX0uZXNjYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVjb2NDb2xsZWN0aW9uIHx8IGBlbnhjb2xfLiR7bmFtZX0uZWNvY2A7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb25OYW1lIG9mIFtlc2NDb2xsZWN0aW9uLCBlY29jQ29sbGVjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICAvLyBEcm9wIGF1eGlsbGlhcnkgY29sbGVjdGlvbnMsIGlnbm9yaW5nIHBvdGVudGlhbCBOYW1lc3BhY2VOb3RGb3VuZCBlcnJvcnMuXG4gICAgICAgICAgICAgICAgY29uc3QgZHJvcE9wID0gbmV3IERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uKGRiLCBjb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZHJvcE9wLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIuY29kZSAhPT0gZXJyb3JfMS5NT05HT0RCX0VSUk9SX0NPREVTLk5hbWVzcGFjZU5vdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcDogdGhpcy5uYW1lIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLkRyb3BDb2xsZWN0aW9uT3BlcmF0aW9uID0gRHJvcENvbGxlY3Rpb25PcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEcm9wRGF0YWJhc2VPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnZHJvcERhdGFiYXNlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB7IGRyb3BEYXRhYmFzZTogMSB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wRGF0YWJhc2VPcGVyYXRpb24gPSBEcm9wRGF0YWJhc2VPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRHJvcENvbGxlY3Rpb25PcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRHJvcERhdGFiYXNlT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/estimated_document_count.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}) {\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    get commandName() {\n        return 'count';\n    }\n    async execute(server, session) {\n        const cmd = { count: this.collectionName };\n        if (typeof this.options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=estimated_document_count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUNBQXVDO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanM/MmY5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2NvdW50JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY21kID0geyBjb3VudDogdGhpcy5jb2xsZWN0aW9uTmFtZSB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5tYXhUaW1lTVMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjbWQubWF4VGltZU1TID0gdGhpcy5vcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNtZC5jb21tZW50ID0gdGhpcy5vcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZT8ubiB8fCAwO1xuICAgIH1cbn1cbmV4cG9ydHMuRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiA9IEVzdGltYXRlZERvY3VtZW50Q291bnRPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXN0aW1hdGVkX2RvY3VtZW50X2NvdW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/execute_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.executeOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * Allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided.\n *\n * The expectation is that this function:\n * - Connects the MongoClient if it has not already been connected\n * - Creates a session if none is provided and cleans up the session it creates\n * - Selects a server based on readPreference or various factors\n * - Retries an operation if it fails for certain errors, see {@link retryOperation}\n *\n * @typeParam T - The operation's type\n * @typeParam TResult - The type of the operation's result, calculated from T\n *\n * @param client - The MongoClient to execute this operation with\n * @param operation - The operation to execute\n */\nasync function executeOperation(client, operation) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n    }\n    if (client.topology == null) {\n        // Auto connect on operation\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n        }\n        client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n        try {\n            await client.connect();\n        }\n        finally {\n            delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n        }\n    }\n    const { topology } = client;\n    if (topology == null) {\n        throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n    }\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n    }\n    else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    }\n    else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n    else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    }\n    else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    }\n    else {\n        selector = readPreference;\n    }\n    const server = await topology.selectServerAsync(selector, {\n        session,\n        operationName: operation.commandName\n    });\n    if (session == null) {\n        // No session also means it is not retryable, early exit\n        return operation.execute(server, undefined);\n    }\n    if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n        // non-retryable operation, early exit\n        try {\n            return await operation.execute(server, session);\n        }\n        finally {\n            if (session?.owner != null && session.owner === owner) {\n                await session.endSession().catch(() => null);\n            }\n        }\n    }\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites &&\n        !inTransaction &&\n        (0, utils_1.supportsRetryableWrites)(server) &&\n        operation.canRetryWrite;\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const willRetry = (hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite);\n    if (hasWriteAspect && willRetryWrite) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (operationError) {\n        if (willRetry && operationError instanceof error_1.MongoError) {\n            return await retryOperation(operation, operationError, {\n                session,\n                topology,\n                selector,\n                previousServer: server.description\n            });\n        }\n        throw operationError;\n    }\n    finally {\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession().catch(() => null);\n        }\n    }\n}\nexports.executeOperation = executeOperation;\nasync function retryOperation(operation, originalError, { session, topology, selector, previousServer }) {\n    const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n        throw new error_1.MongoServerError({\n            message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            originalError\n        });\n    }\n    if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n        throw originalError;\n    }\n    if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n        throw originalError;\n    }\n    if (originalError instanceof error_1.MongoNetworkError &&\n        session.isPinned &&\n        !session.inTransaction() &&\n        operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n        // If we have a cursor and the initial command fails with a network error,\n        // we can retry it on another connection. So we need to check it back in, clear the\n        // pool for the service id, and retry again.\n        session.unpin({ force: true, forceClear: true });\n    }\n    // select a new server, and attempt to retry the operation\n    const server = await topology.selectServerAsync(selector, {\n        session,\n        operationName: operation.commandName,\n        previousServer\n    });\n    if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n        throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (retryError) {\n        if (retryError instanceof error_1.MongoError &&\n            retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n            throw originalError;\n        }\n        throw retryError;\n    }\n}\n//# sourceMappingURL=execute_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n    constructor(collection, ns, filter = {}, options = {}) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== 'object' || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n    }\n    get commandName() {\n        return 'find';\n    }\n    async execute(server, session) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return server.command(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: 'firstBatch',\n            session\n        });\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length\n                ? projection.reduce((result, field) => {\n                    result[field] = 1;\n                    return result;\n                }, {})\n                : { _id: 1 };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === 'number') {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === 'number') {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === 'number') {\n        if (options.batchSize < 0) {\n            if (options.limit &&\n                options.limit !== 0 &&\n                Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === 'boolean') {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === 'boolean') {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === 'boolean') {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === 'boolean') {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n        findCommand.noCursorTimeout = !options.timeout;\n    }\n    else if (typeof options.noCursorTimeout === 'boolean') {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === 'boolean') {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=find.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find_and_modify.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.FindAndModifyOperation = exports.ReturnDocument = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    get commandName() {\n        return 'findAndModify';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        }\n        catch (err) {\n            return err;\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd);\n        return options.includeResultMetadata ? result : result.value ?? null;\n    }\n}\nexports.FindAndModifyOperation = FindAndModifyOperation;\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/get_more.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/get_more.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetMoreOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options) {\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'getMore';\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */\n    async execute(server, _session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === 'number') {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === 'number') {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: 'nextBatch',\n            ...this.options\n        };\n        return server.command(this.ns, getMoreCmd, commandOptions);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=get_more.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9nZXRfbW9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZ2V0X21vcmUuanM/MTc5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2V0TW9yZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBHZXRNb3JlT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5zLCBjdXJzb3JJZCwgc2VydmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMuY3Vyc29ySWQgPSBjdXJzb3JJZDtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdnZXRNb3JlJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWx0aG91Z2ggdGhlcmUgaXMgYSBzZXJ2ZXIgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggdGhlIGdldCBtb3JlIG9wZXJhdGlvbiwgdGhlIHNpZ25hdHVyZVxuICAgICAqIGZvciBleGVjdXRlIHBhc3NlcyBhIHNlcnZlciBzbyB3ZSB3aWxsIGp1c3QgdXNlIHRoYXQgb25lLlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBfc2Vzc2lvbikge1xuICAgICAgICBpZiAoc2VydmVyICE9PSB0aGlzLnNlcnZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ0dldG1vcmUgbXVzdCBydW4gb24gdGhlIHNhbWUgc2VydmVyIG9wZXJhdGlvbiBiZWdhbiBvbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmN1cnNvcklkID09IG51bGwgfHwgdGhpcy5jdXJzb3JJZC5pc1plcm8oKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ1VuYWJsZSB0byBpdGVyYXRlIGN1cnNvciB3aXRoIG5vIGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMubnMuY29sbGVjdGlvbjtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQ3Vyc29ycyBzaG91bGQgaGF2ZSBhZG9wdGVkIHRoZSBuYW1lc3BhY2UgcmV0dXJuZWQgYnkgTW9uZ29EQlxuICAgICAgICAgICAgLy8gd2hpY2ggc2hvdWxkIGFsd2F5cyBkZWZpbmVkIGEgY29sbGVjdGlvbiBuYW1lIChldmVuIGEgcHNldWRvIG9uZSwgZXguIGRiLmFnZ3JlZ2F0ZSgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ0EgY29sbGVjdGlvbiBuYW1lIG11c3QgYmUgZGV0ZXJtaW5lZCBiZWZvcmUgZ2V0TW9yZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdldE1vcmVDbWQgPSB7XG4gICAgICAgICAgICBnZXRNb3JlOiB0aGlzLmN1cnNvcklkLFxuICAgICAgICAgICAgY29sbGVjdGlvblxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5iYXRjaFNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBnZXRNb3JlQ21kLmJhdGNoU2l6ZSA9IE1hdGguYWJzKHRoaXMub3B0aW9ucy5iYXRjaFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm1heEF3YWl0VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZ2V0TW9yZUNtZC5tYXhUaW1lTVMgPSB0aGlzLm9wdGlvbnMubWF4QXdhaXRUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkICYmICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpID49IDkpIHtcbiAgICAgICAgICAgIGdldE1vcmVDbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbW1hbmRPcHRpb25zID0ge1xuICAgICAgICAgICAgcmV0dXJuRmllbGRTZWxlY3RvcjogbnVsbCxcbiAgICAgICAgICAgIGRvY3VtZW50c1JldHVybmVkSW46ICduZXh0QmF0Y2gnLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzZXJ2ZXIuY29tbWFuZCh0aGlzLm5zLCBnZXRNb3JlQ21kLCBjb21tYW5kT3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5HZXRNb3JlT3BlcmF0aW9uID0gR2V0TW9yZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShHZXRNb3JlT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVJdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldF9tb3JlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/get_more.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/indexes.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/indexes.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst VALID_INDEX_OPTIONS = new Set([\n    'background',\n    'unique',\n    'name',\n    'partialFilterExpression',\n    'sparse',\n    'hidden',\n    'expireAfterSeconds',\n    'storageEngine',\n    'collation',\n    'version',\n    // text indexes\n    'weights',\n    'default_language',\n    'language_override',\n    'textIndexVersion',\n    // 2d-sphere indexes\n    '2dsphereIndexVersion',\n    // 2d indexes\n    'bits',\n    'min',\n    'max',\n    // geoHaystack Indexes\n    'bucketSize',\n    // wildcard indexes\n    'wildcardProjection'\n]);\nfunction isIndexDirection(x) {\n    return (typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack');\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs) {\n        if (typeof spec === 'string') {\n            key.set(spec, 1);\n        }\n        else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        }\n        else if (spec instanceof Map) {\n            for (const [property, value] of spec) {\n                key.set(property, value);\n            }\n        }\n        else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)) {\n                key.set(property, value);\n            }\n        }\n    }\n    return { ...options, key };\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(_server, session) {\n        const coll = this.collection;\n        const options = this.options;\n        return (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            full: true,\n            ...options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options) {\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map(userIndex => {\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n            const validIndexOptions = Object.fromEntries(Object.entries({ ...userIndex }).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName)));\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    get commandName() {\n        return 'createIndexes';\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = { createIndexes: this.collectionName, indexes };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd);\n        const indexNames = indexes.map(index => index.name || '');\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n    constructor(parent, collectionName, indexSpec, options) {\n        super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n    }\n    async execute(server, session) {\n        const indexNames = await super.execute(server, session);\n        return indexNames[0];\n    }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n    constructor(db, collectionName, indexSpec, options) {\n        super(db, collectionName, indexSpec, options);\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.db = db;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const indexName = this.indexes[0].name;\n        const indexes = await this.db\n            .collection(this.collectionName)\n            .listIndexes({ session })\n            .toArray()\n            .catch(error => {\n            if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound)\n                return [];\n            throw error;\n        });\n        if (indexName && indexes.some(index => index.name === indexName))\n            return indexName;\n        return super.execute(server, session);\n    }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    get commandName() {\n        return 'dropIndexes';\n    }\n    async execute(server, session) {\n        const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n        const command = { listIndexes: this.collectionNamespace.collection, cursor };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n    constructor(collection, indexes, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.indexes = indexes;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const indexes = this.indexes;\n        const info = await (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n        // Let's check for the index names\n        if (!Array.isArray(indexes))\n            return info[indexes] != null;\n        // All keys found return true\n        return indexes.every(indexName => info[indexName] != null);\n    }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n    constructor(db, name, options) {\n        super(options);\n        this.options = options ?? {};\n        this.db = db;\n        this.name = name;\n    }\n    get commandName() {\n        return 'listIndexes';\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        return (0, common_functions_1.indexInformation)(db, name, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=indexes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/indexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/insert.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/insert.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, common_functions_1.prepareDocs)(collection, [doc], options), options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, (0, common_functions_1.prepareDocs)(coll, this.docs, options).map(document => ({ insertOne: { document } })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pbnNlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcsdUJBQXVCO0FBQ2xGLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHdCQUF3QixtQkFBTyxDQUFDLDJFQUFrQjtBQUNsRCxxQkFBcUIsbUJBQU8sQ0FBQywrRUFBYztBQUMzQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQywyQkFBMkIsbUJBQU8sQ0FBQywyRkFBb0I7QUFDdkQsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsOEpBQThKLGFBQWEsWUFBWTtBQUN2TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5zZXJ0LmpzP2VkYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkluc2VydE1hbnlPcGVyYXRpb24gPSBleHBvcnRzLkluc2VydE9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuSW5zZXJ0T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHdyaXRlX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuLi93cml0ZV9jb25jZXJuXCIpO1xuY29uc3QgYnVsa193cml0ZV8xID0gcmVxdWlyZShcIi4vYnVsa193cml0ZVwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBjb21tb25fZnVuY3Rpb25zXzEgPSByZXF1aXJlKFwiLi9jb21tb25fZnVuY3Rpb25zXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBJbnNlcnRPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIGRvY3VtZW50cywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIGNoZWNrS2V5czogb3B0aW9ucy5jaGVja0tleXMgPz8gZmFsc2UgfTtcbiAgICAgICAgdGhpcy5ucyA9IG5zO1xuICAgICAgICB0aGlzLmRvY3VtZW50cyA9IGRvY3VtZW50cztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2luc2VydCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPz8ge307XG4gICAgICAgIGNvbnN0IG9yZGVyZWQgPSB0eXBlb2Ygb3B0aW9ucy5vcmRlcmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLm9yZGVyZWQgOiB0cnVlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgaW5zZXJ0OiB0aGlzLm5zLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBkb2N1bWVudHM6IHRoaXMuZG9jdW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uID0gb3B0aW9ucy5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0T3BlcmF0aW9uID0gSW5zZXJ0T3BlcmF0aW9uO1xuY2xhc3MgSW5zZXJ0T25lT3BlcmF0aW9uIGV4dGVuZHMgSW5zZXJ0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkb2MsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgKDAsIGNvbW1vbl9mdW5jdGlvbnNfMS5wcmVwYXJlRG9jcykoY29sbGVjdGlvbiwgW2RvY10sIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIGEgV3JpdGVFcnJvciBidXQgd2UgY2FuJ3QgY2hhbmdlIGl0IG5vdyBiZWNhdXNlIG9mIGVycm9yIGhpZXJhcmNoeVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMud3JpdGVFcnJvcnNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgaW5zZXJ0ZWRJZDogdGhpcy5kb2N1bWVudHNbMF0uX2lkXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5JbnNlcnRPbmVPcGVyYXRpb24gPSBJbnNlcnRPbmVPcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5jbGFzcyBJbnNlcnRNYW55T3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGRvY3MsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkb2NzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignQXJndW1lbnQgXCJkb2NzXCIgbXVzdCBiZSBhbiBhcnJheSBvZiBkb2N1bWVudHMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmRvY3MgPSBkb2NzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnaW5zZXJ0JztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgLi4udGhpcy5vcHRpb25zLCAuLi50aGlzLmJzb25PcHRpb25zLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSB9O1xuICAgICAgICBjb25zdCB3cml0ZUNvbmNlcm4gPSB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBidWxrV3JpdGVPcGVyYXRpb24gPSBuZXcgYnVsa193cml0ZV8xLkJ1bGtXcml0ZU9wZXJhdGlvbihjb2xsLCAoMCwgY29tbW9uX2Z1bmN0aW9uc18xLnByZXBhcmVEb2NzKShjb2xsLCB0aGlzLmRvY3MsIG9wdGlvbnMpLm1hcChkb2N1bWVudCA9PiAoeyBpbnNlcnRPbmU6IHsgZG9jdW1lbnQgfSB9KSksIG9wdGlvbnMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYnVsa1dyaXRlT3BlcmF0aW9uLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB3cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWRDb3VudDogcmVzLmluc2VydGVkQ291bnQsXG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWRJZHM6IHJlcy5pbnNlcnRlZElkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyICYmIGVyci5tZXNzYWdlID09PSAnT3BlcmF0aW9uIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYW4gb3BlcmF0aW9uIGtleScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDb2xsZWN0aW9uLmluc2VydE1hbnkoKSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggYW4gYXJyYXkgdGhhdCBoYXMgbnVsbC91bmRlZmluZWQgdmFsdWVzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkluc2VydE1hbnlPcGVyYXRpb24gPSBJbnNlcnRNYW55T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEluc2VydE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShJbnNlcnRPbmVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoSW5zZXJ0TWFueU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/insert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/is_capped.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/is_capped.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IsCappedOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation;\n//# sourceMappingURL=is_capped.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pc19jYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJCQUEyQixJQUFJLGdGQUFnRjtBQUM5STtBQUNBO0FBQ0EsMERBQTBELGdCQUFnQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaXNfY2FwcGVkLmpzPzRhZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklzQ2FwcGVkT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSXNDYXBwZWRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2xpc3RDb2xsZWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IFtjb2xsZWN0aW9uXSA9IGF3YWl0IGNvbGwucy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWU6IGNvbGwuY29sbGVjdGlvbk5hbWUgfSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiBmYWxzZSwgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsIHNlc3Npb24gfSlcbiAgICAgICAgICAgIC50b0FycmF5KCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwgfHwgY29sbGVjdGlvbi5vcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoYGNvbGxlY3Rpb24gJHtjb2xsLm5hbWVzcGFjZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhY29sbGVjdGlvbi5vcHRpb25zPy5jYXBwZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Jc0NhcHBlZE9wZXJhdGlvbiA9IElzQ2FwcGVkT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNfY2FwcGVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/kill_cursors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KillCursorsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options) {\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    get commandName() {\n        return 'killCursors';\n    }\n    async execute(server, session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [this.cursorId]\n        };\n        try {\n            await server.command(this.ns, killCursorsCommand, { session });\n        }\n        catch {\n            // The driver should never emit errors from killCursors, this is spec-ed behavior\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=kill_cursors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9raWxsX2N1cnNvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLFNBQVM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2tpbGxfY3Vyc29ycy5qcz81MWQ0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LaWxsQ3Vyc29yc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbmNsYXNzIEtpbGxDdXJzb3JzT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGN1cnNvcklkLCBucywgc2VydmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMuY3Vyc29ySWQgPSBjdXJzb3JJZDtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdraWxsQ3Vyc29ycyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGlmIChzZXJ2ZXIgIT09IHRoaXMuc2VydmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignS2lsbGN1cnNvciBtdXN0IHJ1biBvbiB0aGUgc2FtZSBzZXJ2ZXIgb3BlcmF0aW9uIGJlZ2FuIG9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2lsbEN1cnNvcnMgPSB0aGlzLm5zLmNvbGxlY3Rpb247XG4gICAgICAgIGlmIChraWxsQ3Vyc29ycyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBDdXJzb3JzIHNob3VsZCBoYXZlIGFkb3B0ZWQgdGhlIG5hbWVzcGFjZSByZXR1cm5lZCBieSBNb25nb0RCXG4gICAgICAgICAgICAvLyB3aGljaCBzaG91bGQgYWx3YXlzIGRlZmluZWQgYSBjb2xsZWN0aW9uIG5hbWUgKGV2ZW4gYSBwc2V1ZG8gb25lLCBleC4gZGIuYWdncmVnYXRlKCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignQSBjb2xsZWN0aW9uIG5hbWUgbXVzdCBiZSBkZXRlcm1pbmVkIGJlZm9yZSBraWxsQ3Vyc29ycycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtpbGxDdXJzb3JzQ29tbWFuZCA9IHtcbiAgICAgICAgICAgIGtpbGxDdXJzb3JzLFxuICAgICAgICAgICAgY3Vyc29yczogW3RoaXMuY3Vyc29ySWRdXG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBzZXJ2ZXIuY29tbWFuZCh0aGlzLm5zLCBraWxsQ3Vyc29yc0NvbW1hbmQsIHsgc2Vzc2lvbiB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAvLyBUaGUgZHJpdmVyIHNob3VsZCBuZXZlciBlbWl0IGVycm9ycyBmcm9tIGtpbGxDdXJzb3JzLCB0aGlzIGlzIHNwZWMtZWQgYmVoYXZpb3JcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuS2lsbEN1cnNvcnNPcGVyYXRpb24gPSBLaWxsQ3Vyc29yc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShLaWxsQ3Vyc29yc09wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5NVVNUX1NFTEVDVF9TQU1FX1NFUlZFUl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2lsbF9jdXJzb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_collections.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_collections.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)));\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n    generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDRCQUE0QixJQUFJO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zLmpzPzllODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLndyaXRlQ29uY2VybjtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICAgICAgdGhpcy5uYW1lT25seSA9ICEhdGhpcy5vcHRpb25zLm5hbWVPbmx5O1xuICAgICAgICB0aGlzLmF1dGhvcml6ZWRDb2xsZWN0aW9ucyA9ICEhdGhpcy5vcHRpb25zLmF1dGhvcml6ZWRDb2xsZWN0aW9ucztcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5iYXRjaFNpemUgPSB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0Q29sbGVjdGlvbnMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB0aGlzLmdlbmVyYXRlQ29tbWFuZCgoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKSkpO1xuICAgIH1cbiAgICAvKiBUaGlzIGlzIGhlcmUgZm9yIHRoZSBwdXJwb3NlIG9mIHVuaXQgdGVzdGluZyB0aGUgZmluYWwgY29tbWFuZCB0aGF0IGdldHMgc2VudC4gKi9cbiAgICBnZW5lcmF0ZUNvbW1hbmQod2lyZVZlcnNpb24pIHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGxpc3RDb2xsZWN0aW9uczogMSxcbiAgICAgICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXIsXG4gICAgICAgICAgICBjdXJzb3I6IHRoaXMuYmF0Y2hTaXplID8geyBiYXRjaFNpemU6IHRoaXMuYmF0Y2hTaXplIH0gOiB7fSxcbiAgICAgICAgICAgIG5hbWVPbmx5OiB0aGlzLm5hbWVPbmx5LFxuICAgICAgICAgICAgYXV0aG9yaXplZENvbGxlY3Rpb25zOiB0aGlzLmF1dGhvcml6ZWRDb2xsZWN0aW9uc1xuICAgICAgICB9O1xuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHdpcmVWZXJzaW9uID49IDkgJiYgdGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gdGhpcy5vcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbW1hbmQ7XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24gPSBMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkNVUlNPUl9DUkVBVElOR1xuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2NvbGxlY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_databases.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_databases.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'listDatabases';\n    }\n    async execute(server, session) {\n        const cmd = { listDatabases: 1 };\n        if (typeof this.options.nameOnly === 'boolean') {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === 'boolean') {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=list_databases.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfZGF0YWJhc2VzLmpzPzM1NTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3REYXRhYmFzZXNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgTGlzdERhdGFiYXNlc09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdsaXN0RGF0YWJhc2VzJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY21kID0geyBsaXN0RGF0YWJhc2VzOiAxIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm5hbWVPbmx5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNtZC5uYW1lT25seSA9IHRoaXMub3B0aW9ucy5uYW1lT25seTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgY21kLmZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYXV0aG9yaXplZERhdGFiYXNlcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjbWQuYXV0aG9yaXplZERhdGFiYXNlcyA9IHRoaXMub3B0aW9ucy5hdXRob3JpemVkRGF0YWJhc2VzO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikgPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0RGF0YWJhc2VzT3BlcmF0aW9uID0gTGlzdERhdGFiYXNlc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0RGF0YWJhc2VzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2RhdGFiYXNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/operation.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/operation.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects;\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcseUJBQXlCLEdBQUcsY0FBYztBQUNsRSxlQUFlLG1CQUFPLENBQUMseURBQVM7QUFDaEMsMEJBQTBCLG1CQUFPLENBQUMsK0VBQW9CO0FBQ3RELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3BlcmF0aW9uLmpzPzZkYzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmluZUFzcGVjdHMgPSBleHBvcnRzLkFic3RyYWN0T3BlcmF0aW9uID0gZXhwb3J0cy5Bc3BlY3QgPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vYnNvblwiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmV4cG9ydHMuQXNwZWN0ID0ge1xuICAgIFJFQURfT1BFUkFUSU9OOiBTeW1ib2woJ1JFQURfT1BFUkFUSU9OJyksXG4gICAgV1JJVEVfT1BFUkFUSU9OOiBTeW1ib2woJ1dSSVRFX09QRVJBVElPTicpLFxuICAgIFJFVFJZQUJMRTogU3ltYm9sKCdSRVRSWUFCTEUnKSxcbiAgICBFWFBMQUlOQUJMRTogU3ltYm9sKCdFWFBMQUlOQUJMRScpLFxuICAgIFNLSVBfQ09MTEFUSU9OOiBTeW1ib2woJ1NLSVBfQ09MTEFUSU9OJyksXG4gICAgQ1VSU09SX0NSRUFUSU5HOiBTeW1ib2woJ0NVUlNPUl9DUkVBVElORycpLFxuICAgIE1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSOiBTeW1ib2woJ01VU1RfU0VMRUNUX1NBTUVfU0VSVkVSJylcbn07XG4vKiogQGludGVybmFsICovXG5jb25zdCBrU2Vzc2lvbiA9IFN5bWJvbCgnc2Vzc2lvbicpO1xuLyoqXG4gKiBUaGlzIGNsYXNzIGFjdHMgYXMgYSBwYXJlbnQgY2xhc3MgZm9yIGFueSBvcGVyYXRpb24gYW5kIGlzIHJlc3BvbnNpYmxlIGZvciBzZXR0aW5nIHRoaXMub3B0aW9ucyxcbiAqIGFzIHdlbGwgYXMgc2V0dGluZyBhbmQgZ2V0dGluZyBhIHNlc3Npb24uXG4gKiBBZGRpdGlvbmFsbHksIHRoaXMgY2xhc3MgaW1wbGVtZW50cyBgaGFzQXNwZWN0YCwgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIGFuIG9wZXJhdGlvbiBoYXNcbiAqIGEgc3BlY2lmaWMgYXNwZWN0LlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5yZWFkUHJlZmVyZW5jZSA9IHRoaXMuaGFzQXNwZWN0KGV4cG9ydHMuQXNwZWN0LldSSVRFX09QRVJBVElPTilcbiAgICAgICAgICAgID8gcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeVxuICAgICAgICAgICAgOiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5mcm9tT3B0aW9ucyhvcHRpb25zKSA/PyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5O1xuICAgICAgICAvLyBQdWxsIHRoZSBCU09OIHNlcmlhbGl6ZSBvcHRpb25zIGZyb20gdGhlIGFscmVhZHktcmVzb2x2ZWQgb3B0aW9uc1xuICAgICAgICB0aGlzLmJzb25PcHRpb25zID0gKDAsIGJzb25fMS5yZXNvbHZlQlNPTk9wdGlvbnMpKG9wdGlvbnMpO1xuICAgICAgICB0aGlzW2tTZXNzaW9uXSA9IG9wdGlvbnMuc2Vzc2lvbiAhPSBudWxsID8gb3B0aW9ucy5zZXNzaW9uIDogdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmJ5cGFzc1Bpbm5pbmdDaGVjayA9ICEhb3B0aW9ucy5ieXBhc3NQaW5uaW5nQ2hlY2s7XG4gICAgICAgIHRoaXMudHJ5U2Vjb25kYXJ5V3JpdGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaGFzQXNwZWN0KGFzcGVjdCkge1xuICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGN0b3IuYXNwZWN0cyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN0b3IuYXNwZWN0cy5oYXMoYXNwZWN0KTtcbiAgICB9XG4gICAgZ2V0IHNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tTZXNzaW9uXTtcbiAgICB9XG4gICAgY2xlYXJTZXNzaW9uKCkge1xuICAgICAgICB0aGlzW2tTZXNzaW9uXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5UmVhZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLkFic3RyYWN0T3BlcmF0aW9uID0gQWJzdHJhY3RPcGVyYXRpb247XG5mdW5jdGlvbiBkZWZpbmVBc3BlY3RzKG9wZXJhdGlvbiwgYXNwZWN0cykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhc3BlY3RzKSAmJiAhKGFzcGVjdHMgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICAgIGFzcGVjdHMgPSBbYXNwZWN0c107XG4gICAgfVxuICAgIGFzcGVjdHMgPSBuZXcgU2V0KGFzcGVjdHMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sICdhc3BlY3RzJywge1xuICAgICAgICB2YWx1ZTogYXNwZWN0cyxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuIGFzcGVjdHM7XG59XG5leHBvcnRzLmRlZmluZUFzcGVjdHMgPSBkZWZpbmVBc3BlY3RzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/options_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/options_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OptionsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    get commandName() {\n        return 'listCollections';\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation;\n//# sourceMappingURL=options_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcHRpb25zX29wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkJBQTJCLElBQUksZ0ZBQWdGO0FBQzlJO0FBQ0E7QUFDQSwwREFBMEQsZ0JBQWdCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcHRpb25zX29wZXJhdGlvbi5qcz83YjAwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcHRpb25zT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgT3B0aW9uc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnbGlzdENvbGxlY3Rpb25zJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3QgW2NvbGxlY3Rpb25dID0gYXdhaXQgY29sbC5zLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHsgbmFtZTogY29sbC5jb2xsZWN0aW9uTmFtZSB9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IGZhbHNlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCB8fCBjb2xsZWN0aW9uLm9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcihgY29sbGVjdGlvbiAke2NvbGwubmFtZXNwYWNlfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5vcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuT3B0aW9uc09wZXJhdGlvbiA9IE9wdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcHRpb25zX29wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/profiling_level.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session) {\n        const doc = await super.executeCommand(server, session, { profile: -1 });\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0)\n                return 'off';\n            if (was === 1)\n                return 'slow_only';\n            if (was === 2)\n                return 'all';\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        }\n        else {\n            throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;\n//# sourceMappingURL=profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGFBQWE7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtHQUFrRyxJQUFJO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcHJvZmlsaW5nX2xldmVsLmpzPzNhZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdwcm9maWxlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZG9jID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB7IHByb2ZpbGU6IC0xIH0pO1xuICAgICAgICBpZiAoZG9jLm9rID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCB3YXMgPSBkb2Mud2FzO1xuICAgICAgICAgICAgaWYgKHdhcyA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gJ29mZic7XG4gICAgICAgICAgICBpZiAod2FzID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiAnc2xvd19vbmx5JztcbiAgICAgICAgICAgIGlmICh3YXMgPT09IDIpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdhbGwnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSWxsZWdhbCBwcm9maWxpbmcgbGV2ZWwgdmFsdWUgJHt3YXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKCdFcnJvciB3aXRoIHByb2ZpbGUgY29tbWFuZCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZmlsaW5nX2xldmVsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/remove_user.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/remove_user.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoveUserOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options) {\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    get commandName() {\n        return 'dropUser';\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropUser: this.username });\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=remove_user.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW1vdmVfdXNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0Isa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUI7QUFDL0U7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbW92ZV91c2VyLmpzP2RiOGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbW92ZVVzZXJPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBSZW1vdmVVc2VyT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCB1c2VybmFtZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3BVc2VyJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB7IGRyb3BVc2VyOiB0aGlzLnVzZXJuYW1lIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLlJlbW92ZVVzZXJPcGVyYXRpb24gPSBSZW1vdmVVc2VyT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKFJlbW92ZVVzZXJPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmVfdXNlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/rename.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/rename.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RenameOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options) {\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'renameCollection';\n    }\n    async execute(server, session) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW5hbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLHFCQUFxQixtQkFBTyxDQUFDLHFFQUFlO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHlFQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDZFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVuYW1lLmpzPzUxNTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbmFtZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJlbmFtZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBuZXdOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5ld05hbWUgPSBuZXdOYW1lO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbmV3IHV0aWxzXzEuTW9uZ29EQk5hbWVzcGFjZSgnYWRtaW4nLCAnJGNtZCcpO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAncmVuYW1lQ29sbGVjdGlvbic7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIC8vIEJ1aWxkIHRoZSBjb21tYW5kXG4gICAgICAgIGNvbnN0IHJlbmFtZUNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ubmFtZXNwYWNlO1xuICAgICAgICBjb25zdCB0b0NvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24odGhpcy5uZXdOYW1lKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBkcm9wVGFyZ2V0ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5kcm9wVGFyZ2V0ID09PSAnYm9vbGVhbicgPyB0aGlzLm9wdGlvbnMuZHJvcFRhcmdldCA6IGZhbHNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgcmVuYW1lQ29sbGVjdGlvbjogcmVuYW1lQ29sbGVjdGlvbixcbiAgICAgICAgICAgIHRvOiB0b0NvbGxlY3Rpb24sXG4gICAgICAgICAgICBkcm9wVGFyZ2V0OiBkcm9wVGFyZ2V0XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgICAgIHJldHVybiBuZXcgY29sbGVjdGlvbl8xLkNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uLnMuZGIsIHRoaXMubmV3TmFtZSwgdGhpcy5jb2xsZWN0aW9uLnMub3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5SZW5hbWVPcGVyYXRpb24gPSBSZW5hbWVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVuYW1lT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuYW1lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/rename.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/run_command.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/run_command.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection('$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    get commandName() {\n        return 'runCommand';\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.command(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;\n//# sourceMappingURL=run_command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9ydW5fY29tbWFuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRywyQkFBMkI7QUFDOUQsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVU7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3J1bl9jb21tYW5kLmpzPzIxMDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiA9IGV4cG9ydHMuUnVuQ29tbWFuZE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJ1bkNvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gcGFyZW50LnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKCckY21kJyk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdydW5Db21tYW5kJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIHJldHVybiBzZXJ2ZXIuY29tbWFuZCh0aGlzLm5zLCB0aGlzLmNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlJ1bkNvbW1hbmRPcGVyYXRpb24gPSBSdW5Db21tYW5kT3BlcmF0aW9uO1xuY2xhc3MgUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IGNvbW1hbmQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdydW5Db21tYW5kJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIHJldHVybiBzZXJ2ZXIuY29tbWFuZCh0aGlzLm5zLCB0aGlzLmNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiA9IFJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bl9jb21tYW5kLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/run_command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/create.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions) {\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    get commandName() {\n        return 'createSearchIndexes';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.command(namespace, command, { session });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name }) => name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;\n//# sourceMappingURL=create.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9jcmVhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DO0FBQ3BDLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELFNBQVM7QUFDeEU7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9jcmVhdGUuanM/MWY4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZGVzY3JpcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25zO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnY3JlYXRlU2VhcmNoSW5kZXhlcyc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29sbGVjdGlvbi5mdWxsTmFtZXNwYWNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgY3JlYXRlU2VhcmNoSW5kZXhlczogbmFtZXNwYWNlLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBpbmRleGVzOiB0aGlzLmRlc2NyaXB0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzZXJ2ZXIuY29tbWFuZChuYW1lc3BhY2UsIGNvbW1hbmQsIHsgc2Vzc2lvbiB9KTtcbiAgICAgICAgY29uc3QgaW5kZXhlc0NyZWF0ZWQgPSByZXM/LmluZGV4ZXNDcmVhdGVkID8/IFtdO1xuICAgICAgICByZXR1cm4gaW5kZXhlc0NyZWF0ZWQubWFwKCh7IG5hbWUgfSkgPT4gbmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uID0gQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/drop.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name) {\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    get commandName() {\n        return 'dropSearchIndex';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === 'string') {\n            command.name = this.name;\n        }\n        try {\n            await server.command(namespace, command, { session });\n        }\n        catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9kcm9wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBYTtBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyw4RUFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxTQUFTO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvZHJvcC5qcz8yNTkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ecm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRHJvcFNlYXJjaEluZGV4T3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2Ryb3BTZWFyY2hJbmRleCc7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29sbGVjdGlvbi5mdWxsTmFtZXNwYWNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgZHJvcFNlYXJjaEluZGV4OiBuYW1lc3BhY2UuY29sbGVjdGlvblxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMubmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbW1hbmQubmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc2VydmVyLmNvbW1hbmQobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBpc05hbWVzcGFjZU5vdEZvdW5kRXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvciAmJiBlcnJvci5jb2RlID09PSBlcnJvcl8xLk1PTkdPREJfRVJST1JfQ09ERVMuTmFtZXNwYWNlTm90Rm91bmQ7XG4gICAgICAgICAgICBpZiAoIWlzTmFtZXNwYWNlTm90Rm91bmRFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gPSBEcm9wU2VhcmNoSW5kZXhPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/update.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition) {\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    get commandName() {\n        return 'updateSearchIndex';\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.command(namespace, command, { session });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation;\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy91cGRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxTQUFTO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvdXBkYXRlLmpzPzdlZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmFtZSwgZGVmaW5pdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBkZWZpbml0aW9uO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAndXBkYXRlU2VhcmNoSW5kZXgnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHVwZGF0ZVNlYXJjaEluZGV4OiBuYW1lc3BhY2UuY29sbGVjdGlvbixcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIGRlZmluaXRpb246IHRoaXMuZGVmaW5pdGlvblxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBzZXJ2ZXIuY29tbWFuZChuYW1lc3BhY2UsIGNvbW1hbmQsIHsgc2Vzc2lvbiB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cbmV4cG9ydHMuVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb24gPSBVcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVwZGF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/set_profiling_level.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n    off: 'off',\n    slowOnly: 'slow_only',\n    all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options) {\n        super(db, options);\n        this.options = options;\n        switch (level) {\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    get commandName() {\n        return 'profile';\n    }\n    async execute(server, session) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, { profile: this.profile });\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;\n//# sourceMappingURL=set_profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZXRfcHJvZmlsaW5nX2xldmVsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQyxHQUFHLHNCQUFzQjtBQUMzRCxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQztBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRkFBMkYsa0RBQWtEO0FBQzdJO0FBQ0E7QUFDQSxzREFBc0QsdUJBQXVCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2V0X3Byb2ZpbGluZ19sZXZlbC5qcz83ZTVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBsZXZlbFZhbHVlcyA9IG5ldyBTZXQoWydvZmYnLCAnc2xvd19vbmx5JywgJ2FsbCddKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLlByb2ZpbGluZ0xldmVsID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgb2ZmOiAnb2ZmJyxcbiAgICBzbG93T25seTogJ3Nsb3dfb25seScsXG4gICAgYWxsOiAnYWxsJ1xufSk7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBTZXRQcm9maWxpbmdMZXZlbE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgbGV2ZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwub2ZmOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwuc2xvd09ubHk6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5hbGw6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgfVxuICAgIGdldCBjb21tYW5kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdwcm9maWxlJztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSB0aGlzLmxldmVsO1xuICAgICAgICBpZiAoIWxldmVsVmFsdWVzLmhhcyhsZXZlbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYFByb2ZpbGluZyBsZXZlbCBtdXN0IGJlIG9uZSBvZiBcIiR7KDAsIHV0aWxzXzEuZW51bVRvU3RyaW5nKShleHBvcnRzLlByb2ZpbGluZ0xldmVsKX1cImApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8oTk9ERS0zNDgzKTogRGV0ZXJtaW5lIGVycm9yIHRvIHB1dCBoZXJlXG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBwcm9maWxlOiB0aGlzLnByb2ZpbGUgfSk7XG4gICAgICAgIHJldHVybiBsZXZlbDtcbiAgICB9XG59XG5leHBvcnRzLlNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRfcHJvZmlsaW5nX2xldmVsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/stats.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/stats.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DbStatsOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    get commandName() {\n        return 'dbStats';\n    }\n    async execute(server, session) {\n        const command = { dbStats: true };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zdGF0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsa0JBQWtCLG1CQUFPLENBQUMseUVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsNkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3N0YXRzLmpzPzNjMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRiU3RhdHNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEYlN0YXRzT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IGNvbW1hbmROYW1lKCkge1xuICAgICAgICByZXR1cm4gJ2RiU3RhdHMnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb21tYW5kID0geyBkYlN0YXRzOiB0cnVlIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29tbWFuZC5zY2FsZSA9IHRoaXMub3B0aW9ucy5zY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkRiU3RhdHNPcGVyYXRpb24gPSBEYlN0YXRzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERiU3RhdHNPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/stats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/update.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/update.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get commandName() {\n        return 'update';\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => op.multi == null || op.multi === false);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: false })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: true })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options, multi: false })], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n    }\n    if (update == null || typeof update !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n    }\n    const op = { q: filter, u: update };\n    if (typeof options.upsert === 'boolean') {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/validate_collection.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options) {\n        // Decorate command with extra options\n        const command = { validate: collectionName };\n        const keys = Object.keys(options);\n        for (let i = 0; i < keys.length; i++) {\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    get commandName() {\n        return 'validate';\n    }\n    async execute(server, session) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command);\n        if (doc.result != null && typeof doc.result !== 'string')\n            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation;\n//# sourceMappingURL=validate_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLGVBQWU7QUFDdEc7QUFDQSx1RkFBdUYsZUFBZTtBQUN0RztBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3ZhbGlkYXRlX2NvbGxlY3Rpb24uanM/MmQ1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoYWRtaW4sIGNvbGxlY3Rpb25OYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIERlY29yYXRlIGNvbW1hbmQgd2l0aCBleHRyYSBvcHRpb25zXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IHZhbGlkYXRlOiBjb2xsZWN0aW9uTmFtZSB9O1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBrZXlzW2ldKSAmJiBrZXlzW2ldICE9PSAnc2Vzc2lvbicpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kW2tleXNbaV1dID0gb3B0aW9uc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlcihhZG1pbi5zLmRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb25OYW1lO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZE5hbWUoKSB7XG4gICAgICAgIHJldHVybiAndmFsaWRhdGUnO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IHRoaXMuY29sbGVjdGlvbk5hbWU7XG4gICAgICAgIGNvbnN0IGRvYyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgdGhpcy5jb21tYW5kKTtcbiAgICAgICAgaWYgKGRvYy5yZXN1bHQgIT0gbnVsbCAmJiB0eXBlb2YgZG9jLnJlc3VsdCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKCdFcnJvciB3aXRoIHZhbGlkYXRpb24gZGF0YScpO1xuICAgICAgICBpZiAoZG9jLnJlc3VsdCAhPSBudWxsICYmIGRvYy5yZXN1bHQubWF0Y2goL2V4Y2VwdGlvbnxjb3JydXB0LykgIT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoYEludmFsaWQgY29sbGVjdGlvbiAke2NvbGxlY3Rpb25OYW1lfWApO1xuICAgICAgICBpZiAoZG9jLnZhbGlkICE9IG51bGwgJiYgIWRvYy52YWxpZClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoYEludmFsaWQgY29sbGVjdGlvbiAke2NvbGxlY3Rpb25OYW1lfWApO1xuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gVmFsaWRhdGVDb2xsZWN0aW9uT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVfY29sbGVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_concern.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/read_concern.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvcmVhZF9jb25jZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHdCQUF3QjtBQUM5QztBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3JlYWRfY29uY2Vybi5qcz8wYWUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWFkQ29uY2VybiA9IGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbCA9IHZvaWQgMDtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBsb2NhbDogJ2xvY2FsJyxcbiAgICBtYWpvcml0eTogJ21ham9yaXR5JyxcbiAgICBsaW5lYXJpemFibGU6ICdsaW5lYXJpemFibGUnLFxuICAgIGF2YWlsYWJsZTogJ2F2YWlsYWJsZScsXG4gICAgc25hcHNob3Q6ICdzbmFwc2hvdCdcbn0pO1xuLyoqXG4gKiBUaGUgTW9uZ29EQiBSZWFkQ29uY2Vybiwgd2hpY2ggYWxsb3dzIGZvciBjb250cm9sIG9mIHRoZSBjb25zaXN0ZW5jeSBhbmQgaXNvbGF0aW9uIHByb3BlcnRpZXNcbiAqIG9mIHRoZSBkYXRhIHJlYWQgZnJvbSByZXBsaWNhIHNldHMgYW5kIHJlcGxpY2Egc2V0IHNoYXJkcy5cbiAqIEBwdWJsaWNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9yZWFkLWNvbmNlcm4vaW5kZXguaHRtbFxuICovXG5jbGFzcyBSZWFkQ29uY2VybiB7XG4gICAgLyoqIENvbnN0cnVjdHMgYSBSZWFkQ29uY2VybiBmcm9tIHRoZSByZWFkIGNvbmNlcm4gbGV2ZWwuKi9cbiAgICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzcGVjIHRlc3QgZXhpc3RzIHRoYXQgYWxsb3dzIGxldmVsIHRvIGJlIGFueSBzdHJpbmcuXG4gICAgICAgICAqIFwiaW52YWxpZCByZWFkQ29uY2VybiB3aXRoIG91dCBzdGFnZVwiXG4gICAgICAgICAqIEBzZWUgLi90ZXN0L3NwZWMvY3J1ZC92Mi9hZ2dyZWdhdGUtb3V0LXJlYWRDb25jZXJuLmpzb25cbiAgICAgICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9uZ29kYi9zcGVjaWZpY2F0aW9ucy9ibG9iL21hc3Rlci9zb3VyY2UvcmVhZC13cml0ZS1jb25jZXJuL3JlYWQtd3JpdGUtY29uY2Vybi5yc3QjdW5rbm93bi1sZXZlbHMtYW5kLWFkZGl0aW9uYWwtb3B0aW9ucy1mb3Itc3RyaW5nLWJhc2VkLXJlYWRjb25jZXJuc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZXZlbCA9IGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbFtsZXZlbF0gPz8gbGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIFJlYWRDb25jZXJuIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSB3cml0ZSBjb25jZXJuLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5yZWFkQ29uY2Vybikge1xuICAgICAgICAgICAgY29uc3QgeyByZWFkQ29uY2VybiB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGlmIChyZWFkQ29uY2VybiBpbnN0YW5jZW9mIFJlYWRDb25jZXJuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRDb25jZXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJlYWRDb25jZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ocmVhZENvbmNlcm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ2xldmVsJyBpbiByZWFkQ29uY2VybiAmJiByZWFkQ29uY2Vybi5sZXZlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ocmVhZENvbmNlcm4ubGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxldmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRDb25jZXJuKG9wdGlvbnMubGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBNQUpPUklUWSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5tYWpvcml0eTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBBVkFJTEFCTEUoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwuYXZhaWxhYmxlO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IExJTkVBUklaQUJMRSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5saW5lYXJpemFibGU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgU05BUFNIT1QoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwuc25hcHNob3Q7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHsgbGV2ZWw6IHRoaXMubGV2ZWwgfTtcbiAgICB9XG59XG5leHBvcnRzLlJlYWRDb25jZXJuID0gUmVhZENvbmNlcm47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFkX2NvbmNlcm4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_preference.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/read_preference.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;\n//# sourceMappingURL=read_preference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_preference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime;\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsdUJBQXVCLEdBQUcsa0JBQWtCLEdBQUcsb0JBQW9CLEdBQUcsdUJBQXVCLEdBQUcsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcscUJBQXFCO0FBQ3JNLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDO0FBQ0EscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQix3QkFBd0I7QUFDeEIsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL2NvbW1vbi5qcz85Yzc1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5fYWR2YW5jZUNsdXN0ZXJUaW1lID0gZXhwb3J0cy5kcmFpblRpbWVyUXVldWUgPSBleHBvcnRzLlNlcnZlclR5cGUgPSBleHBvcnRzLlRvcG9sb2d5VHlwZSA9IGV4cG9ydHMuU1RBVEVfQ09OTkVDVEVEID0gZXhwb3J0cy5TVEFURV9DT05ORUNUSU5HID0gZXhwb3J0cy5TVEFURV9DTE9TRUQgPSBleHBvcnRzLlNUQVRFX0NMT1NJTkcgPSB2b2lkIDA7XG5jb25zdCB0aW1lcnNfMSA9IHJlcXVpcmUoXCJ0aW1lcnNcIik7XG4vLyBzaGFyZWQgc3RhdGUgbmFtZXNcbmV4cG9ydHMuU1RBVEVfQ0xPU0lORyA9ICdjbG9zaW5nJztcbmV4cG9ydHMuU1RBVEVfQ0xPU0VEID0gJ2Nsb3NlZCc7XG5leHBvcnRzLlNUQVRFX0NPTk5FQ1RJTkcgPSAnY29ubmVjdGluZyc7XG5leHBvcnRzLlNUQVRFX0NPTk5FQ1RFRCA9ICdjb25uZWN0ZWQnO1xuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB0b3BvbG9neSB0eXBlcyB3ZSBrbm93IGFib3V0XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuVG9wb2xvZ3lUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU2luZ2xlOiAnU2luZ2xlJyxcbiAgICBSZXBsaWNhU2V0Tm9QcmltYXJ5OiAnUmVwbGljYVNldE5vUHJpbWFyeScsXG4gICAgUmVwbGljYVNldFdpdGhQcmltYXJ5OiAnUmVwbGljYVNldFdpdGhQcmltYXJ5JyxcbiAgICBTaGFyZGVkOiAnU2hhcmRlZCcsXG4gICAgVW5rbm93bjogJ1Vua25vd24nLFxuICAgIExvYWRCYWxhbmNlZDogJ0xvYWRCYWxhbmNlZCdcbn0pO1xuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiBzZXJ2ZXIgdHlwZXMgd2Uga25vdyBhYm91dFxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlNlcnZlclR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTdGFuZGFsb25lOiAnU3RhbmRhbG9uZScsXG4gICAgTW9uZ29zOiAnTW9uZ29zJyxcbiAgICBQb3NzaWJsZVByaW1hcnk6ICdQb3NzaWJsZVByaW1hcnknLFxuICAgIFJTUHJpbWFyeTogJ1JTUHJpbWFyeScsXG4gICAgUlNTZWNvbmRhcnk6ICdSU1NlY29uZGFyeScsXG4gICAgUlNBcmJpdGVyOiAnUlNBcmJpdGVyJyxcbiAgICBSU090aGVyOiAnUlNPdGhlcicsXG4gICAgUlNHaG9zdDogJ1JTR2hvc3QnLFxuICAgIFVua25vd246ICdVbmtub3duJyxcbiAgICBMb2FkQmFsYW5jZXI6ICdMb2FkQmFsYW5jZXInXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGRyYWluVGltZXJRdWV1ZShxdWV1ZSkge1xuICAgIHF1ZXVlLmZvckVhY2godGltZXJzXzEuY2xlYXJUaW1lb3V0KTtcbiAgICBxdWV1ZS5jbGVhcigpO1xufVxuZXhwb3J0cy5kcmFpblRpbWVyUXVldWUgPSBkcmFpblRpbWVyUXVldWU7XG4vKiogU2hhcmVkIGZ1bmN0aW9uIHRvIGRldGVybWluZSBjbHVzdGVyVGltZSBmb3IgYSBnaXZlbiB0b3BvbG9neSBvciBzZXNzaW9uICovXG5mdW5jdGlvbiBfYWR2YW5jZUNsdXN0ZXJUaW1lKGVudGl0eSwgJGNsdXN0ZXJUaW1lKSB7XG4gICAgaWYgKGVudGl0eS5jbHVzdGVyVGltZSA9PSBudWxsKSB7XG4gICAgICAgIGVudGl0eS5jbHVzdGVyVGltZSA9ICRjbHVzdGVyVGltZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICgkY2x1c3RlclRpbWUuY2x1c3RlclRpbWUuZ3JlYXRlclRoYW4oZW50aXR5LmNsdXN0ZXJUaW1lLmNsdXN0ZXJUaW1lKSkge1xuICAgICAgICAgICAgZW50aXR5LmNsdXN0ZXJUaW1lID0gJGNsdXN0ZXJUaW1lO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5fYWR2YW5jZUNsdXN0ZXJUaW1lID0gX2FkdmFuY2VDbHVzdGVyVGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/events.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/events.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_OPENING;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        /** @internal */\n        this.name = constants_1.SERVER_CLOSED;\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_OPENING;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        /** @internal */\n        this.name = constants_1.TOPOLOGY_CLOSED;\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_STARTED;\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure, awaited) {\n        /** @internal */\n        this.name = constants_1.SERVER_HEARTBEAT_FAILED;\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcscUNBQXFDLEdBQUcsbUNBQW1DLEdBQUcsMkJBQTJCLEdBQUcsNEJBQTRCLEdBQUcsdUNBQXVDLEdBQUcseUJBQXlCLEdBQUcsMEJBQTBCLEdBQUcscUNBQXFDO0FBQ3hULG9CQUFvQixtQkFBTyxDQUFDLG1FQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9ldmVudHMuanM/YzhjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VydmVySGVhcnRiZWF0RmFpbGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRTdGFydGVkRXZlbnQgPSBleHBvcnRzLlRvcG9sb2d5Q2xvc2VkRXZlbnQgPSBleHBvcnRzLlRvcG9sb2d5T3BlbmluZ0V2ZW50ID0gZXhwb3J0cy5Ub3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJDbG9zZWRFdmVudCA9IGV4cG9ydHMuU2VydmVyT3BlbmluZ0V2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHNlcnZlciBkZXNjcmlwdGlvbiBjaGFuZ2VzLCBidXQgZG9lcyBOT1QgaW5jbHVkZSBjaGFuZ2VzIHRvIHRoZSBSVFQuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkLCBhZGRyZXNzLCBwcmV2aW91c0Rlc2NyaXB0aW9uLCBuZXdEZXNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfREVTQ1JJUFRJT05fQ0hBTkdFRDtcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgdGhpcy5wcmV2aW91c0Rlc2NyaXB0aW9uID0gcHJldmlvdXNEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5uZXdEZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSBTZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHNlcnZlciBpcyBpbml0aWFsaXplZC5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJPcGVuaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkLCBhZGRyZXNzKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuU0VSVkVSX09QRU5JTkc7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJPcGVuaW5nRXZlbnQgPSBTZXJ2ZXJPcGVuaW5nRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBzZXJ2ZXIgaXMgY2xvc2VkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckNsb3NlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgYWRkcmVzcykge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9DTE9TRUQ7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJDbG9zZWRFdmVudCA9IFNlcnZlckNsb3NlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdG9wb2xvZ3kgZGVzY3JpcHRpb24gY2hhbmdlcy5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBUb3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgcHJldmlvdXNEZXNjcmlwdGlvbiwgbmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VEO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgICAgICB0aGlzLnByZXZpb3VzRGVzY3JpcHRpb24gPSBwcmV2aW91c0Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLm5ld0Rlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgfVxufVxuZXhwb3J0cy5Ub3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50ID0gVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRvcG9sb2d5IGlzIGluaXRpYWxpemVkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFRvcG9sb2d5T3BlbmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlRPUE9MT0dZX09QRU5JTkc7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ub3BvbG9neU9wZW5pbmdFdmVudCA9IFRvcG9sb2d5T3BlbmluZ0V2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdG9wb2xvZ3kgaXMgY2xvc2VkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFRvcG9sb2d5Q2xvc2VkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuVE9QT0xPR1lfQ0xPU0VEO1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9wb2xvZ3lDbG9zZWRFdmVudCA9IFRvcG9sb2d5Q2xvc2VkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgc2VydmVyIG1vbml0b3LigJlzIGhlbGxvIGNvbW1hbmQgaXMgc3RhcnRlZCAtIGltbWVkaWF0ZWx5IGJlZm9yZVxuICogdGhlIGhlbGxvIGNvbW1hbmQgaXMgc2VyaWFsaXplZCBpbnRvIHJhdyBCU09OIGFuZCB3cml0dGVuIHRvIHRoZSBzb2NrZXQuXG4gKlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckhlYXJ0YmVhdFN0YXJ0ZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgYXdhaXRlZCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLlNFUlZFUl9IRUFSVEJFQVRfU1RBUlRFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuYXdhaXRlZCA9IGF3YWl0ZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRTdGFydGVkRXZlbnQgPSBTZXJ2ZXJIZWFydGJlYXRTdGFydGVkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgc2VydmVyIG1vbml0b3LigJlzIGhlbGxvIHN1Y2NlZWRzLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkLCBkdXJhdGlvbiwgcmVwbHksIGF3YWl0ZWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfSEVBUlRCRUFUX1NVQ0NFRURFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5yZXBseSA9IHJlcGx5ID8/IHt9O1xuICAgICAgICB0aGlzLmF3YWl0ZWQgPSBhd2FpdGVkO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVySGVhcnRiZWF0U3VjY2VlZGVkRXZlbnQgPSBTZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSBzZXJ2ZXIgbW9uaXRvcuKAmXMgaGVsbG8gZmFpbHMsIGVpdGhlciB3aXRoIGFuIOKAnG9rOiAw4oCdIG9yIGEgc29ja2V0IGV4Y2VwdGlvbi5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJIZWFydGJlYXRGYWlsZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgZHVyYXRpb24sIGZhaWx1cmUsIGF3YWl0ZWQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfSEVBUlRCRUFUX0ZBSUxFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uSWQ7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5mYWlsdXJlID0gZmFpbHVyZTtcbiAgICAgICAgdGhpcy5hd2FpdGVkID0gYXdhaXRlZDtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckhlYXJ0YmVhdEZhaWxlZEV2ZW50ID0gU2VydmVySGVhcnRiZWF0RmFpbGVkRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/monitor.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/monitor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst connect_1 = __webpack_require__(/*! ../cmap/connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst client_metadata_1 = __webpack_require__(/*! ../cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n    auto: 'auto',\n    poll: 'poll',\n    stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        /** @internal */\n        this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n        this[kServer] = server;\n        this.connection = null;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = {\n            id: '<monitor>',\n            generation: server.pool.generation,\n            cancellationToken,\n            hostAddress: server.description.hostAddress,\n            ...options,\n            // force BSON serialization options\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        };\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this[kMonitorId]?.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor[kMonitorId]?.stop();\n    monitor[kMonitorId] = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor[kCancellationToken].emit('cancel');\n    monitor.connection?.destroy({ force: true });\n    monitor.connection = null;\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null)\n        return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll)\n        return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream)\n        return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv)\n        return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start;\n    let awaited;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function onHeartbeatFailed(err) {\n        monitor.connection?.destroy({ force: true });\n        monitor.connection = null;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError)\n            ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), { cause: err })\n            : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit('resetServer', error);\n        callback(err);\n    }\n    function onHeartbeatSucceeded(hello) {\n        if (!('isWritablePrimary' in hello)) {\n            // Provide hello-style response document.\n            hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n        }\n        const duration = isAwaitable && monitor.rttPinger\n            ? monitor.rttPinger.roundTripTime\n            : (0, utils_1.calculateDurationInMs)(start);\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n        if (isAwaitable) {\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n            // We have not actually sent an outgoing handshake, but when we get the next response we\n            // want the duration to reflect the time since we last heard from the server\n            start = (0, utils_1.now)();\n        }\n        else {\n            monitor.rttPinger?.close();\n            monitor.rttPinger = undefined;\n            callback(undefined, hello);\n        }\n    }\n    const { connection } = monitor;\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor[kCancellationToken], Object.assign({ heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS }, monitor.connectOptions));\n        }\n        // Record new start time before sending handshake\n        start = (0, utils_1.now)();\n        if (isAwaitable) {\n            awaited = true;\n            return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello) => {\n                if (error)\n                    return onHeartbeatFailed(error);\n                return onHeartbeatSucceeded(hello);\n            });\n        }\n        awaited = false;\n        connection\n            .command((0, utils_1.ns)('admin.$cmd'), cmd, options)\n            .then(onHeartbeatSucceeded, onHeartbeatFailed);\n        return;\n    }\n    // connecting does an implicit `hello`\n    (async () => {\n        const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n        const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n        // The start time is after socket creation but before the handshake\n        start = (0, utils_1.now)();\n        try {\n            await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n            return connection;\n        }\n        catch (error) {\n            connection.destroy({ force: false });\n            throw error;\n        }\n    })().then(connection => {\n        if (isInCloseState(monitor)) {\n            connection.destroy({ force: true });\n            return;\n        }\n        monitor.connection = connection;\n        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n        callback(undefined, connection.hello);\n    }, error => {\n        monitor.connection = null;\n        awaited = false;\n        onHeartbeatFailed(error);\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(() => {\n                    if (!isInCloseState(monitor)) {\n                        monitor[kMonitorId]?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(cancellationToken, options) {\n        this.connection = undefined;\n        this[kCancellationToken] = cancellationToken;\n        this[kRoundTripTime] = 0;\n        this.closed = false;\n        const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n        this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this[kRoundTripTime];\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this[kMonitorId]);\n        this.connection?.destroy({ force: true });\n        this.connection = undefined;\n    }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n    const start = (0, utils_1.now)();\n    options.cancellationToken = rttPinger[kCancellationToken];\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    if (rttPinger.closed) {\n        return;\n    }\n    function measureAndReschedule(conn) {\n        if (rttPinger.closed) {\n            conn?.destroy({ force: true });\n            return;\n        }\n        if (rttPinger.connection == null) {\n            rttPinger.connection = conn;\n        }\n        rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n        rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n    }\n    const connection = rttPinger.connection;\n    if (connection == null) {\n        (0, connect_1.connect)(options).then(connection => {\n            measureAndReschedule(connection);\n        }, () => {\n            rttPinger.connection = undefined;\n            rttPinger[kRoundTripTime] = 0;\n        });\n        return;\n    }\n    const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n    connection.command((0, utils_1.ns)('admin.$cmd'), { [commandName]: 1 }, undefined).then(() => measureAndReschedule(), () => {\n        rttPinger.connection?.destroy({ force: true });\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n    });\n}\n/**\n * @internal\n */\nclass MonitorInterval {\n    constructor(fn, options = {}) {\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = () => {\n            if (this.stopped)\n                return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(() => {\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        }\n        else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? 'set' : 'cleared',\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped)\n            return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval;\n//# sourceMappingURL=monitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Server = void 0;\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_1 = __webpack_require__(/*! ../cmap/connection_pool */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\");\nconst errors_1 = __webpack_require__(/*! ../cmap/errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst transactions_1 = __webpack_require__(/*! ../transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst monitor_1 = __webpack_require__(/*! ./monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            this.monitor.on(event, (e) => this.emit(event, e));\n        }\n        this.monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy(options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = { force: false };\n        }\n        options = Object.assign({}, { force: false }, options);\n        if (this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close(options, err => {\n            stateTransition(this, common_1.STATE_CLOSED);\n            this.emit('closed');\n            if (typeof callback === 'function') {\n                callback(err);\n            }\n        });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */\n    async command(ns, cmd, options) {\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            throw new error_1.MongoServerClosedError();\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        const session = finalOptions.session;\n        let conn = session?.pinnedConnection;\n        this.incrementOperationCount();\n        if (conn == null) {\n            try {\n                conn = await this.pool.checkOut();\n                if (this.loadBalanced && isPinnableCommand(cmd, session)) {\n                    session?.pin(conn);\n                }\n            }\n            catch (checkoutError) {\n                this.decrementOperationCount();\n                if (!(checkoutError instanceof errors_1.PoolClearedError))\n                    this.handleError(checkoutError);\n                throw checkoutError;\n            }\n        }\n        try {\n            try {\n                return await conn.command(ns, cmd, finalOptions);\n            }\n            catch (commandError) {\n                throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n            }\n        }\n        catch (operationError) {\n            if (operationError instanceof error_1.MongoError &&\n                operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                await this.pool.reauthenticate(conn);\n                try {\n                    return await conn.command(ns, cmd, finalOptions);\n                }\n                catch (commandError) {\n                    throw this.decorateCommandError(conn, cmd, finalOptions, commandError);\n                }\n            }\n            else {\n                throw operationError;\n            }\n        }\n        finally {\n            this.decrementOperationCount();\n            if (session?.pinnedConnection !== conn) {\n                this.pool.checkIn(conn);\n            }\n        }\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n    handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            }\n            else if (connection) {\n                this.pool.clear({ serviceId: connection.serviceId });\n            }\n        }\n        else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({ serviceId: connection.serviceId });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(() => this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Ensure that error is properly decorated and internal state is updated before throwing\n     * @internal\n     */\n    decorateCommandError(connection, cmd, options, error) {\n        if (typeof error !== 'object' || error == null || !('name' in error)) {\n            throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);\n        }\n        if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {\n            error = error.cause;\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return error;\n        }\n        if (connectionIsStale(this.pool, connection)) {\n            return error;\n        }\n        const session = options?.session;\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(this) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this)) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        this.handleError(error, connection);\n        return error;\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n    decrementOperationCount() {\n        return (this.s.operationCount -= 1);\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n    incrementOperationCount() {\n        return (this.s.operationCount += 1);\n    }\n}\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            (session.transaction.isCommitted && 'commitTransaction' in cmd) ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options = {}) {\n        if (address == null || address === '') {\n            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n        }\n        this.address =\n            typeof address === 'string'\n                ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n                : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host) => host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host) => host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host) => host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        this.error = options.error ?? null;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null\n            ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0\n            : this.electionId === other?.electionId;\n        return (other != null &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = bson_1.Long.isLong(currentTv.counter)\n        ? currentTv.counter\n        : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion;\n//# sourceMappingURL=server_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_selection.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return function writableServer(topologyDescription, servers) {\n        return latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n    };\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return function sameServerSelector(topologyDescription, servers) {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return function readPreferenceServers(topologyDescription, servers, deprioritized = []) {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        if (topologyDescription.type === common_1.TopologyType.Sharded) {\n            const filtered = servers.filter(server => {\n                return !deprioritized.includes(server);\n            });\n            const selectable = filtered.length > 0 ? filtered : deprioritized;\n            return latencyWindowReducer(topologyDescription, selectable.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\n//# sourceMappingURL=server_selection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_selection_events.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;\nconst utils_1 = __webpack_require__(/*! .././utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */\nclass ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        this.selector = selector;\n        this.operation = operation;\n        this.topologyDescription = topologyDescription;\n    }\n}\nexports.ServerSelectionEvent = ServerSelectionEvent;\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */\nclass ServerSelectionStartedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_STARTED;\n        this.message = 'Server selection started';\n    }\n}\nexports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */\nclass ServerSelectionFailedEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, error, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_FAILED;\n        this.message = 'Server selection failed';\n        this.failure = error;\n    }\n}\nexports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */\nclass ServerSelectionSucceededEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, address, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.SERVER_SELECTION_SUCCEEDED;\n        this.message = 'Server selection succeeded';\n        const { host, port } = utils_1.HostAddress.fromString(address).toHostPort();\n        this.serverHost = host;\n        this.serverPort = port;\n    }\n}\nexports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */\nclass WaitingForSuitableServerEvent extends ServerSelectionEvent {\n    /** @internal */\n    constructor(selector, topologyDescription, remainingTimeMS, operation) {\n        super(selector, topologyDescription, operation);\n        /** @internal */\n        this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;\n        this.message = 'Waiting for suitable server to become available';\n        this.remainingTimeMS = remainingTimeMS;\n    }\n}\nexports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent;\n//# sourceMappingURL=server_selection_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQ0FBcUMsR0FBRyxxQ0FBcUMsR0FBRyxrQ0FBa0MsR0FBRyxtQ0FBbUMsR0FBRyw0QkFBNEI7QUFDdkwsZ0JBQWdCLG1CQUFPLENBQUMsNkRBQVk7QUFDcEMsb0JBQW9CLG1CQUFPLENBQUMsbUVBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zZXJ2ZXJfc2VsZWN0aW9uX2V2ZW50cy5qcz9kNjNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5XYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCA9IGV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25TdGFydGVkRXZlbnQgPSBleHBvcnRzLlNlcnZlclNlbGVjdGlvbkV2ZW50ID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uL3V0aWxzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBUaGUgYmFzZSBleHBvcnQgY2xhc3MgZm9yIGFsbCBsb2dzIHB1Ymxpc2hlZCBmcm9tIHNlcnZlciBzZWxlY3Rpb25cbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IExvZyBUeXBlXG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gb3BlcmF0aW9uO1xuICAgICAgICB0aGlzLnRvcG9sb2d5RGVzY3JpcHRpb24gPSB0b3BvbG9neURlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25FdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gc2VydmVyIHNlbGVjdGlvbiBzdGFydHNcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvblN0YXJ0ZWRFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX1NUQVJURUQ7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdTZXJ2ZXIgc2VsZWN0aW9uIHN0YXJ0ZWQnO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50ID0gU2VydmVyU2VsZWN0aW9uU3RhcnRlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBhIHNlcnZlciBzZWxlY3Rpb24gZmFpbHNcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50IGV4dGVuZHMgU2VydmVyU2VsZWN0aW9uRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgZXJyb3IsIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX0ZBSUxFRDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NlcnZlciBzZWxlY3Rpb24gZmFpbGVkJztcbiAgICAgICAgdGhpcy5mYWlsdXJlID0gZXJyb3I7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJTZWxlY3Rpb25GYWlsZWRFdmVudCA9IFNlcnZlclNlbGVjdGlvbkZhaWxlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBzZXJ2ZXIgc2VsZWN0aW9uIHN1Y2NlZWRzXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIGFkZHJlc3MsIG9wZXJhdGlvbikge1xuICAgICAgICBzdXBlcihzZWxlY3RvciwgdG9wb2xvZ3lEZXNjcmlwdGlvbiwgb3BlcmF0aW9uKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5TRVJWRVJfU0VMRUNUSU9OX1NVQ0NFRURFRDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NlcnZlciBzZWxlY3Rpb24gc3VjY2VlZGVkJztcbiAgICAgICAgY29uc3QgeyBob3N0LCBwb3J0IH0gPSB1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21TdHJpbmcoYWRkcmVzcykudG9Ib3N0UG9ydCgpO1xuICAgICAgICB0aGlzLnNlcnZlckhvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLnNlcnZlclBvcnQgPSBwb3J0O1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyU2VsZWN0aW9uU3VjY2VlZGVkRXZlbnQgPSBTZXJ2ZXJTZWxlY3Rpb25TdWNjZWVkZWRFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gc2VydmVyIHNlbGVjdGlvbiBpcyB3YWl0aW5nIGZvciBhIHN1aXRhYmxlIHNlcnZlciB0byBiZWNvbWUgYXZhaWxhYmxlXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBXYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCBleHRlbmRzIFNlcnZlclNlbGVjdGlvbkV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRvcG9sb2d5RGVzY3JpcHRpb24sIHJlbWFpbmluZ1RpbWVNUywgb3BlcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKHNlbGVjdG9yLCB0b3BvbG9neURlc2NyaXB0aW9uLCBvcGVyYXRpb24pO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLldBSVRJTkdfRk9SX1NVSVRBQkxFX1NFUlZFUjtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1dhaXRpbmcgZm9yIHN1aXRhYmxlIHNlcnZlciB0byBiZWNvbWUgYXZhaWxhYmxlJztcbiAgICAgICAgdGhpcy5yZW1haW5pbmdUaW1lTVMgPSByZW1haW5pbmdUaW1lTVM7XG4gICAgfVxufVxuZXhwb3J0cy5XYWl0aW5nRm9yU3VpdGFibGVTZXJ2ZXJFdmVudCA9IFdhaXRpbmdGb3JTdWl0YWJsZVNlcnZlckV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmVyX3NlbGVjdGlvbl9ldmVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/srv_polling.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().catch(() => null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\nexports.SrvPoller = SrvPoller;\n//# sourceMappingURL=srv_polling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zcnZfcG9sbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyx1QkFBdUI7QUFDM0MsWUFBWSxtQkFBTyxDQUFDLGdCQUFLO0FBQ3pCLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFVO0FBQ2xDLHNCQUFzQixtQkFBTyxDQUFDLHVFQUFnQjtBQUM5QyxnQkFBZ0IsbUJBQU8sQ0FBQywyREFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0IsUUFBUSxhQUFhO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vc3J2X3BvbGxpbmcuanM/MGVkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3J2UG9sbGVyID0gZXhwb3J0cy5TcnZQb2xsaW5nRXZlbnQgPSB2b2lkIDA7XG5jb25zdCBkbnMgPSByZXF1aXJlKFwiZG5zXCIpO1xuY29uc3QgdGltZXJzXzEgPSByZXF1aXJlKFwidGltZXJzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG1vbmdvX3R5cGVzXzEgPSByZXF1aXJlKFwiLi4vbW9uZ29fdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTcnZQb2xsaW5nRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKHNydlJlY29yZHMpIHtcbiAgICAgICAgdGhpcy5zcnZSZWNvcmRzID0gc3J2UmVjb3JkcztcbiAgICB9XG4gICAgaG9zdG5hbWVzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNldCh0aGlzLnNydlJlY29yZHMubWFwKHIgPT4gdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tU3J2UmVjb3JkKHIpLnRvU3RyaW5nKCkpKTtcbiAgICB9XG59XG5leHBvcnRzLlNydlBvbGxpbmdFdmVudCA9IFNydlBvbGxpbmdFdmVudDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFNydlBvbGxlciBleHRlbmRzIG1vbmdvX3R5cGVzXzEuVHlwZWRFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnNydkhvc3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdPcHRpb25zIGZvciBTcnZQb2xsZXIgbXVzdCBleGlzdCBhbmQgaW5jbHVkZSBzcnZIb3N0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcnZIb3N0ID0gb3B0aW9ucy5zcnZIb3N0O1xuICAgICAgICB0aGlzLnNydk1heEhvc3RzID0gb3B0aW9ucy5zcnZNYXhIb3N0cyA/PyAwO1xuICAgICAgICB0aGlzLnNydlNlcnZpY2VOYW1lID0gb3B0aW9ucy5zcnZTZXJ2aWNlTmFtZSA/PyAnbW9uZ29kYic7XG4gICAgICAgIHRoaXMucmVzY2FuU3J2SW50ZXJ2YWxNUyA9IDYwMDAwO1xuICAgICAgICB0aGlzLmhlYXJ0YmVhdEZyZXF1ZW5jeU1TID0gb3B0aW9ucy5oZWFydGJlYXRGcmVxdWVuY3lNUyA/PyAxMDAwMDtcbiAgICAgICAgdGhpcy5oYU1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nZW5lcmF0aW9uID0gMDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IHNydkFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiBgXyR7dGhpcy5zcnZTZXJ2aWNlTmFtZX0uX3RjcC4ke3RoaXMuc3J2SG9zdH1gO1xuICAgIH1cbiAgICBnZXQgaW50ZXJ2YWxNUygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFNb2RlID8gdGhpcy5oZWFydGJlYXRGcmVxdWVuY3lNUyA6IHRoaXMucmVzY2FuU3J2SW50ZXJ2YWxNUztcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICAoMCwgdGltZXJzXzEuY2xlYXJUaW1lb3V0KSh0aGlzLl90aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGlvbiArPSAxO1xuICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUT0RPKE5PREUtNDk5NCk6IGltcGxlbWVudCBuZXcgbG9nZ2luZyBsb2dpYyBmb3IgU3J2UG9sbGVyIGZhaWx1cmVzXG4gICAgc2NoZWR1bGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICAoMCwgdGltZXJzXzEuY2xlYXJUaW1lb3V0KSh0aGlzLl90aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gKDAsIHRpbWVyc18xLnNldFRpbWVvdXQpKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3BvbGwoKS5jYXRjaCgoKSA9PiBudWxsKTtcbiAgICAgICAgfSwgdGhpcy5pbnRlcnZhbE1TKTtcbiAgICB9XG4gICAgc3VjY2VzcyhzcnZSZWNvcmRzKSB7XG4gICAgICAgIHRoaXMuaGFNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgdGhpcy5lbWl0KFNydlBvbGxlci5TUlZfUkVDT1JEX0RJU0NPVkVSWSwgbmV3IFNydlBvbGxpbmdFdmVudChzcnZSZWNvcmRzKSk7XG4gICAgfVxuICAgIGZhaWx1cmUoKSB7XG4gICAgICAgIHRoaXMuaGFNb2RlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgIH1cbiAgICBhc3luYyBfcG9sbCgpIHtcbiAgICAgICAgY29uc3QgZ2VuZXJhdGlvbiA9IHRoaXMuZ2VuZXJhdGlvbjtcbiAgICAgICAgbGV0IHNydlJlY29yZHM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzcnZSZWNvcmRzID0gYXdhaXQgZG5zLnByb21pc2VzLnJlc29sdmVTcnYodGhpcy5zcnZBZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZG5zRXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbHVyZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZW5lcmF0aW9uICE9PSB0aGlzLmdlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaW5hbEFkZHJlc3NlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiBzcnZSZWNvcmRzKSB7XG4gICAgICAgICAgICBpZiAoKDAsIHV0aWxzXzEubWF0Y2hlc1BhcmVudERvbWFpbikocmVjb3JkLm5hbWUsIHRoaXMuc3J2SG9zdCkpIHtcbiAgICAgICAgICAgICAgICBmaW5hbEFkZHJlc3Nlcy5wdXNoKHJlY29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmaW5hbEFkZHJlc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZmFpbHVyZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3VjY2VzcyhmaW5hbEFkZHJlc3Nlcyk7XG4gICAgfVxufVxuLyoqIEBldmVudCAqL1xuU3J2UG9sbGVyLlNSVl9SRUNPUkRfRElTQ09WRVJZID0gJ3NydlJlY29yZERpc2NvdmVyeSc7XG5leHBvcnRzLlNydlBvbGxlciA9IFNydlBvbGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNydl9wb2xsaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst connection_string_1 = __webpack_require__(/*! ../connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ../mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst server_selection_1 = __webpack_require__(/*! ./server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst server_selection_events_1 = __webpack_require__(/*! ./server_selection_events */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection_events.js\");\nconst srv_polling_1 = __webpack_require__(/*! ./srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nconst topology_description_1 = __webpack_require__(/*! ./topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.client = client;\n        this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        this.mongoLogger = client.mongoLogger;\n        this.component = 'topology';\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get serverApi() {\n        return this.s.options.serverApi;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    connect(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error) => callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        const selectServerOptions = { operationName: 'ping', ...options };\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions, (err, server) => {\n            if (err) {\n                return this.close({ force: false }, () => exitWithError(err));\n            }\n            const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, {}).then(() => {\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback?.(undefined, this);\n                }, exitWithError);\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback?.(undefined, this);\n        });\n    }\n    close(options, callback) {\n        options = options ?? { force: false };\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return callback?.();\n        }\n        const destroyedServers = Array.from(this.s.servers.values(), server => {\n            return (0, util_1.promisify)(destroyServer)(server, this, { force: !!options?.force });\n        });\n        Promise.all(destroyedServers)\n            .then(() => {\n            this.s.servers.clear();\n            stateTransition(this, common_1.STATE_CLOSING);\n            drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n            (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n            if (this.s.srvPoller) {\n                this.s.srvPoller.stop();\n                this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            }\n            this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n            stateTransition(this, common_1.STATE_CLOSED);\n            // emit an event for close\n            this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n        })\n            .finally(() => callback?.());\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n        if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n        }\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n            }\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            topologyDescription: this.description,\n            mongoLogger: this.client.mongoLogger,\n            transaction,\n            callback,\n            timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS),\n            startTime: (0, utils_1.now)(),\n            operationName: options.operationName,\n            waitingLogged: false,\n            previousServer: options.previousServer\n        };\n        waitQueueMember.timeoutController.signal.addEventListener('abort', () => {\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n            if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n            }\n            waitQueueMember.callback(timeoutError);\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n    options = options ?? { force: false };\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, () => {\n        topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of constants_1.SERVER_RELAY_EVENTS) {\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        waitQueueMember.timeoutController.clear();\n        if (!waitQueueMember[kCancelled]) {\n            if (err) {\n                if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                    waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, err, waitQueueMember.operationName));\n                }\n            }\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            const previousServer = waitQueueMember.previousServer;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : [])\n                : serverDescriptions;\n        }\n        catch (e) {\n            waitQueueMember.timeoutController.clear();\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, e, waitQueueMember.operationName));\n            }\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            if (!waitQueueMember.waitingLogged) {\n                if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n                    topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0\n                        ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime)\n                        : -1, waitQueueMember.operationName));\n                }\n                waitQueueMember.waitingLogged = true;\n            }\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            const error = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n            if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n                topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, error, waitQueueMember.operationName));\n            }\n            waitQueueMember.callback(error);\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        waitQueueMember.timeoutController.clear();\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n            topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n        }\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology_description.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TopologyDescription = void 0;\nconst WIRE_CONSTANTS = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null) {\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()) {\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown ||\n                serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers) {\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */\n    updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */\n        const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames) {\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove) {\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd) {\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            }\n            else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts) {\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n    update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            }\n            else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === 'string' &&\n            typeof setName === 'string' &&\n            serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            }\n            else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            }\n            else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n            else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            }\n            else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd) => sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    hasServer(address) {\n        return this.servers.has(address);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch (serverType) {\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        }\n        else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n            return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n    }\n    else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion ||\n                    (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n                    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null &&\n            (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions) {\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n            // There can only be one primary\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses\n        .filter((addr) => responseAddresses.indexOf(addr) === -1)\n        .forEach((address) => {\n        serverDescriptions.delete(address);\n    });\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName ||\n        (serverDescription.me && serverDescription.address !== serverDescription.me)) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [topologyType, setName];\n    }\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()) {\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n}\n//# sourceMappingURL=topology_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sessions.js":
/*!**********************************************!*\
  !*** ./node_modules/mongodb/lib/sessions.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst metrics_1 = __webpack_require__(/*! ./cmap/metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\nconst shared_1 = __webpack_require__(/*! ./cmap/wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst transactions_1 = __webpack_require__(/*! ./transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(client, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this[_a] = false;\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options ?? {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.explicit = !!options.explicit;\n        this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n        this[kTxnNumberIncrement] = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        return this[kServerSession]?.id;\n    }\n    get serverSession() {\n        let serverSession = this[kServerSession];\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n            }\n            serverSession = this.sessionPool.acquire();\n            this[kServerSession] = serverSession;\n        }\n        return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */\n    get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */\n    pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction();\n            }\n            if (!this.hasEnded) {\n                const serverSession = this[kServerSession];\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Make sure a new serverSession never makes it onto this ClientSession\n                    Object.defineProperty(this, kServerSession, {\n                        value: ServerSession.clone(serverSession),\n                        writable: false\n                    });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n            }\n        }\n        catch {\n            // spec indicates that we should ignore all errors for `endSessions`\n        }\n        finally {\n            maybeClearPinnedConnection(this, { force: true, ...options });\n        }\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            clusterTime.signature.hash?._bsontype !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'bigint' &&\n                typeof clusterTime.signature.keyId !== 'number' &&\n                clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber() {\n        this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ??\n                this.defaultTransactionOptions.readConcern ??\n                this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ??\n                this.defaultTransactionOptions.writeConcern ??\n                this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ??\n                this.defaultTransactionOptions.readPreference ??\n                this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */\n    async commitTransaction() {\n        return endTransactionAsync(this, 'commitTransaction');\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     */\n    async abortTransaction() {\n        return endTransactionAsync(this, 'abortTransaction');\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     *\n     * @remarks\n     * This function:\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then this function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then this function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - May be called multiple times if the driver needs to attempt to retry the operations.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    async withTransaction(fn, options) {\n        const startTime = (0, utils_1.now)();\n        return attemptTransaction(this, startTime, fn, options);\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction hasNotTimedOut(startTime, max) {\n    return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options?.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({ serviceId: conn.serviceId });\n            }\n        }\n        session[kPinnedConnection] = undefined;\n    }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        (err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired));\n}\nfunction attemptTransactionCommit(session, startTime, fn, result, options) {\n    return session.commitTransaction().then(() => result, (err) => {\n        if (err instanceof error_1.MongoError &&\n            hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n            !isMaxTimeMSExpiredError(err)) {\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n                return attemptTransactionCommit(session, startTime, fn, result, options);\n            }\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n        }\n        throw err;\n    });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n    transactions_1.TxnState.NO_TRANSACTION,\n    transactions_1.TxnState.TRANSACTION_COMMITTED,\n    transactions_1.TxnState.TRANSACTION_ABORTED\n]);\nfunction userExplicitlyEndedTransaction(session) {\n    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options = {}) {\n    session.startTransaction(options);\n    let promise;\n    try {\n        promise = fn(session);\n    }\n    catch (err) {\n        promise = Promise.reject(err);\n    }\n    if (!(0, utils_1.isPromiseLike)(promise)) {\n        session.abortTransaction().catch(() => null);\n        return Promise.reject(new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise'));\n    }\n    return promise.then(result => {\n        if (userExplicitlyEndedTransaction(session)) {\n            return result;\n        }\n        return attemptTransactionCommit(session, startTime, fn, result, options);\n    }, err => {\n        function maybeRetryOrThrow(err) {\n            if (err instanceof error_1.MongoError &&\n                err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n            if (isMaxTimeMSExpiredError(err)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            throw err;\n        }\n        if (session.inTransaction()) {\n            return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n        }\n        return maybeRetryOrThrow(err);\n    });\n}\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n    // handle any initial problematic cases\n    const txnState = session.transaction.state;\n    if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n        callback(new error_1.MongoTransactionError('No transaction started'));\n        return;\n    }\n    if (commandName === 'commitTransaction') {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n            return;\n        }\n    }\n    else {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n            return;\n        }\n    }\n    // construct and send the command\n    const command = { [commandName]: 1 };\n    // apply a writeConcern if specified\n    let writeConcern;\n    if (session.transaction.options.writeConcern) {\n        writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n    }\n    else if (session.clientOptions && session.clientOptions.writeConcern) {\n        writeConcern = { w: session.clientOptions.writeConcern.w };\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n        writeConcern = Object.assign({ wtimeoutMS: 10000 }, writeConcern, { w: 'majority' });\n    }\n    if (writeConcern) {\n        write_concern_1.WriteConcern.apply(command, writeConcern);\n    }\n    if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n        Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n    }\n    function commandHandler(error) {\n        if (commandName !== 'commitTransaction') {\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (session.loadBalanced) {\n                maybeClearPinnedConnection(session, { force: false });\n            }\n            // The spec indicates that we should ignore all errors on `abortTransaction`\n            return callback();\n        }\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        if (error instanceof error_1.MongoError) {\n            if ((0, error_1.isRetryableWriteError)(error) ||\n                error instanceof error_1.MongoWriteConcernError ||\n                isMaxTimeMSExpiredError(error)) {\n                if (isUnknownTransactionCommitResult(error)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    // per txns spec, must unpin session in this case\n                    session.unpin({ error });\n                }\n            }\n            else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                session.unpin({ error });\n            }\n        }\n        callback(error);\n    }\n    if (session.transaction.recoveryToken) {\n        command.recoveryToken = session.transaction.recoveryToken;\n    }\n    const handleFirstCommandAttempt = (error) => {\n        if (command.abortTransaction) {\n            // always unpin on abort regardless of command outcome\n            session.unpin();\n        }\n        if (error instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(error)) {\n            // SPEC-1185: apply majority write concern when retrying commitTransaction\n            if (command.commitTransaction) {\n                // per txns spec, must unpin session in this case\n                session.unpin({ force: true });\n                command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n                    w: 'majority'\n                });\n            }\n            (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n                session,\n                readPreference: read_preference_1.ReadPreference.primary,\n                bypassPinningCheck: true\n            })).then(() => commandHandler(), commandHandler);\n            return;\n        }\n        commandHandler(error);\n    };\n    // send the command\n    (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n    })).then(() => handleFirstCommandAttempt(), handleFirstCommandAttempt);\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor() {\n        this.id = { id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */\n    static clone(serverSession) {\n        const arrayBuffer = new ArrayBuffer(16);\n        const idBytes = Buffer.from(arrayBuffer);\n        idBytes.set(serverSession.id.id.buffer);\n        const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n        // Manual prototype construction to avoid modifying the constructor of this class\n        return Object.setPrototypeOf({\n            id: { id },\n            lastUse: serverSession.lastUse,\n            txnNumber: serverSession.txnNumber,\n            isDirty: serverSession.isDirty\n        }, ServerSession.prototype);\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(client) {\n        if (client == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while (this.sessions.length > 0) {\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null &&\n                (!!this.client.topology?.loadBalanced ||\n                    !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session[kTxnNumberIncrement];\n        session[kTxnNumberIncrement] = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n    return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;\n//# sourceMappingURL=sessions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sessions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sort.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/sort.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatSort = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @internal */\nfunction prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction))\n        return direction;\n    switch (value) {\n        case 'ascending':\n        case 'asc':\n        case '1':\n            return 1;\n        case 'descending':\n        case 'desc':\n        case '-1':\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */\nfunction isMeta(t) {\n    return typeof t === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';\n}\n/** @internal */\nfunction isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */\nfunction pairToMap(v) {\n    return new Map([[`${v[0]}`, prepareDirection([v[1]])]]);\n}\n/** @internal */\nfunction deepToMap(t) {\n    const sortEntries = t.map(([k, v]) => [`${k}`, prepareDirection(v)]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction stringsToMap(t) {\n    const sortEntries = t.map(key => [`${key}`, 1]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */\nfunction formatSort(sort, direction) {\n    if (sort == null)\n        return undefined;\n    if (typeof sort === 'string')\n        return new Map([[sort, prepareDirection(direction)]]);\n    if (typeof sort !== 'object') {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length)\n        return undefined;\n    if (isDeep(sort))\n        return deepToMap(sort);\n    if (isPair(sort))\n        return pairToMap(sort);\n    return stringsToMap(sort);\n}\nexports.formatSort = formatSort;\n//# sourceMappingURL=sort.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsZ0JBQWdCLG1CQUFPLENBQUMsMERBQVM7QUFDakM7QUFDQTtBQUNBLHFCQUFxQixVQUFVO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRiwwQkFBMEI7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEtBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsOENBQThDLEVBQUU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsSUFBSTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHNCQUFzQjtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zb3J0LmpzPzUyOTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm1hdFNvcnQgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBwcmVwYXJlRGlyZWN0aW9uKGRpcmVjdGlvbiA9IDEpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGAke2RpcmVjdGlvbn1gLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGlzTWV0YShkaXJlY3Rpb24pKVxuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSAnYXNjZW5kaW5nJzpcbiAgICAgICAgY2FzZSAnYXNjJzpcbiAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgY2FzZSAnZGVzY2VuZGluZyc6XG4gICAgICAgIGNhc2UgJ2Rlc2MnOlxuICAgICAgICBjYXNlICctMSc6XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHNvcnQgZGlyZWN0aW9uOiAke0pTT04uc3RyaW5naWZ5KGRpcmVjdGlvbil9YCk7XG4gICAgfVxufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gaXNNZXRhKHQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHQgPT09ICdvYmplY3QnICYmIHQgIT0gbnVsbCAmJiAnJG1ldGEnIGluIHQgJiYgdHlwZW9mIHQuJG1ldGEgPT09ICdzdHJpbmcnO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gaXNQYWlyKHQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0KSAmJiB0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJlcGFyZURpcmVjdGlvbih0WzFdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNEZWVwKHQpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0KSAmJiBBcnJheS5pc0FycmF5KHRbMF0pO1xufVxuZnVuY3Rpb24gaXNNYXAodCkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgTWFwICYmIHQuc2l6ZSA+IDA7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBwYWlyVG9NYXAodikge1xuICAgIHJldHVybiBuZXcgTWFwKFtbYCR7dlswXX1gLCBwcmVwYXJlRGlyZWN0aW9uKFt2WzFdXSldXSk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBkZWVwVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdC5tYXAoKFtrLCB2XSkgPT4gW2Ake2t9YCwgcHJlcGFyZURpcmVjdGlvbih2KV0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHN0cmluZ3NUb01hcCh0KSB7XG4gICAgY29uc3Qgc29ydEVudHJpZXMgPSB0Lm1hcChrZXkgPT4gW2Ake2tleX1gLCAxXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gb2JqZWN0VG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModCkubWFwKChbaywgdl0pID0+IFtcbiAgICAgICAgYCR7a31gLFxuICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHYpXG4gICAgXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gbWFwVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gQXJyYXkuZnJvbSh0KS5tYXAoKFtrLCB2XSkgPT4gW1xuICAgICAgICBgJHtrfWAsXG4gICAgICAgIHByZXBhcmVEaXJlY3Rpb24odilcbiAgICBdKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogY29udmVydHMgYSBTb3J0IHR5cGUgaW50byBhIHR5cGUgdGhhdCBpcyB2YWxpZCBmb3IgdGhlIHNlcnZlciAoU29ydEZvckNtZCkgKi9cbmZ1bmN0aW9uIGZvcm1hdFNvcnQoc29ydCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKHNvcnQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHNvcnQgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gbmV3IE1hcChbW3NvcnQsIHByZXBhcmVEaXJlY3Rpb24oZGlyZWN0aW9uKV1dKTtcbiAgICBpZiAodHlwZW9mIHNvcnQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgc29ydCBmb3JtYXQ6ICR7SlNPTi5zdHJpbmdpZnkoc29ydCl9IFNvcnQgbXVzdCBiZSBhIHZhbGlkIG9iamVjdGApO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc29ydCkpIHtcbiAgICAgICAgcmV0dXJuIGlzTWFwKHNvcnQpID8gbWFwVG9NYXAoc29ydCkgOiBPYmplY3Qua2V5cyhzb3J0KS5sZW5ndGggPyBvYmplY3RUb01hcChzb3J0KSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFzb3J0Lmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAoaXNEZWVwKHNvcnQpKVxuICAgICAgICByZXR1cm4gZGVlcFRvTWFwKHNvcnQpO1xuICAgIGlmIChpc1BhaXIoc29ydCkpXG4gICAgICAgIHJldHVybiBwYWlyVG9NYXAoc29ydCk7XG4gICAgcmV0dXJuIHN0cmluZ3NUb01hcChzb3J0KTtcbn1cbmV4cG9ydHMuZm9ybWF0U29ydCA9IGZvcm1hdFNvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/transactions.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/transactions.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;\n//# sourceMappingURL=transactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvdHJhbnNhY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLG1CQUFtQixHQUFHLGdCQUFnQjtBQUNyRSxnQkFBZ0IsbUJBQU8sQ0FBQywwREFBUztBQUNqQyx1QkFBdUIsbUJBQU8sQ0FBQyx3RUFBZ0I7QUFDL0MsMEJBQTBCLG1CQUFPLENBQUMsOEVBQW1CO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLDBFQUFpQjtBQUNqRDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0YsV0FBVyxRQUFRLFVBQVU7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3RyYW5zYWN0aW9ucy5qcz8xODlhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1RyYW5zYWN0aW9uQ29tbWFuZCA9IGV4cG9ydHMuVHJhbnNhY3Rpb24gPSBleHBvcnRzLlR4blN0YXRlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgcmVhZF9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi9yZWFkX2NvbmNlcm5cIik7XG5jb25zdCByZWFkX3ByZWZlcmVuY2VfMSA9IHJlcXVpcmUoXCIuL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IHdyaXRlX2NvbmNlcm5fMSA9IHJlcXVpcmUoXCIuL3dyaXRlX2NvbmNlcm5cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLlR4blN0YXRlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgTk9fVFJBTlNBQ1RJT046ICdOT19UUkFOU0FDVElPTicsXG4gICAgU1RBUlRJTkdfVFJBTlNBQ1RJT046ICdTVEFSVElOR19UUkFOU0FDVElPTicsXG4gICAgVFJBTlNBQ1RJT05fSU5fUFJPR1JFU1M6ICdUUkFOU0FDVElPTl9JTl9QUk9HUkVTUycsXG4gICAgVFJBTlNBQ1RJT05fQ09NTUlUVEVEOiAnVFJBTlNBQ1RJT05fQ09NTUlUVEVEJyxcbiAgICBUUkFOU0FDVElPTl9DT01NSVRURURfRU1QVFk6ICdUUkFOU0FDVElPTl9DT01NSVRURURfRU1QVFknLFxuICAgIFRSQU5TQUNUSU9OX0FCT1JURUQ6ICdUUkFOU0FDVElPTl9BQk9SVEVEJ1xufSk7XG5jb25zdCBzdGF0ZU1hY2hpbmUgPSB7XG4gICAgW2V4cG9ydHMuVHhuU3RhdGUuTk9fVFJBTlNBQ1RJT05dOiBbZXhwb3J0cy5UeG5TdGF0ZS5OT19UUkFOU0FDVElPTiwgZXhwb3J0cy5UeG5TdGF0ZS5TVEFSVElOR19UUkFOU0FDVElPTl0sXG4gICAgW2V4cG9ydHMuVHhuU3RhdGUuU1RBUlRJTkdfVFJBTlNBQ1RJT05dOiBbXG4gICAgICAgIGV4cG9ydHMuVHhuU3RhdGUuVFJBTlNBQ1RJT05fSU5fUFJPR1JFU1MsXG4gICAgICAgIGV4cG9ydHMuVHhuU3RhdGUuVFJBTlNBQ1RJT05fQ09NTUlUVEVELFxuICAgICAgICBleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0NPTU1JVFRFRF9FTVBUWSxcbiAgICAgICAgZXhwb3J0cy5UeG5TdGF0ZS5UUkFOU0FDVElPTl9BQk9SVEVEXG4gICAgXSxcbiAgICBbZXhwb3J0cy5UeG5TdGF0ZS5UUkFOU0FDVElPTl9JTl9QUk9HUkVTU106IFtcbiAgICAgICAgZXhwb3J0cy5UeG5TdGF0ZS5UUkFOU0FDVElPTl9JTl9QUk9HUkVTUyxcbiAgICAgICAgZXhwb3J0cy5UeG5TdGF0ZS5UUkFOU0FDVElPTl9DT01NSVRURUQsXG4gICAgICAgIGV4cG9ydHMuVHhuU3RhdGUuVFJBTlNBQ1RJT05fQUJPUlRFRFxuICAgIF0sXG4gICAgW2V4cG9ydHMuVHhuU3RhdGUuVFJBTlNBQ1RJT05fQ09NTUlUVEVEXTogW1xuICAgICAgICBleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0NPTU1JVFRFRCxcbiAgICAgICAgZXhwb3J0cy5UeG5TdGF0ZS5UUkFOU0FDVElPTl9DT01NSVRURURfRU1QVFksXG4gICAgICAgIGV4cG9ydHMuVHhuU3RhdGUuU1RBUlRJTkdfVFJBTlNBQ1RJT04sXG4gICAgICAgIGV4cG9ydHMuVHhuU3RhdGUuTk9fVFJBTlNBQ1RJT05cbiAgICBdLFxuICAgIFtleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0FCT1JURURdOiBbZXhwb3J0cy5UeG5TdGF0ZS5TVEFSVElOR19UUkFOU0FDVElPTiwgZXhwb3J0cy5UeG5TdGF0ZS5OT19UUkFOU0FDVElPTl0sXG4gICAgW2V4cG9ydHMuVHhuU3RhdGUuVFJBTlNBQ1RJT05fQ09NTUlUVEVEX0VNUFRZXTogW1xuICAgICAgICBleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0NPTU1JVFRFRF9FTVBUWSxcbiAgICAgICAgZXhwb3J0cy5UeG5TdGF0ZS5OT19UUkFOU0FDVElPTlxuICAgIF1cbn07XG5jb25zdCBBQ1RJVkVfU1RBVEVTID0gbmV3IFNldChbXG4gICAgZXhwb3J0cy5UeG5TdGF0ZS5TVEFSVElOR19UUkFOU0FDVElPTixcbiAgICBleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0lOX1BST0dSRVNTXG5dKTtcbmNvbnN0IENPTU1JVFRFRF9TVEFURVMgPSBuZXcgU2V0KFtcbiAgICBleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0NPTU1JVFRFRCxcbiAgICBleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0NPTU1JVFRFRF9FTVBUWSxcbiAgICBleHBvcnRzLlR4blN0YXRlLlRSQU5TQUNUSU9OX0FCT1JURURcbl0pO1xuLyoqXG4gKiBAcHVibGljXG4gKiBBIGNsYXNzIG1haW50YWluaW5nIHN0YXRlIHJlbGF0ZWQgdG8gYSBzZXJ2ZXIgdHJhbnNhY3Rpb24uIEludGVybmFsIE9ubHlcbiAqL1xuY2xhc3MgVHJhbnNhY3Rpb24ge1xuICAgIC8qKiBDcmVhdGUgYSB0cmFuc2FjdGlvbiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICB0aGlzLnN0YXRlID0gZXhwb3J0cy5UeG5TdGF0ZS5OT19UUkFOU0FDVElPTjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICAgIGNvbnN0IHdyaXRlQ29uY2VybiA9IHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIGlmICh3cml0ZUNvbmNlcm4udyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVHJhbnNhY3Rpb25FcnJvcignVHJhbnNhY3Rpb25zIGRvIG5vdCBzdXBwb3J0IHVuYWNrbm93bGVkZ2VkIHdyaXRlIGNvbmNlcm4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy53cml0ZUNvbmNlcm4gPSB3cml0ZUNvbmNlcm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVhZENvbmNlcm4pIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yZWFkQ29uY2VybiA9IHJlYWRfY29uY2Vybl8xLlJlYWRDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucmVhZFByZWZlcmVuY2UgPSByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5tYXhDb21taXRUaW1lTVMpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5tYXhUaW1lTVMgPSBvcHRpb25zLm1heENvbW1pdFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBUaGlzIGlzbid0IHRlY2huaWNhbGx5IG5lY2Vzc2FyeVxuICAgICAgICB0aGlzLl9waW5uZWRTZXJ2ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JlY292ZXJ5VG9rZW4gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBnZXQgc2VydmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGlubmVkU2VydmVyO1xuICAgIH1cbiAgICBnZXQgcmVjb3ZlcnlUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlY292ZXJ5VG9rZW47XG4gICAgfVxuICAgIGdldCBpc1Bpbm5lZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zZXJ2ZXI7XG4gICAgfVxuICAgIC8qKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB0cmFuc2FjdGlvbiBoYXMgc3RhcnRlZCAqL1xuICAgIGdldCBpc1N0YXJ0aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gZXhwb3J0cy5UeG5TdGF0ZS5TVEFSVElOR19UUkFOU0FDVElPTjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGlzIHNlc3Npb24gaXMgcHJlc2VudGx5IGluIGEgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBnZXQgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBBQ1RJVkVfU1RBVEVTLmhhcyh0aGlzLnN0YXRlKTtcbiAgICB9XG4gICAgZ2V0IGlzQ29tbWl0dGVkKCkge1xuICAgICAgICByZXR1cm4gQ09NTUlUVEVEX1NUQVRFUy5oYXModGhpcy5zdGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zaXRpb24gdGhlIHRyYW5zYWN0aW9uIGluIHRoZSBzdGF0ZSBtYWNoaW5lXG4gICAgICogQGludGVybmFsXG4gICAgICogQHBhcmFtIG5leHRTdGF0ZSAtIFRoZSBuZXcgc3RhdGUgdG8gdHJhbnNpdGlvbiB0b1xuICAgICAqL1xuICAgIHRyYW5zaXRpb24obmV4dFN0YXRlKSB7XG4gICAgICAgIGNvbnN0IG5leHRTdGF0ZXMgPSBzdGF0ZU1hY2hpbmVbdGhpcy5zdGF0ZV07XG4gICAgICAgIGlmIChuZXh0U3RhdGVzICYmIG5leHRTdGF0ZXMuaW5jbHVkZXMobmV4dFN0YXRlKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBleHBvcnRzLlR4blN0YXRlLk5PX1RSQU5TQUNUSU9OIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gZXhwb3J0cy5UeG5TdGF0ZS5TVEFSVElOR19UUkFOU0FDVElPTiB8fFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IGV4cG9ydHMuVHhuU3RhdGUuVFJBTlNBQ1RJT05fQUJPUlRFRCkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5waW5TZXJ2ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcihgQXR0ZW1wdGVkIGlsbGVnYWwgc3RhdGUgdHJhbnNpdGlvbiBmcm9tIFske3RoaXMuc3RhdGV9XSB0byBbJHtuZXh0U3RhdGV9XWApO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgcGluU2VydmVyKHNlcnZlcikge1xuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fcGlubmVkU2VydmVyID0gc2VydmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB1bnBpblNlcnZlcigpIHtcbiAgICAgICAgdGhpcy5fcGlubmVkU2VydmVyID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuVHJhbnNhY3Rpb24gPSBUcmFuc2FjdGlvbjtcbmZ1bmN0aW9uIGlzVHJhbnNhY3Rpb25Db21tYW5kKGNvbW1hbmQpIHtcbiAgICByZXR1cm4gISEoY29tbWFuZC5jb21taXRUcmFuc2FjdGlvbiB8fCBjb21tYW5kLmFib3J0VHJhbnNhY3Rpb24pO1xufVxuZXhwb3J0cy5pc1RyYW5zYWN0aW9uQ29tbWFuZCA9IGlzVHJhbnNhY3Rpb25Db21tYW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNhY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/transactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/utils.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.TimeoutController = exports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nexports.randomBytes = exports.promiseWithResolvers = exports.isHostMatch = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return (value != null &&\n        typeof value === 'object' &&\n        'then' in value &&\n        typeof value.then === 'function');\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    if (command.explain) {\n        return command;\n    }\n    return { explain: command, verbosity: explain.verbosity };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\nexports.makeCounter = makeCounter;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n            // Since we do not have a monitor in the load balanced mode,\n            // we assume the load-balanced server is always pointed at the latest mongodb version.\n            // There is a risk that for on-prem deployments\n            // that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            // We also return the max supported wire version for serverAPI.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n    arr = arr || [];\n    let idx = 0;\n    let awaiting = 0;\n    for (idx = 0; idx < arr.length; ++idx) {\n        awaiting++;\n        eachFn(arr[idx], eachCallback);\n    }\n    if (awaiting === 0) {\n        callback();\n        return;\n    }\n    function eachCallback(err) {\n        awaiting--;\n        if (err) {\n            callback(err);\n            return;\n        }\n        if (idx === arr.length && awaiting <= 0) {\n            callback();\n        }\n    }\n}\nexports.eachAsync = eachAsync;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        return -1;\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n    if (value == null) {\n        return value;\n    }\n    else if (Array.isArray(value)) {\n        return value.map(item => deepCopy(item));\n    }\n    else if (isRecord(value)) {\n        const res = {};\n        for (const key in value) {\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch (ctor.name.toLowerCase()) {\n            case 'date':\n                return new ctor(Number(value));\n            case 'map':\n                return new Map(value);\n            case 'set':\n                return new Set(value);\n            case 'buffer':\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\nexports.request = request;\n/**\n * A custom AbortController that aborts after a specified timeout.\n *\n * If `timeout` is undefined or \\<=0, the abort controller never aborts.\n *\n * This class provides two benefits over the built-in AbortSignal.timeout() method.\n * - This class provides a mechanism for cancelling the timeout\n * - This class supports infinite timeouts by interpreting a timeout of 0 as infinite.  This is\n *    consistent with existing timeout options in the Node driver (serverSelectionTimeoutMS, for example).\n * @internal\n */\nclass TimeoutController extends AbortController {\n    constructor(timeout = 0, timeoutId = timeout > 0 ? (0, timers_1.setTimeout)(() => this.abort(), timeout) : null) {\n        super();\n        this.timeoutId = timeoutId;\n    }\n    clear() {\n        if (this.timeoutId != null) {\n            (0, timers_1.clearTimeout)(this.timeoutId);\n        }\n        this.timeoutId = null;\n    }\n}\nexports.TimeoutController = TimeoutController;\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nexports.isHostMatch = isHostMatch;\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n        resolve = promiseResolve;\n        reject = promiseReject;\n    });\n    return { promise, resolve, reject };\n}\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/write_concern.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/write_concern.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.WRITE_CONCERN_KEYS = ['w', 'wtimeout', 'j', 'journal', 'fsync'];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nclass WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w, wtimeoutMS, journal, fsync) {\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            }\n            else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null)\n            wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null)\n            wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null)\n            wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options, inherit) {\n        if (options == null)\n            return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === 'string' || typeof options === 'number') {\n            opts = { w: options };\n        }\n        else if (options instanceof WriteConcern) {\n            opts = options;\n        }\n        else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null ||\n            wtimeout != null ||\n            wtimeoutMS != null ||\n            j != null ||\n            journal != null ||\n            fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern;\n//# sourceMappingURL=write_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvd3JpdGVfY29uY2Vybi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRywwQkFBMEI7QUFDakQsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxSEFBcUg7QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3dyaXRlX2NvbmNlcm4uanM/NDJkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gZXhwb3J0cy5XUklURV9DT05DRVJOX0tFWVMgPSB2b2lkIDA7XG5leHBvcnRzLldSSVRFX0NPTkNFUk5fS0VZUyA9IFsndycsICd3dGltZW91dCcsICdqJywgJ2pvdXJuYWwnLCAnZnN5bmMnXTtcbi8qKlxuICogQSBNb25nb0RCIFdyaXRlQ29uY2Vybiwgd2hpY2ggZGVzY3JpYmVzIHRoZSBsZXZlbCBvZiBhY2tub3dsZWRnZW1lbnRcbiAqIHJlcXVlc3RlZCBmcm9tIE1vbmdvREIgZm9yIHdyaXRlIG9wZXJhdGlvbnMuXG4gKiBAcHVibGljXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvd3JpdGUtY29uY2Vybi9cbiAqL1xuY2xhc3MgV3JpdGVDb25jZXJuIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgV3JpdGVDb25jZXJuIGZyb20gdGhlIHdyaXRlIGNvbmNlcm4gcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0gdyAtIHJlcXVlc3QgYWNrbm93bGVkZ21lbnQgdGhhdCB0aGUgd3JpdGUgb3BlcmF0aW9uIGhhcyBwcm9wYWdhdGVkIHRvIGEgc3BlY2lmaWVkIG51bWJlciBvZiBtb25nb2QgaW5zdGFuY2VzIG9yIHRvIG1vbmdvZCBpbnN0YW5jZXMgd2l0aCBzcGVjaWZpZWQgdGFncy5cbiAgICAgKiBAcGFyYW0gd3RpbWVvdXRNUyAtIHNwZWNpZnkgYSB0aW1lIGxpbWl0IHRvIHByZXZlbnQgd3JpdGUgb3BlcmF0aW9ucyBmcm9tIGJsb2NraW5nIGluZGVmaW5pdGVseVxuICAgICAqIEBwYXJhbSBqb3VybmFsIC0gcmVxdWVzdCBhY2tub3dsZWRnbWVudCB0aGF0IHRoZSB3cml0ZSBvcGVyYXRpb24gaGFzIGJlZW4gd3JpdHRlbiB0byB0aGUgb24tZGlzayBqb3VybmFsXG4gICAgICogQHBhcmFtIGZzeW5jIC0gZXF1aXZhbGVudCB0byB0aGUgaiBvcHRpb24uIElzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHcsIHd0aW1lb3V0TVMsIGpvdXJuYWwsIGZzeW5jKSB7XG4gICAgICAgIGlmICh3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKE51bWJlcih3KSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLncgPSBOdW1iZXIodyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLncgPSB3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3dGltZW91dE1TICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMud3RpbWVvdXRNUyA9IHRoaXMud3RpbWVvdXQgPSB3dGltZW91dE1TO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb3VybmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuam91cm5hbCA9IHRoaXMuaiA9IGpvdXJuYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZzeW5jICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuam91cm5hbCA9IHRoaXMuaiA9IGZzeW5jID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IGEgd3JpdGUgY29uY2VybiB0byBhIGNvbW1hbmQgZG9jdW1lbnQuIFdpbGwgbW9kaWZ5IGFuZCByZXR1cm4gdGhlIGNvbW1hbmQuXG4gICAgICovXG4gICAgc3RhdGljIGFwcGx5KGNvbW1hbmQsIHdyaXRlQ29uY2Vybikge1xuICAgICAgICBjb25zdCB3YyA9IHt9O1xuICAgICAgICAvLyBUaGUgd3JpdGUgY29uY2VybiBkb2N1bWVudCBzZW50IHRvIHRoZSBzZXJ2ZXIgaGFzIHcvd3RpbWVvdXQvaiBmaWVsZHMuXG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4udyAhPSBudWxsKVxuICAgICAgICAgICAgd2MudyA9IHdyaXRlQ29uY2Vybi53O1xuICAgICAgICBpZiAod3JpdGVDb25jZXJuLnd0aW1lb3V0TVMgIT0gbnVsbClcbiAgICAgICAgICAgIHdjLnd0aW1lb3V0ID0gd3JpdGVDb25jZXJuLnd0aW1lb3V0TVM7XG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4uam91cm5hbCAhPSBudWxsKVxuICAgICAgICAgICAgd2MuaiA9IHdyaXRlQ29uY2Vybi5qO1xuICAgICAgICBjb21tYW5kLndyaXRlQ29uY2VybiA9IHdjO1xuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG4gICAgLyoqIENvbnN0cnVjdCBhIFdyaXRlQ29uY2VybiBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC4gKi9cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucywgaW5oZXJpdCkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgaW5oZXJpdCA9IGluaGVyaXQgPz8ge307XG4gICAgICAgIGxldCBvcHRzO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgb3B0cyA9IHsgdzogb3B0aW9ucyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBXcml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIG9wdHMgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudE9wdHMgPSBpbmhlcml0IGluc3RhbmNlb2YgV3JpdGVDb25jZXJuID8gaW5oZXJpdCA6IGluaGVyaXQud3JpdGVDb25jZXJuO1xuICAgICAgICBjb25zdCB7IHcgPSB1bmRlZmluZWQsIHd0aW1lb3V0ID0gdW5kZWZpbmVkLCBqID0gdW5kZWZpbmVkLCBmc3luYyA9IHVuZGVmaW5lZCwgam91cm5hbCA9IHVuZGVmaW5lZCwgd3RpbWVvdXRNUyA9IHVuZGVmaW5lZCB9ID0ge1xuICAgICAgICAgICAgLi4ucGFyZW50T3B0cyxcbiAgICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHcgIT0gbnVsbCB8fFxuICAgICAgICAgICAgd3RpbWVvdXQgIT0gbnVsbCB8fFxuICAgICAgICAgICAgd3RpbWVvdXRNUyAhPSBudWxsIHx8XG4gICAgICAgICAgICBqICE9IG51bGwgfHxcbiAgICAgICAgICAgIGpvdXJuYWwgIT0gbnVsbCB8fFxuICAgICAgICAgICAgZnN5bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXcml0ZUNvbmNlcm4odywgd3RpbWVvdXQgPz8gd3RpbWVvdXRNUywgaiA/PyBqb3VybmFsLCBmc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLldyaXRlQ29uY2VybiA9IFdyaXRlQ29uY2Vybjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyaXRlX2NvbmNlcm4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/write_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/package.json":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"mongodb","version":"6.4.0","description":"The official MongoDB driver for Node.js","main":"lib/index.js","files":["lib","src","etc/prepare.js","mongodb.d.ts","tsconfig.json"],"types":"mongodb.d.ts","repository":{"type":"git","url":"git@github.com:mongodb/node-mongodb-native.git"},"keywords":["mongodb","driver","official"],"author":{"name":"The MongoDB NodeJS Team","email":"dbx-node@mongodb.com"},"dependencies":{"@mongodb-js/saslprep":"^1.1.0","bson":"^6.4.0","mongodb-connection-string-url":"^3.0.0"},"peerDependencies":{"@aws-sdk/credential-providers":"^3.188.0","@mongodb-js/zstd":"^1.1.0","gcp-metadata":"^5.2.0","kerberos":"^2.0.1","mongodb-client-encryption":">=6.0.0 <7","snappy":"^7.2.2","socks":"^2.7.1"},"peerDependenciesMeta":{"@aws-sdk/credential-providers":{"optional":true},"@mongodb-js/zstd":{"optional":true},"kerberos":{"optional":true},"snappy":{"optional":true},"mongodb-client-encryption":{"optional":true},"gcp-metadata":{"optional":true},"socks":{"optional":true}},"devDependencies":{"@aws-sdk/credential-providers":"^3.515.0","@iarna/toml":"^2.2.5","@istanbuljs/nyc-config-typescript":"^1.0.2","@microsoft/api-extractor":"^7.40.6","@microsoft/tsdoc-config":"^0.16.2","@mongodb-js/zstd":"^1.2.0","@octokit/core":"^5.1.0","@types/chai":"^4.3.11","@types/chai-subset":"^1.3.5","@types/express":"^4.17.21","@types/kerberos":"^1.1.5","@types/mocha":"^10.0.6","@types/node":"^20.11.20","@types/saslprep":"^1.0.3","@types/semver":"^7.5.7","@types/sinon":"^10.0.20","@types/sinon-chai":"^3.2.12","@types/whatwg-url":"^11.0.4","@typescript-eslint/eslint-plugin":"^5.62.0","@typescript-eslint/parser":"^5.62.0","chai":"^4.4.1","chai-subset":"^1.6.0","chalk":"^4.1.2","eslint":"^8.56.0","eslint-config-prettier":"^8.10.0","eslint-plugin-import":"^2.29.1","eslint-plugin-prettier":"^4.2.1","eslint-plugin-simple-import-sort":"^10.0.0","eslint-plugin-tsdoc":"^0.2.17","eslint-plugin-unused-imports":"^2.0.0","express":"^4.18.2","gcp-metadata":"^5.3.0","js-yaml":"^4.1.0","mocha":"^10.3.0","mocha-sinon":"^2.1.2","mongodb-client-encryption":"^6.0.0","mongodb-legacy":"^6.0.1","nyc":"^15.1.0","prettier":"^2.8.8","semver":"^7.6.0","sinon":"^15.2.0","sinon-chai":"^3.7.0","snappy":"^7.2.2","socks":"^2.8.1","source-map-support":"^0.5.21","ts-node":"^10.9.2","tsd":"^0.30.6","typescript":"5.0","typescript-cached-transpile":"^0.0.6","v8-heapsnapshot":"^1.3.1","yargs":"^17.7.2"},"license":"Apache-2.0","engines":{"node":">=16.20.1"},"bugs":{"url":"https://jira.mongodb.org/projects/NODE/issues/"},"homepage":"https://github.com/mongodb/node-mongodb-native","scripts":{"build:evergreen":"node .evergreen/generate_evergreen_tasks.js","build:ts":"node ./node_modules/typescript/bin/tsc","build:dts":"npm run build:ts && api-extractor run && node etc/clean_definition_files.cjs && eslint mongodb.d.ts --fix","build:docs":"./etc/docs/build.ts","build:typedoc":"typedoc","build:nightly":"node ./.github/scripts/nightly.mjs","check:bench":"node test/benchmarks/driverBench","check:coverage":"nyc npm run test:all","check:integration-coverage":"nyc npm run check:test","check:lambda":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/handler.test.js","check:lambda:aws":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/aws_handler.test.js","check:lint":"npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd","check:eslint":"eslint -v && eslint --max-warnings=0 --ext \'.js,.ts\' src test","check:tsd":"tsd --version && tsd","check:dependencies":"mocha test/action/dependency.test.ts","check:dts":"node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd","check:search-indexes":"nyc mocha --config test/mocha_mongodb.json test/manual/search-index-management.prose.test.ts","check:test":"mocha --config test/mocha_mongodb.json test/integration","check:unit":"mocha test/unit","check:ts":"node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit","check:atlas":"mocha --config test/manual/mocharc.json test/manual/atlas_connectivity.test.js","check:drivers-atlas-testing":"mocha --config test/mocha_mongodb.json test/atlas/drivers_atlas_testing.test.ts","check:adl":"mocha --config test/mocha_mongodb.json test/manual/atlas-data-lake-testing","check:aws":"nyc mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_aws.test.ts","check:oidc":"mocha --config test/mocha_mongodb.json test/manual/mongodb_oidc.prose.test.ts","check:oidc-azure":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc_azure.prose.test.ts","check:ocsp":"mocha --config test/manual/mocharc.json test/manual/ocsp_support.test.js","check:kerberos":"nyc mocha --config test/manual/mocharc.json test/manual/kerberos.test.ts","check:tls":"mocha --config test/manual/mocharc.json test/manual/tls_support.test.ts","check:ldap":"nyc mocha --config test/manual/mocharc.json test/manual/ldap.test.js","check:socks5":"mocha --config test/manual/mocharc.json test/manual/socks5.test.ts","check:csfle":"mocha --config test/mocha_mongodb.json test/integration/client-side-encryption","check:snappy":"mocha test/unit/assorted/snappy.test.js","fix:eslint":"npm run check:eslint -- --fix","prepare":"node etc/prepare.js","preview:docs":"ts-node etc/docs/preview.ts","test":"npm run check:lint && npm run test:all","test:all":"npm run check:unit && npm run check:test","update:docs":"npm run build:docs -- --yes"},"tsd":{"directory":"test/types","compilerOptions":{"strict":true,"target":"esnext","module":"commonjs","moduleResolution":"node"}}}');

/***/ })

};
;